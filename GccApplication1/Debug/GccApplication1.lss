
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  00003e84  00003f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800262  00800262  00003f7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000730  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a37c  00000000  00000000  0000471c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e3a  00000000  00000000  0000ea98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000509b  00000000  00000000  000118d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001380  00000000  00000000  00016970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a51  00000000  00000000  00017cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006885  00000000  00000000  0001a741  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00020fc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	00 00       	nop
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	b1 c0       	rjmp	.+354    	; 0x18c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a7 c2       	rjmp	.+1358   	; 0x580 <__vector_12>
      32:	00 00       	nop
      34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
      36:	00 00       	nop
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
      46:	00 00       	nop
      48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
      4e:	00 00       	nop
      50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
      52:	00 00       	nop
      54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
      56:	00 00       	nop
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
      76:	00 00       	nop
      78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
      80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
      8e:	00 00       	nop
      90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
      92:	00 00       	nop
      94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
      96:	00 00       	nop
      98:	79 c0       	rjmp	.+242    	; 0x18c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	77 c0       	rjmp	.+238    	; 0x18c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	75 c0       	rjmp	.+234    	; 0x18c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	73 c0       	rjmp	.+230    	; 0x18c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	71 c0       	rjmp	.+226    	; 0x18c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6f c0       	rjmp	.+222    	; 0x18c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6d c0       	rjmp	.+218    	; 0x18c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6b c0       	rjmp	.+214    	; 0x18c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	69 c0       	rjmp	.+210    	; 0x18c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_47>
      c0:	65 c0       	rjmp	.+202    	; 0x18c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	63 c0       	rjmp	.+198    	; 0x18c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	61 c0       	rjmp	.+194    	; 0x18c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	5f c0       	rjmp	.+190    	; 0x18c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5d c0       	rjmp	.+186    	; 0x18c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5b c0       	rjmp	.+182    	; 0x18c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	59 c0       	rjmp	.+178    	; 0x18c <__bad_interrupt>
      da:	00 00       	nop
      dc:	57 c0       	rjmp	.+174    	; 0x18c <__bad_interrupt>
      de:	00 00       	nop
      e0:	55 c0       	rjmp	.+170    	; 0x18c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4f 11       	cpse	r20, r15
      e6:	4f 11       	cpse	r20, r15
      e8:	4f 11       	cpse	r20, r15
      ea:	76 11       	cpse	r23, r6
      ec:	7e 11       	cpse	r23, r14
      ee:	8c 11       	cpse	r24, r12
      f0:	4f 11       	cpse	r20, r15
      f2:	4f 11       	cpse	r20, r15
      f4:	76 11       	cpse	r23, r6
      f6:	7e 11       	cpse	r23, r14

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0c d7       	rcall	.+3608   	; 0xf12 <prvCheckTasksWaitingTermination>
      fa:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	d8 f3       	brcs	.-10     	; 0xf8 <prvIdleTask>
     102:	79 d1       	rcall	.+754    	; 0x3f6 <vPortYield>
     104:	f9 cf       	rjmp	.-14     	; 0xf8 <prvIdleTask>

00000106 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	1f 92       	push	r1
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	ce 01       	movw	r24, r28
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <prvGetNextExpireTime>
     118:	69 81       	ldd	r22, Y+1	; 0x01
     11a:	0e 94 df 10 	call	0x21be	; 0x21be <prvProcessTimerOrBlockTask>
     11e:	0e 94 21 11 	call	0x2242	; 0x2242 <prvProcessReceivedCommands>
     122:	f6 cf       	rjmp	.-20     	; 0x110 <prvTimerTask+0xa>

00000124 <__ctors_start>:
     124:	5c 17       	cp	r21, r28
     126:	09 19       	sub	r16, r9
     128:	f8 19       	sub	r31, r8

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e4 e8       	ldi	r30, 0x84	; 132
     142:	fe e3       	ldi	r31, 0x3E	; 62
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 36       	cpi	r26, 0x62	; 98
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	a2 e6       	ldi	r26, 0x62	; 98
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a7 3a       	cpi	r26, 0xA7	; 167
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>

00000164 <__do_global_ctors>:
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	c5 e9       	ldi	r28, 0x95	; 149
     168:	d0 e0       	ldi	r29, 0x00	; 0
     16a:	00 e0       	ldi	r16, 0x00	; 0
     16c:	06 c0       	rjmp	.+12     	; 0x17a <__do_global_ctors+0x16>
     16e:	21 97       	sbiw	r28, 0x01	; 1
     170:	01 09       	sbc	r16, r1
     172:	80 2f       	mov	r24, r16
     174:	fe 01       	movw	r30, r28
     176:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <__tablejump2__>
     17a:	c2 39       	cpi	r28, 0x92	; 146
     17c:	d1 07       	cpc	r29, r17
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	08 07       	cpc	r16, r24
     182:	a9 f7       	brne	.-22     	; 0x16e <__do_global_ctors+0xa>
     184:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <main>
     188:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <_ZN8castimer8vrednostEv>:


#include "src/includes/includes.h"

unsigned long castimer::vrednost(void)
{
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	fc 01       	movw	r30, r24
  if (tr == false)
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	a9 f0       	breq	.+42     	; 0x1c4 <_ZN8castimer8vrednostEv+0x36>
  {
    ts = Hardware.timeFROMboot;
    tr = true;
    return 0;
  }
  return Hardware.timeFROMboot - ts;
     19a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <Hardware+0x14>
     19e:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <Hardware+0x15>
     1a2:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <Hardware+0x16>
     1a6:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <Hardware+0x17>
     1aa:	01 81       	ldd	r16, Z+1	; 0x01
     1ac:	12 81       	ldd	r17, Z+2	; 0x02
     1ae:	23 81       	ldd	r18, Z+3	; 0x03
     1b0:	34 81       	ldd	r19, Z+4	; 0x04
     1b2:	bc 01       	movw	r22, r24
     1b4:	cd 01       	movw	r24, r26
     1b6:	60 1b       	sub	r22, r16
     1b8:	71 0b       	sbc	r23, r17
     1ba:	82 0b       	sbc	r24, r18
     1bc:	93 0b       	sbc	r25, r19
}
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

unsigned long castimer::vrednost(void)
{
  if (tr == false)
  {
    ts = Hardware.timeFROMboot;
     1c4:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <Hardware+0x14>
     1c8:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <Hardware+0x15>
     1cc:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <Hardware+0x16>
     1d0:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <Hardware+0x17>
     1d4:	81 83       	std	Z+1, r24	; 0x01
     1d6:	92 83       	std	Z+2, r25	; 0x02
     1d8:	a3 83       	std	Z+3, r26	; 0x03
     1da:	b4 83       	std	Z+4, r27	; 0x04
    tr = true;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 83       	st	Z, r24
    return 0;
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	cb 01       	movw	r24, r22
  }
  return Hardware.timeFROMboot - ts;
}
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	08 95       	ret

000001ec <_ZN8castimer9ponastaviEv>:

void castimer::ponastavi(void)
{
  tr = false;
     1ec:	fc 01       	movw	r30, r24
     1ee:	10 82       	st	Z, r1
     1f0:	08 95       	ret

000001f2 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
     1f8:	0e 94 9b 09 	call	0x1336	; 0x1336 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     1fc:	ce 01       	movw	r24, r28
     1fe:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <malloc>
     202:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     204:	0e 94 c4 0a 	call	0x1588	; 0x1588 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     208:	20 97       	sbiw	r28, 0x00	; 0
     20a:	11 f4       	brne	.+4      	; 0x210 <pvPortMalloc+0x1e>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     20c:	0e 94 b2 11 	call	0x2364	; 0x2364 <vApplicationMallocFailedHook>
            }
        }
    #endif

    return pvReturn;
}
     210:	ce 01       	movw	r24, r28
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
    if( pv )
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	41 f0       	breq	.+16     	; 0x230 <vPortFree+0x18>
     220:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     222:	0e 94 9b 09 	call	0x1336	; 0x1336 <vTaskSuspendAll>
        {
            free( pv );
     226:	ce 01       	movw	r24, r28
     228:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     22c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <xTaskResumeAll>
    }
}
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     236:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     238:	03 96       	adiw	r24, 0x03	; 3
     23a:	92 83       	std	Z+2, r25	; 0x02
     23c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     23e:	2f ef       	ldi	r18, 0xFF	; 255
     240:	3f ef       	ldi	r19, 0xFF	; 255
     242:	34 83       	std	Z+4, r19	; 0x04
     244:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     246:	96 83       	std	Z+6, r25	; 0x06
     248:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     24a:	90 87       	std	Z+8, r25	; 0x08
     24c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     24e:	10 82       	st	Z, r1
     250:	08 95       	ret

00000252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     252:	fc 01       	movw	r30, r24
     254:	11 86       	std	Z+9, r1	; 0x09
     256:	10 86       	std	Z+8, r1	; 0x08
     258:	08 95       	ret

0000025a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	9c 01       	movw	r18, r24
     260:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     262:	dc 01       	movw	r26, r24
     264:	11 96       	adiw	r26, 0x01	; 1
     266:	cd 91       	ld	r28, X+
     268:	dc 91       	ld	r29, X
     26a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     26c:	d3 83       	std	Z+3, r29	; 0x03
     26e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	9d 81       	ldd	r25, Y+5	; 0x05
     274:	95 83       	std	Z+5, r25	; 0x05
     276:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     278:	8c 81       	ldd	r24, Y+4	; 0x04
     27a:	9d 81       	ldd	r25, Y+5	; 0x05
     27c:	dc 01       	movw	r26, r24
     27e:	13 96       	adiw	r26, 0x03	; 3
     280:	7c 93       	st	X, r23
     282:	6e 93       	st	-X, r22
     284:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     286:	7d 83       	std	Y+5, r23	; 0x05
     288:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     28a:	31 87       	std	Z+9, r19	; 0x09
     28c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     28e:	f9 01       	movw	r30, r18
     290:	80 81       	ld	r24, Z
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 83       	st	Z, r24
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     2a2:	48 81       	ld	r20, Y
     2a4:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     2a6:	4f 3f       	cpi	r20, 0xFF	; 255
     2a8:	2f ef       	ldi	r18, 0xFF	; 255
     2aa:	52 07       	cpc	r21, r18
     2ac:	21 f4       	brne	.+8      	; 0x2b6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     2ae:	fc 01       	movw	r30, r24
     2b0:	a7 81       	ldd	r26, Z+7	; 0x07
     2b2:	b0 85       	ldd	r27, Z+8	; 0x08
     2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     2b6:	dc 01       	movw	r26, r24
     2b8:	13 96       	adiw	r26, 0x03	; 3
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <vListInsert+0x22>
     2bc:	df 01       	movw	r26, r30
     2be:	12 96       	adiw	r26, 0x02	; 2
     2c0:	ed 91       	ld	r30, X+
     2c2:	fc 91       	ld	r31, X
     2c4:	13 97       	sbiw	r26, 0x03	; 3
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	42 17       	cp	r20, r18
     2cc:	53 07       	cpc	r21, r19
     2ce:	b0 f7       	brcc	.-20     	; 0x2bc <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     2d0:	12 96       	adiw	r26, 0x02	; 2
     2d2:	ed 91       	ld	r30, X+
     2d4:	fc 91       	ld	r31, X
     2d6:	13 97       	sbiw	r26, 0x03	; 3
     2d8:	fb 83       	std	Y+3, r31	; 0x03
     2da:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2dc:	d5 83       	std	Z+5, r29	; 0x05
     2de:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     2e0:	bd 83       	std	Y+5, r27	; 0x05
     2e2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     2e4:	13 96       	adiw	r26, 0x03	; 3
     2e6:	dc 93       	st	X, r29
     2e8:	ce 93       	st	-X, r28
     2ea:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     2ec:	99 87       	std	Y+9, r25	; 0x09
     2ee:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 81       	ld	r18, Z
     2f4:	2f 5f       	subi	r18, 0xFF	; 255
     2f6:	20 83       	st	Z, r18
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     304:	a0 85       	ldd	r26, Z+8	; 0x08
     306:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     308:	c2 81       	ldd	r28, Z+2	; 0x02
     30a:	d3 81       	ldd	r29, Z+3	; 0x03
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	95 81       	ldd	r25, Z+5	; 0x05
     310:	9d 83       	std	Y+5, r25	; 0x05
     312:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     314:	c4 81       	ldd	r28, Z+4	; 0x04
     316:	d5 81       	ldd	r29, Z+5	; 0x05
     318:	82 81       	ldd	r24, Z+2	; 0x02
     31a:	93 81       	ldd	r25, Z+3	; 0x03
     31c:	9b 83       	std	Y+3, r25	; 0x03
     31e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	8d 91       	ld	r24, X+
     324:	9c 91       	ld	r25, X
     326:	12 97       	sbiw	r26, 0x02	; 2
     328:	e8 17       	cp	r30, r24
     32a:	f9 07       	cpc	r31, r25
     32c:	31 f4       	brne	.+12     	; 0x33a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     32e:	84 81       	ldd	r24, Z+4	; 0x04
     330:	95 81       	ldd	r25, Z+5	; 0x05
     332:	12 96       	adiw	r26, 0x02	; 2
     334:	9c 93       	st	X, r25
     336:	8e 93       	st	-X, r24
     338:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     33a:	11 86       	std	Z+9, r1	; 0x09
     33c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     33e:	8c 91       	ld	r24, X
     340:	81 50       	subi	r24, 0x01	; 1
     342:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     344:	8c 91       	ld	r24, X
}
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     34c:	a8 95       	wdr
     34e:	90 ec       	ldi	r25, 0xC0	; 192
     350:	88 e1       	ldi	r24, 0x18	; 24
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	a8 95       	wdr
     358:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     362:	08 95       	ret

00000364 <pxPortInitialiseStack>:
     364:	fc 01       	movw	r30, r24
     366:	60 83       	st	Z, r22
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	70 83       	st	Z, r23
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	10 82       	st	Z, r1
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	10 82       	st	Z, r1
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	20 e8       	ldi	r18, 0x80	; 128
     378:	20 83       	st	Z, r18
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	10 82       	st	Z, r1
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	10 82       	st	Z, r1
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	10 82       	st	Z, r1
     386:	77 97       	sbiw	r30, 0x17	; 23
     388:	40 83       	st	Z, r20
     38a:	31 97       	sbiw	r30, 0x01	; 1
     38c:	50 83       	st	Z, r21
     38e:	86 97       	sbiw	r24, 0x26	; 38
     390:	08 95       	ret

00000392 <xPortStartScheduler>:
     392:	dc df       	rcall	.-72     	; 0x34c <prvSetupTimerInterrupt>
     394:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     398:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     39c:	cd 91       	ld	r28, X+
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	dd 91       	ld	r29, X+
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	bf 91       	pop	r27
     3ae:	af 91       	pop	r26
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	7f 91       	pop	r23
     3b6:	6f 91       	pop	r22
     3b8:	5f 91       	pop	r21
     3ba:	4f 91       	pop	r20
     3bc:	3f 91       	pop	r19
     3be:	2f 91       	pop	r18
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
     3d0:	9f 90       	pop	r9
     3d2:	8f 90       	pop	r8
     3d4:	7f 90       	pop	r7
     3d6:	6f 90       	pop	r6
     3d8:	5f 90       	pop	r5
     3da:	4f 90       	pop	r4
     3dc:	3f 90       	pop	r3
     3de:	2f 90       	pop	r2
     3e0:	1f 90       	pop	r1
     3e2:	0f 90       	pop	r0
     3e4:	0c be       	out	0x3c, r0	; 60
     3e6:	0f 90       	pop	r0
     3e8:	0b be       	out	0x3b, r0	; 59
     3ea:	0f 90       	pop	r0
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	0f 90       	pop	r0
     3f0:	08 95       	ret
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	08 95       	ret

000003f6 <vPortYield>:
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	0f 92       	push	r0
     3fe:	0b b6       	in	r0, 0x3b	; 59
     400:	0f 92       	push	r0
     402:	0c b6       	in	r0, 0x3c	; 60
     404:	0f 92       	push	r0
     406:	1f 92       	push	r1
     408:	11 24       	eor	r1, r1
     40a:	2f 92       	push	r2
     40c:	3f 92       	push	r3
     40e:	4f 92       	push	r4
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     44a:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     44e:	0d b6       	in	r0, 0x3d	; 61
     450:	0d 92       	st	X+, r0
     452:	0e b6       	in	r0, 0x3e	; 62
     454:	0d 92       	st	X+, r0
     456:	0e 94 aa 0b 	call	0x1754	; 0x1754 <vTaskSwitchContext>
     45a:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     45e:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     462:	cd 91       	ld	r28, X+
     464:	cd bf       	out	0x3d, r28	; 61
     466:	dd 91       	ld	r29, X+
     468:	de bf       	out	0x3e, r29	; 62
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	af 90       	pop	r10
     496:	9f 90       	pop	r9
     498:	8f 90       	pop	r8
     49a:	7f 90       	pop	r7
     49c:	6f 90       	pop	r6
     49e:	5f 90       	pop	r5
     4a0:	4f 90       	pop	r4
     4a2:	3f 90       	pop	r3
     4a4:	2f 90       	pop	r2
     4a6:	1f 90       	pop	r1
     4a8:	0f 90       	pop	r0
     4aa:	0c be       	out	0x3c, r0	; 60
     4ac:	0f 90       	pop	r0
     4ae:	0b be       	out	0x3b, r0	; 59
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	08 95       	ret

000004b8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	0f 92       	push	r0
     4c0:	0b b6       	in	r0, 0x3b	; 59
     4c2:	0f 92       	push	r0
     4c4:	0c b6       	in	r0, 0x3c	; 60
     4c6:	0f 92       	push	r0
     4c8:	1f 92       	push	r1
     4ca:	11 24       	eor	r1, r1
     4cc:	2f 92       	push	r2
     4ce:	3f 92       	push	r3
     4d0:	4f 92       	push	r4
     4d2:	5f 92       	push	r5
     4d4:	6f 92       	push	r6
     4d6:	7f 92       	push	r7
     4d8:	8f 92       	push	r8
     4da:	9f 92       	push	r9
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ef 93       	push	r30
     506:	ff 93       	push	r31
     508:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     50c:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     510:	0d b6       	in	r0, 0x3d	; 61
     512:	0d 92       	st	X+, r0
     514:	0e b6       	in	r0, 0x3e	; 62
     516:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     518:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     51a:	1d d7       	rcall	.+3642   	; 0x1356 <xTaskIncrementTick>
     51c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     51e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     522:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     526:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     52a:	cd 91       	ld	r28, X+
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	dd 91       	ld	r29, X+
     530:	de bf       	out	0x3e, r29	; 62
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	7f 90       	pop	r7
     564:	6f 90       	pop	r6
     566:	5f 90       	pop	r5
     568:	4f 90       	pop	r4
     56a:	3f 90       	pop	r3
     56c:	2f 90       	pop	r2
     56e:	1f 90       	pop	r1
     570:	0f 90       	pop	r0
     572:	0c be       	out	0x3c, r0	; 60
     574:	0f 90       	pop	r0
     576:	0b be       	out	0x3b, r0	; 59
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     57e:	08 95       	ret

00000580 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     580:	9b df       	rcall	.-202    	; 0x4b8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     582:	18 95       	reti

00000584 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     584:	dc 01       	movw	r26, r24
     586:	51 96       	adiw	r26, 0x11	; 17
     588:	2c 91       	ld	r18, X
     58a:	51 97       	sbiw	r26, 0x11	; 17
     58c:	22 23       	and	r18, r18
     58e:	41 f0       	breq	.+16     	; 0x5a0 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     590:	56 96       	adiw	r26, 0x16	; 22
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	57 97       	sbiw	r26, 0x17	; 23
     598:	90 81       	ld	r25, Z
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	89 1b       	sub	r24, r25
     59e:	08 95       	ret
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	08 95       	ret

000005a4 <prvIsQueueEmpty>:
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	0f 92       	push	r0
     5aa:	fc 01       	movw	r30, r24
     5ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     5ae:	81 11       	cpse	r24, r1
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <prvIsQueueEmpty+0x12>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <prvIsQueueEmpty+0x14>
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	08 95       	ret

000005be <prvIsQueueFull>:
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	0f 92       	push	r0
     5c4:	fc 01       	movw	r30, r24
     5c6:	22 8d       	ldd	r18, Z+26	; 0x1a
     5c8:	83 8d       	ldd	r24, Z+27	; 0x1b
     5ca:	28 13       	cpse	r18, r24
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <prvIsQueueFull+0x14>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <prvIsQueueFull+0x16>
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	08 95       	ret

000005da <prvCopyDataToQueue>:
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
     5e4:	04 2f       	mov	r16, r20
     5e6:	1a 8d       	ldd	r17, Y+26	; 0x1a
     5e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     5ea:	41 11       	cpse	r20, r1
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <prvCopyDataToQueue+0x2c>
     5ee:	88 81       	ld	r24, Y
     5f0:	99 81       	ldd	r25, Y+1	; 0x01
     5f2:	89 2b       	or	r24, r25
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <prvCopyDataToQueue+0x1e>
     5f6:	42 c0       	rjmp	.+132    	; 0x67c <prvCopyDataToQueue+0xa2>
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	9d 81       	ldd	r25, Y+5	; 0x05
     5fc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xTaskPriorityDisinherit>
     600:	1d 82       	std	Y+5, r1	; 0x05
     602:	1c 82       	std	Y+4, r1	; 0x04
     604:	42 c0       	rjmp	.+132    	; 0x68a <prvCopyDataToQueue+0xb0>
     606:	01 11       	cpse	r16, r1
     608:	17 c0       	rjmp	.+46     	; 0x638 <prvCopyDataToQueue+0x5e>
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <memcpy>
     614:	2c 8d       	ldd	r18, Y+28	; 0x1c
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	9b 81       	ldd	r25, Y+3	; 0x03
     61a:	82 0f       	add	r24, r18
     61c:	91 1d       	adc	r25, r1
     61e:	9b 83       	std	Y+3, r25	; 0x03
     620:	8a 83       	std	Y+2, r24	; 0x02
     622:	2c 81       	ldd	r18, Y+4	; 0x04
     624:	3d 81       	ldd	r19, Y+5	; 0x05
     626:	82 17       	cp	r24, r18
     628:	93 07       	cpc	r25, r19
     62a:	50 f1       	brcs	.+84     	; 0x680 <prvCopyDataToQueue+0xa6>
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	9b 83       	std	Y+3, r25	; 0x03
     632:	8a 83       	std	Y+2, r24	; 0x02
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	29 c0       	rjmp	.+82     	; 0x68a <prvCopyDataToQueue+0xb0>
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	9f 81       	ldd	r25, Y+7	; 0x07
     63e:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <memcpy>
     642:	8c 8d       	ldd	r24, Y+28	; 0x1c
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	91 95       	neg	r25
     648:	81 95       	neg	r24
     64a:	91 09       	sbc	r25, r1
     64c:	2e 81       	ldd	r18, Y+6	; 0x06
     64e:	3f 81       	ldd	r19, Y+7	; 0x07
     650:	28 0f       	add	r18, r24
     652:	39 1f       	adc	r19, r25
     654:	3f 83       	std	Y+7, r19	; 0x07
     656:	2e 83       	std	Y+6, r18	; 0x06
     658:	48 81       	ld	r20, Y
     65a:	59 81       	ldd	r21, Y+1	; 0x01
     65c:	24 17       	cp	r18, r20
     65e:	35 07       	cpc	r19, r21
     660:	30 f4       	brcc	.+12     	; 0x66e <prvCopyDataToQueue+0x94>
     662:	2c 81       	ldd	r18, Y+4	; 0x04
     664:	3d 81       	ldd	r19, Y+5	; 0x05
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	9f 83       	std	Y+7, r25	; 0x07
     66c:	8e 83       	std	Y+6, r24	; 0x06
     66e:	02 30       	cpi	r16, 0x02	; 2
     670:	49 f4       	brne	.+18     	; 0x684 <prvCopyDataToQueue+0xaa>
     672:	11 23       	and	r17, r17
     674:	49 f0       	breq	.+18     	; 0x688 <prvCopyDataToQueue+0xae>
     676:	11 50       	subi	r17, 0x01	; 1
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	07 c0       	rjmp	.+14     	; 0x68a <prvCopyDataToQueue+0xb0>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	05 c0       	rjmp	.+10     	; 0x68a <prvCopyDataToQueue+0xb0>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	03 c0       	rjmp	.+6      	; 0x68a <prvCopyDataToQueue+0xb0>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	01 c0       	rjmp	.+2      	; 0x68a <prvCopyDataToQueue+0xb0>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	1f 5f       	subi	r17, 0xFF	; 255
     68c:	1a 8f       	std	Y+26, r17	; 0x1a
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <prvCopyDataFromQueue>:
     698:	fc 01       	movw	r30, r24
     69a:	44 8d       	ldd	r20, Z+28	; 0x1c
     69c:	44 23       	and	r20, r20
     69e:	a9 f0       	breq	.+42     	; 0x6ca <prvCopyDataFromQueue+0x32>
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	26 81       	ldd	r18, Z+6	; 0x06
     6a4:	37 81       	ldd	r19, Z+7	; 0x07
     6a6:	24 0f       	add	r18, r20
     6a8:	35 1f       	adc	r19, r21
     6aa:	37 83       	std	Z+7, r19	; 0x07
     6ac:	26 83       	std	Z+6, r18	; 0x06
     6ae:	84 81       	ldd	r24, Z+4	; 0x04
     6b0:	95 81       	ldd	r25, Z+5	; 0x05
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	20 f0       	brcs	.+8      	; 0x6c0 <prvCopyDataFromQueue+0x28>
     6b8:	80 81       	ld	r24, Z
     6ba:	91 81       	ldd	r25, Z+1	; 0x01
     6bc:	97 83       	std	Z+7, r25	; 0x07
     6be:	86 83       	std	Z+6, r24	; 0x06
     6c0:	cb 01       	movw	r24, r22
     6c2:	66 81       	ldd	r22, Z+6	; 0x06
     6c4:	77 81       	ldd	r23, Z+7	; 0x07
     6c6:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <memcpy>
     6ca:	08 95       	ret

000006cc <prvUnlockQueue>:
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	ec 01       	movw	r28, r24
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	0f 92       	push	r0
     6da:	1e 8d       	ldd	r17, Y+30	; 0x1e
     6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <prvUnlockQueue+0x28>
     6de:	89 89       	ldd	r24, Y+17	; 0x11
     6e0:	88 23       	and	r24, r24
     6e2:	51 f0       	breq	.+20     	; 0x6f8 <prvUnlockQueue+0x2c>
     6e4:	ce 01       	movw	r24, r28
     6e6:	41 96       	adiw	r24, 0x11	; 17
     6e8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xTaskRemoveFromEventList>
     6ec:	81 11       	cpse	r24, r1
     6ee:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vTaskMissedYield>
     6f2:	11 50       	subi	r17, 0x01	; 1
     6f4:	11 16       	cp	r1, r17
     6f6:	9c f3       	brlt	.-26     	; 0x6de <prvUnlockQueue+0x12>
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	8e 8f       	std	Y+30, r24	; 0x1e
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	0f 92       	push	r0
     706:	1d 8d       	ldd	r17, Y+29	; 0x1d
     708:	0b c0       	rjmp	.+22     	; 0x720 <prvUnlockQueue+0x54>
     70a:	88 85       	ldd	r24, Y+8	; 0x08
     70c:	88 23       	and	r24, r24
     70e:	51 f0       	breq	.+20     	; 0x724 <prvUnlockQueue+0x58>
     710:	ce 01       	movw	r24, r28
     712:	08 96       	adiw	r24, 0x08	; 8
     714:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xTaskRemoveFromEventList>
     718:	81 11       	cpse	r24, r1
     71a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <vTaskMissedYield>
     71e:	11 50       	subi	r17, 0x01	; 1
     720:	11 16       	cp	r1, r17
     722:	9c f3       	brlt	.-26     	; 0x70a <prvUnlockQueue+0x3e>
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	8d 8f       	std	Y+29, r24	; 0x1d
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <xQueueGenericReset>:
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	ec 01       	movw	r28, r24
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	0f 92       	push	r0
     740:	e8 81       	ld	r30, Y
     742:	f9 81       	ldd	r31, Y+1	; 0x01
     744:	8b 8d       	ldd	r24, Y+27	; 0x1b
     746:	2c 8d       	ldd	r18, Y+28	; 0x1c
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	82 9f       	mul	r24, r18
     74e:	a0 01       	movw	r20, r0
     750:	83 9f       	mul	r24, r19
     752:	50 0d       	add	r21, r0
     754:	92 9f       	mul	r25, r18
     756:	50 0d       	add	r21, r0
     758:	11 24       	eor	r1, r1
     75a:	4e 0f       	add	r20, r30
     75c:	5f 1f       	adc	r21, r31
     75e:	5d 83       	std	Y+5, r21	; 0x05
     760:	4c 83       	std	Y+4, r20	; 0x04
     762:	1a 8e       	std	Y+26, r1	; 0x1a
     764:	fb 83       	std	Y+3, r31	; 0x03
     766:	ea 83       	std	Y+2, r30	; 0x02
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	28 9f       	mul	r18, r24
     76c:	a0 01       	movw	r20, r0
     76e:	29 9f       	mul	r18, r25
     770:	50 0d       	add	r21, r0
     772:	38 9f       	mul	r19, r24
     774:	50 0d       	add	r21, r0
     776:	11 24       	eor	r1, r1
     778:	cf 01       	movw	r24, r30
     77a:	84 0f       	add	r24, r20
     77c:	95 1f       	adc	r25, r21
     77e:	9f 83       	std	Y+7, r25	; 0x07
     780:	8e 83       	std	Y+6, r24	; 0x06
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	8d 8f       	std	Y+29, r24	; 0x1d
     786:	8e 8f       	std	Y+30, r24	; 0x1e
     788:	61 11       	cpse	r22, r1
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <xQueueGenericReset+0x6e>
     78c:	88 85       	ldd	r24, Y+8	; 0x08
     78e:	88 23       	and	r24, r24
     790:	71 f0       	breq	.+28     	; 0x7ae <xQueueGenericReset+0x7a>
     792:	ce 01       	movw	r24, r28
     794:	08 96       	adiw	r24, 0x08	; 8
     796:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xTaskRemoveFromEventList>
     79a:	88 23       	and	r24, r24
     79c:	41 f0       	breq	.+16     	; 0x7ae <xQueueGenericReset+0x7a>
     79e:	2b de       	rcall	.-938    	; 0x3f6 <vPortYield>
     7a0:	06 c0       	rjmp	.+12     	; 0x7ae <xQueueGenericReset+0x7a>
     7a2:	ce 01       	movw	r24, r28
     7a4:	08 96       	adiw	r24, 0x08	; 8
     7a6:	47 dd       	rcall	.-1394   	; 0x236 <vListInitialise>
     7a8:	ce 01       	movw	r24, r28
     7aa:	41 96       	adiw	r24, 0x11	; 17
     7ac:	44 dd       	rcall	.-1400   	; 0x236 <vListInitialise>
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <prvInitialiseNewQueue>:
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	f8 01       	movw	r30, r16
     7c0:	61 11       	cpse	r22, r1
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <prvInitialiseNewQueue+0x10>
     7c4:	11 83       	std	Z+1, r17	; 0x01
     7c6:	00 83       	st	Z, r16
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <prvInitialiseNewQueue+0x14>
     7ca:	51 83       	std	Z+1, r21	; 0x01
     7cc:	40 83       	st	Z, r20
     7ce:	83 8f       	std	Z+27, r24	; 0x1b
     7d0:	64 8f       	std	Z+28, r22	; 0x1c
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	cf 01       	movw	r24, r30
     7d6:	ae df       	rcall	.-164    	; 0x734 <xQueueGenericReset>
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <xQueueGenericCreate>:
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	f8 2e       	mov	r15, r24
     7ee:	e6 2e       	mov	r14, r22
     7f0:	d4 2e       	mov	r13, r20
     7f2:	86 9f       	mul	r24, r22
     7f4:	c0 01       	movw	r24, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	4f 96       	adiw	r24, 0x1f	; 31
     7fa:	fb dc       	rcall	.-1546   	; 0x1f2 <pvPortMalloc>
     7fc:	ec 01       	movw	r28, r24
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	41 f0       	breq	.+16     	; 0x812 <xQueueGenericCreate+0x34>
     802:	8c 01       	movw	r16, r24
     804:	2d 2d       	mov	r18, r13
     806:	ac 01       	movw	r20, r24
     808:	41 5e       	subi	r20, 0xE1	; 225
     80a:	5f 4f       	sbci	r21, 0xFF	; 255
     80c:	6e 2d       	mov	r22, r14
     80e:	8f 2d       	mov	r24, r15
     810:	d4 df       	rcall	.-88     	; 0x7ba <prvInitialiseNewQueue>
     812:	ce 01       	movw	r24, r28
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	08 95       	ret

00000824 <xQueueGenericSend>:
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	00 d0       	rcall	.+0      	; 0x836 <xQueueGenericSend+0x12>
     836:	1f 92       	push	r1
     838:	1f 92       	push	r1
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	8c 01       	movw	r16, r24
     840:	7b 01       	movw	r14, r22
     842:	5d 83       	std	Y+5, r21	; 0x05
     844:	4c 83       	std	Y+4, r20	; 0x04
     846:	c2 2e       	mov	r12, r18
     848:	d1 2c       	mov	r13, r1
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	0f 92       	push	r0
     850:	f8 01       	movw	r30, r16
     852:	92 8d       	ldd	r25, Z+26	; 0x1a
     854:	83 8d       	ldd	r24, Z+27	; 0x1b
     856:	98 17       	cp	r25, r24
     858:	18 f0       	brcs	.+6      	; 0x860 <xQueueGenericSend+0x3c>
     85a:	f2 e0       	ldi	r31, 0x02	; 2
     85c:	cf 12       	cpse	r12, r31
     85e:	16 c0       	rjmp	.+44     	; 0x88c <xQueueGenericSend+0x68>
     860:	4c 2d       	mov	r20, r12
     862:	b7 01       	movw	r22, r14
     864:	c8 01       	movw	r24, r16
     866:	b9 de       	rcall	.-654    	; 0x5da <prvCopyDataToQueue>
     868:	f8 01       	movw	r30, r16
     86a:	91 89       	ldd	r25, Z+17	; 0x11
     86c:	99 23       	and	r25, r25
     86e:	41 f0       	breq	.+16     	; 0x880 <xQueueGenericSend+0x5c>
     870:	c8 01       	movw	r24, r16
     872:	41 96       	adiw	r24, 0x11	; 17
     874:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xTaskRemoveFromEventList>
     878:	88 23       	and	r24, r24
     87a:	21 f0       	breq	.+8      	; 0x884 <xQueueGenericSend+0x60>
     87c:	bc dd       	rcall	.-1160   	; 0x3f6 <vPortYield>
     87e:	02 c0       	rjmp	.+4      	; 0x884 <xQueueGenericSend+0x60>
     880:	81 11       	cpse	r24, r1
     882:	b9 dd       	rcall	.-1166   	; 0x3f6 <vPortYield>
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	43 c0       	rjmp	.+134    	; 0x912 <xQueueGenericSend+0xee>
     88c:	8c 81       	ldd	r24, Y+4	; 0x04
     88e:	9d 81       	ldd	r25, Y+5	; 0x05
     890:	89 2b       	or	r24, r25
     892:	21 f4       	brne	.+8      	; 0x89c <xQueueGenericSend+0x78>
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	3b c0       	rjmp	.+118    	; 0x912 <xQueueGenericSend+0xee>
     89c:	d1 10       	cpse	r13, r1
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <xQueueGenericSend+0x88>
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskInternalSetTimeOutState>
     8a8:	dd 24       	eor	r13, r13
     8aa:	d3 94       	inc	r13
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	42 d5       	rcall	.+2692   	; 0x1336 <vTaskSuspendAll>
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	0f 92       	push	r0
     8b8:	f8 01       	movw	r30, r16
     8ba:	85 8d       	ldd	r24, Z+29	; 0x1d
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	09 f4       	brne	.+2      	; 0x8c2 <xQueueGenericSend+0x9e>
     8c0:	15 8e       	std	Z+29, r1	; 0x1d
     8c2:	f8 01       	movw	r30, r16
     8c4:	86 8d       	ldd	r24, Z+30	; 0x1e
     8c6:	8f 3f       	cpi	r24, 0xFF	; 255
     8c8:	09 f4       	brne	.+2      	; 0x8cc <xQueueGenericSend+0xa8>
     8ca:	16 8e       	std	Z+30, r1	; 0x1e
     8cc:	0f 90       	pop	r0
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	be 01       	movw	r22, r28
     8d2:	6c 5f       	subi	r22, 0xFC	; 252
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xTaskCheckForTimeOut>
     8de:	81 11       	cpse	r24, r1
     8e0:	14 c0       	rjmp	.+40     	; 0x90a <xQueueGenericSend+0xe6>
     8e2:	c8 01       	movw	r24, r16
     8e4:	6c de       	rcall	.-808    	; 0x5be <prvIsQueueFull>
     8e6:	88 23       	and	r24, r24
     8e8:	61 f0       	breq	.+24     	; 0x902 <xQueueGenericSend+0xde>
     8ea:	6c 81       	ldd	r22, Y+4	; 0x04
     8ec:	7d 81       	ldd	r23, Y+5	; 0x05
     8ee:	c8 01       	movw	r24, r16
     8f0:	08 96       	adiw	r24, 0x08	; 8
     8f2:	fd d7       	rcall	.+4090   	; 0x18ee <vTaskPlaceOnEventList>
     8f4:	c8 01       	movw	r24, r16
     8f6:	ea de       	rcall	.-556    	; 0x6cc <prvUnlockQueue>
     8f8:	47 d6       	rcall	.+3214   	; 0x1588 <xTaskResumeAll>
     8fa:	81 11       	cpse	r24, r1
     8fc:	a6 cf       	rjmp	.-180    	; 0x84a <xQueueGenericSend+0x26>
     8fe:	7b dd       	rcall	.-1290   	; 0x3f6 <vPortYield>
     900:	a4 cf       	rjmp	.-184    	; 0x84a <xQueueGenericSend+0x26>
     902:	c8 01       	movw	r24, r16
     904:	e3 de       	rcall	.-570    	; 0x6cc <prvUnlockQueue>
     906:	40 d6       	rcall	.+3200   	; 0x1588 <xTaskResumeAll>
     908:	a0 cf       	rjmp	.-192    	; 0x84a <xQueueGenericSend+0x26>
     90a:	c8 01       	movw	r24, r16
     90c:	df de       	rcall	.-578    	; 0x6cc <prvUnlockQueue>
     90e:	3c d6       	rcall	.+3192   	; 0x1588 <xTaskResumeAll>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <prvInitialiseMutex>:
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	61 f0       	breq	.+24     	; 0x94a <prvInitialiseMutex+0x1c>
     932:	fc 01       	movw	r30, r24
     934:	15 82       	std	Z+5, r1	; 0x05
     936:	14 82       	std	Z+4, r1	; 0x04
     938:	11 82       	std	Z+1, r1	; 0x01
     93a:	10 82       	st	Z, r1
     93c:	16 82       	std	Z+6, r1	; 0x06
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	6d cf       	rjmp	.-294    	; 0x824 <xQueueGenericSend>
     94a:	08 95       	ret

0000094c <xQueueCreateMutex>:
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	48 2f       	mov	r20, r24
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	43 df       	rcall	.-378    	; 0x7de <xQueueGenericCreate>
     958:	ec 01       	movw	r28, r24
     95a:	e9 df       	rcall	.-46     	; 0x92e <prvInitialiseMutex>
     95c:	ce 01       	movw	r24, r28
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <xQueueGenericSendFromISR>:
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	8a 01       	movw	r16, r20
     972:	fc 01       	movw	r30, r24
     974:	52 8d       	ldd	r21, Z+26	; 0x1a
     976:	33 8d       	ldd	r19, Z+27	; 0x1b
     978:	53 17       	cp	r21, r19
     97a:	10 f0       	brcs	.+4      	; 0x980 <xQueueGenericSendFromISR+0x1c>
     97c:	22 30       	cpi	r18, 0x02	; 2
     97e:	f9 f4       	brne	.+62     	; 0x9be <xQueueGenericSendFromISR+0x5a>
     980:	42 2f       	mov	r20, r18
     982:	78 01       	movw	r14, r16
     984:	ec 01       	movw	r28, r24
     986:	1e 8d       	ldd	r17, Y+30	; 0x1e
     988:	8a 8d       	ldd	r24, Y+26	; 0x1a
     98a:	ce 01       	movw	r24, r28
     98c:	26 de       	rcall	.-948    	; 0x5da <prvCopyDataToQueue>
     98e:	1f 3f       	cpi	r17, 0xFF	; 255
     990:	81 f4       	brne	.+32     	; 0x9b2 <xQueueGenericSendFromISR+0x4e>
     992:	89 89       	ldd	r24, Y+17	; 0x11
     994:	88 23       	and	r24, r24
     996:	a9 f0       	breq	.+42     	; 0x9c2 <xQueueGenericSendFromISR+0x5e>
     998:	ce 01       	movw	r24, r28
     99a:	41 96       	adiw	r24, 0x11	; 17
     99c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <xTaskRemoveFromEventList>
     9a0:	88 23       	and	r24, r24
     9a2:	89 f0       	breq	.+34     	; 0x9c6 <xQueueGenericSendFromISR+0x62>
     9a4:	e1 14       	cp	r14, r1
     9a6:	f1 04       	cpc	r15, r1
     9a8:	81 f0       	breq	.+32     	; 0x9ca <xQueueGenericSendFromISR+0x66>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	f7 01       	movw	r30, r14
     9ae:	80 83       	st	Z, r24
     9b0:	0d c0       	rjmp	.+26     	; 0x9cc <xQueueGenericSendFromISR+0x68>
     9b2:	ff 24       	eor	r15, r15
     9b4:	f3 94       	inc	r15
     9b6:	f1 0e       	add	r15, r17
     9b8:	fe 8e       	std	Y+30, r15	; 0x1e
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <xQueueGenericSendFromISR+0x68>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <xQueueGenericSendFromISR+0x68>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <xQueueGenericSendFromISR+0x68>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <xQueueGenericSendFromISR+0x68>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <xQueueReceive>:
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <xQueueReceive+0x12>
     9ec:	1f 92       	push	r1
     9ee:	1f 92       	push	r1
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	8c 01       	movw	r16, r24
     9f6:	6b 01       	movw	r12, r22
     9f8:	5d 83       	std	Y+5, r21	; 0x05
     9fa:	4c 83       	std	Y+4, r20	; 0x04
     9fc:	e1 2c       	mov	r14, r1
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	0f 92       	push	r0
     a04:	f8 01       	movw	r30, r16
     a06:	f2 8c       	ldd	r15, Z+26	; 0x1a
     a08:	ff 20       	and	r15, r15
     a0a:	91 f0       	breq	.+36     	; 0xa30 <xQueueReceive+0x56>
     a0c:	b6 01       	movw	r22, r12
     a0e:	c8 01       	movw	r24, r16
     a10:	43 de       	rcall	.-890    	; 0x698 <prvCopyDataFromQueue>
     a12:	fa 94       	dec	r15
     a14:	f8 01       	movw	r30, r16
     a16:	f2 8e       	std	Z+26, r15	; 0x1a
     a18:	80 85       	ldd	r24, Z+8	; 0x08
     a1a:	88 23       	and	r24, r24
     a1c:	29 f0       	breq	.+10     	; 0xa28 <xQueueReceive+0x4e>
     a1e:	c8 01       	movw	r24, r16
     a20:	08 96       	adiw	r24, 0x08	; 8
     a22:	be d7       	rcall	.+3964   	; 0x19a0 <xTaskRemoveFromEventList>
     a24:	81 11       	cpse	r24, r1
     a26:	e7 dc       	rcall	.-1586   	; 0x3f6 <vPortYield>
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	48 c0       	rjmp	.+144    	; 0xac0 <xQueueReceive+0xe6>
     a30:	8c 81       	ldd	r24, Y+4	; 0x04
     a32:	9d 81       	ldd	r25, Y+5	; 0x05
     a34:	89 2b       	or	r24, r25
     a36:	21 f4       	brne	.+8      	; 0xa40 <xQueueReceive+0x66>
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	40 c0       	rjmp	.+128    	; 0xac0 <xQueueReceive+0xe6>
     a40:	e1 10       	cpse	r14, r1
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <xQueueReceive+0x76>
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskInternalSetTimeOutState>
     a4c:	ee 24       	eor	r14, r14
     a4e:	e3 94       	inc	r14
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	70 d4       	rcall	.+2272   	; 0x1336 <vTaskSuspendAll>
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	0f 92       	push	r0
     a5c:	f8 01       	movw	r30, r16
     a5e:	85 8d       	ldd	r24, Z+29	; 0x1d
     a60:	8f 3f       	cpi	r24, 0xFF	; 255
     a62:	09 f4       	brne	.+2      	; 0xa66 <xQueueReceive+0x8c>
     a64:	15 8e       	std	Z+29, r1	; 0x1d
     a66:	f8 01       	movw	r30, r16
     a68:	86 8d       	ldd	r24, Z+30	; 0x1e
     a6a:	8f 3f       	cpi	r24, 0xFF	; 255
     a6c:	09 f4       	brne	.+2      	; 0xa70 <xQueueReceive+0x96>
     a6e:	16 8e       	std	Z+30, r1	; 0x1e
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	be 01       	movw	r22, r28
     a76:	6c 5f       	subi	r22, 0xFC	; 252
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <xTaskCheckForTimeOut>
     a82:	81 11       	cpse	r24, r1
     a84:	14 c0       	rjmp	.+40     	; 0xaae <xQueueReceive+0xd4>
     a86:	c8 01       	movw	r24, r16
     a88:	8d dd       	rcall	.-1254   	; 0x5a4 <prvIsQueueEmpty>
     a8a:	88 23       	and	r24, r24
     a8c:	61 f0       	breq	.+24     	; 0xaa6 <xQueueReceive+0xcc>
     a8e:	6c 81       	ldd	r22, Y+4	; 0x04
     a90:	7d 81       	ldd	r23, Y+5	; 0x05
     a92:	c8 01       	movw	r24, r16
     a94:	41 96       	adiw	r24, 0x11	; 17
     a96:	2b d7       	rcall	.+3670   	; 0x18ee <vTaskPlaceOnEventList>
     a98:	c8 01       	movw	r24, r16
     a9a:	18 de       	rcall	.-976    	; 0x6cc <prvUnlockQueue>
     a9c:	75 d5       	rcall	.+2794   	; 0x1588 <xTaskResumeAll>
     a9e:	81 11       	cpse	r24, r1
     aa0:	ae cf       	rjmp	.-164    	; 0x9fe <xQueueReceive+0x24>
     aa2:	a9 dc       	rcall	.-1710   	; 0x3f6 <vPortYield>
     aa4:	ac cf       	rjmp	.-168    	; 0x9fe <xQueueReceive+0x24>
     aa6:	c8 01       	movw	r24, r16
     aa8:	11 de       	rcall	.-990    	; 0x6cc <prvUnlockQueue>
     aaa:	6e d5       	rcall	.+2780   	; 0x1588 <xTaskResumeAll>
     aac:	a8 cf       	rjmp	.-176    	; 0x9fe <xQueueReceive+0x24>
     aae:	c8 01       	movw	r24, r16
     ab0:	0d de       	rcall	.-998    	; 0x6cc <prvUnlockQueue>
     ab2:	6a d5       	rcall	.+2772   	; 0x1588 <xTaskResumeAll>
     ab4:	c8 01       	movw	r24, r16
     ab6:	76 dd       	rcall	.-1300   	; 0x5a4 <prvIsQueueEmpty>
     ab8:	88 23       	and	r24, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <xQueueReceive+0xe4>
     abc:	a0 cf       	rjmp	.-192    	; 0x9fe <xQueueReceive+0x24>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	08 95       	ret

00000adc <xQueueSemaphoreTake>:
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <xQueueSemaphoreTake+0xe>
     aea:	1f 92       	push	r1
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	8c 01       	movw	r16, r24
     af4:	7d 83       	std	Y+5, r23	; 0x05
     af6:	6c 83       	std	Y+4, r22	; 0x04
     af8:	e1 2c       	mov	r14, r1
     afa:	f1 2c       	mov	r15, r1
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	0f 92       	push	r0
     b02:	f8 01       	movw	r30, r16
     b04:	82 8d       	ldd	r24, Z+26	; 0x1a
     b06:	88 23       	and	r24, r24
     b08:	c1 f0       	breq	.+48     	; 0xb3a <xQueueSemaphoreTake+0x5e>
     b0a:	81 50       	subi	r24, 0x01	; 1
     b0c:	82 8f       	std	Z+26, r24	; 0x1a
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	89 2b       	or	r24, r25
     b14:	29 f4       	brne	.+10     	; 0xb20 <xQueueSemaphoreTake+0x44>
     b16:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <pvTaskIncrementMutexHeldCount>
     b1a:	f8 01       	movw	r30, r16
     b1c:	95 83       	std	Z+5, r25	; 0x05
     b1e:	84 83       	std	Z+4, r24	; 0x04
     b20:	f8 01       	movw	r30, r16
     b22:	80 85       	ldd	r24, Z+8	; 0x08
     b24:	88 23       	and	r24, r24
     b26:	29 f0       	breq	.+10     	; 0xb32 <xQueueSemaphoreTake+0x56>
     b28:	c8 01       	movw	r24, r16
     b2a:	08 96       	adiw	r24, 0x08	; 8
     b2c:	39 d7       	rcall	.+3698   	; 0x19a0 <xTaskRemoveFromEventList>
     b2e:	81 11       	cpse	r24, r1
     b30:	62 dc       	rcall	.-1852   	; 0x3f6 <vPortYield>
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	66 c0       	rjmp	.+204    	; 0xc06 <xQueueSemaphoreTake+0x12a>
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	9d 81       	ldd	r25, Y+5	; 0x05
     b3e:	89 2b       	or	r24, r25
     b40:	21 f4       	brne	.+8      	; 0xb4a <xQueueSemaphoreTake+0x6e>
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	5e c0       	rjmp	.+188    	; 0xc06 <xQueueSemaphoreTake+0x12a>
     b4a:	f1 10       	cpse	r15, r1
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <xQueueSemaphoreTake+0x7c>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	e3 d7       	rcall	.+4038   	; 0x1b1a <vTaskInternalSetTimeOutState>
     b54:	ff 24       	eor	r15, r15
     b56:	f3 94       	inc	r15
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	ec d3       	rcall	.+2008   	; 0x1336 <vTaskSuspendAll>
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	f8 01       	movw	r30, r16
     b66:	85 8d       	ldd	r24, Z+29	; 0x1d
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	09 f4       	brne	.+2      	; 0xb6e <xQueueSemaphoreTake+0x92>
     b6c:	15 8e       	std	Z+29, r1	; 0x1d
     b6e:	f8 01       	movw	r30, r16
     b70:	86 8d       	ldd	r24, Z+30	; 0x1e
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	09 f4       	brne	.+2      	; 0xb78 <xQueueSemaphoreTake+0x9c>
     b76:	16 8e       	std	Z+30, r1	; 0x1e
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	be 01       	movw	r22, r28
     b7e:	6c 5f       	subi	r22, 0xFC	; 252
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	d4 d7       	rcall	.+4008   	; 0x1b30 <xTaskCheckForTimeOut>
     b88:	81 11       	cpse	r24, r1
     b8a:	23 c0       	rjmp	.+70     	; 0xbd2 <xQueueSemaphoreTake+0xf6>
     b8c:	c8 01       	movw	r24, r16
     b8e:	0a dd       	rcall	.-1516   	; 0x5a4 <prvIsQueueEmpty>
     b90:	88 23       	and	r24, r24
     b92:	d9 f0       	breq	.+54     	; 0xbca <xQueueSemaphoreTake+0xee>
     b94:	f8 01       	movw	r30, r16
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	89 2b       	or	r24, r25
     b9c:	51 f4       	brne	.+20     	; 0xbb2 <xQueueSemaphoreTake+0xd6>
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	0f 92       	push	r0
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	95 81       	ldd	r25, Z+5	; 0x05
     ba8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <xTaskPriorityInherit>
     bac:	e8 2e       	mov	r14, r24
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	6c 81       	ldd	r22, Y+4	; 0x04
     bb4:	7d 81       	ldd	r23, Y+5	; 0x05
     bb6:	c8 01       	movw	r24, r16
     bb8:	41 96       	adiw	r24, 0x11	; 17
     bba:	99 d6       	rcall	.+3378   	; 0x18ee <vTaskPlaceOnEventList>
     bbc:	c8 01       	movw	r24, r16
     bbe:	86 dd       	rcall	.-1268   	; 0x6cc <prvUnlockQueue>
     bc0:	e3 d4       	rcall	.+2502   	; 0x1588 <xTaskResumeAll>
     bc2:	81 11       	cpse	r24, r1
     bc4:	9b cf       	rjmp	.-202    	; 0xafc <xQueueSemaphoreTake+0x20>
     bc6:	17 dc       	rcall	.-2002   	; 0x3f6 <vPortYield>
     bc8:	99 cf       	rjmp	.-206    	; 0xafc <xQueueSemaphoreTake+0x20>
     bca:	c8 01       	movw	r24, r16
     bcc:	7f dd       	rcall	.-1282   	; 0x6cc <prvUnlockQueue>
     bce:	dc d4       	rcall	.+2488   	; 0x1588 <xTaskResumeAll>
     bd0:	95 cf       	rjmp	.-214    	; 0xafc <xQueueSemaphoreTake+0x20>
     bd2:	c8 01       	movw	r24, r16
     bd4:	7b dd       	rcall	.-1290   	; 0x6cc <prvUnlockQueue>
     bd6:	d8 d4       	rcall	.+2480   	; 0x1588 <xTaskResumeAll>
     bd8:	c8 01       	movw	r24, r16
     bda:	e4 dc       	rcall	.-1592   	; 0x5a4 <prvIsQueueEmpty>
     bdc:	88 23       	and	r24, r24
     bde:	09 f4       	brne	.+2      	; 0xbe2 <xQueueSemaphoreTake+0x106>
     be0:	8d cf       	rjmp	.-230    	; 0xafc <xQueueSemaphoreTake+0x20>
     be2:	ee 20       	and	r14, r14
     be4:	79 f0       	breq	.+30     	; 0xc04 <xQueueSemaphoreTake+0x128>
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	0f 92       	push	r0
     bec:	c8 01       	movw	r24, r16
     bee:	ca dc       	rcall	.-1644   	; 0x584 <prvGetDisinheritPriorityAfterTimeout>
     bf0:	68 2f       	mov	r22, r24
     bf2:	f8 01       	movw	r30, r16
     bf4:	84 81       	ldd	r24, Z+4	; 0x04
     bf6:	95 81       	ldd	r25, Z+5	; 0x05
     bf8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <vTaskPriorityDisinheritAfterTimeout>
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <xQueueSemaphoreTake+0x12a>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	08 95       	ret

00000c1e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	0f 92       	push	r0
     c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c2c:	8f 3f       	cpi	r24, 0xFF	; 255
     c2e:	09 f4       	brne	.+2      	; 0xc32 <vQueueWaitForMessageRestricted+0x14>
     c30:	1d 8e       	std	Y+29, r1	; 0x1d
     c32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	09 f4       	brne	.+2      	; 0xc3a <vQueueWaitForMessageRestricted+0x1c>
     c38:	1e 8e       	std	Y+30, r1	; 0x1e
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c40:	81 11       	cpse	r24, r1
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     c44:	ce 01       	movw	r24, r28
     c46:	41 96       	adiw	r24, 0x11	; 17
     c48:	63 d6       	rcall	.+3270   	; 0x1910 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     c4a:	ce 01       	movw	r24, r28
     c4c:	3f dd       	rcall	.-1410   	; 0x6cc <prvUnlockQueue>
    }
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <prvTaskIsTaskSuspended>:
     c54:	fc 01       	movw	r30, r24
     c56:	22 85       	ldd	r18, Z+10	; 0x0a
     c58:	33 85       	ldd	r19, Z+11	; 0x0b
     c5a:	21 57       	subi	r18, 0x71	; 113
     c5c:	32 40       	sbci	r19, 0x02	; 2
     c5e:	59 f4       	brne	.+22     	; 0xc76 <prvTaskIsTaskSuspended+0x22>
     c60:	fc 01       	movw	r30, r24
     c62:	84 89       	ldd	r24, Z+20	; 0x14
     c64:	95 89       	ldd	r25, Z+21	; 0x15
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	84 38       	cpi	r24, 0x84	; 132
     c6a:	9f 07       	cpc	r25, r31
     c6c:	31 f0       	breq	.+12     	; 0xc7a <prvTaskIsTaskSuspended+0x26>
     c6e:	89 2b       	or	r24, r25
     c70:	31 f0       	breq	.+12     	; 0xc7e <prvTaskIsTaskSuspended+0x2a>
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret

00000c82 <prvResetNextTaskUnblockTime>:
     c82:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxDelayedTaskList>
     c86:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
     c8a:	80 81       	ld	r24, Z
     c8c:	81 11       	cpse	r24, r1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <prvResetNextTaskUnblockTime+0x1c>
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <xNextTaskUnblockTime+0x1>
     c98:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <xNextTaskUnblockTime>
     c9c:	08 95       	ret
     c9e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxDelayedTaskList>
     ca2:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
     ca6:	05 80       	ldd	r0, Z+5	; 0x05
     ca8:	f6 81       	ldd	r31, Z+6	; 0x06
     caa:	e0 2d       	mov	r30, r0
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <xNextTaskUnblockTime+0x1>
     cb4:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <xNextTaskUnblockTime>
     cb8:	08 95       	ret

00000cba <prvDeleteTCB>:
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	8f 89       	ldd	r24, Y+23	; 0x17
     cc2:	98 8d       	ldd	r25, Y+24	; 0x18
     cc4:	a9 da       	rcall	.-2734   	; 0x218 <vPortFree>
     cc6:	ce 01       	movw	r24, r28
     cc8:	a7 da       	rcall	.-2738   	; 0x218 <vPortFree>
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <prvInitialiseNewTask>:
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	2c 01       	movw	r4, r24
     cf0:	5b 01       	movw	r10, r22
     cf2:	4a 01       	movw	r8, r20
     cf4:	39 01       	movw	r6, r18
     cf6:	e6 01       	movw	r28, r12
     cf8:	65 ea       	ldi	r22, 0xA5	; 165
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	8f 89       	ldd	r24, Y+23	; 0x17
     cfe:	98 8d       	ldd	r25, Y+24	; 0x18
     d00:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <memset>
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	21 e0       	ldi	r18, 0x01	; 1
     d0a:	82 1a       	sub	r8, r18
     d0c:	91 08       	sbc	r9, r1
     d0e:	88 0e       	add	r8, r24
     d10:	99 1e       	adc	r9, r25
     d12:	a1 14       	cp	r10, r1
     d14:	b1 04       	cpc	r11, r1
     d16:	89 f4       	brne	.+34     	; 0xd3a <prvInitialiseNewTask+0x6a>
     d18:	15 c0       	rjmp	.+42     	; 0xd44 <prvInitialiseNewTask+0x74>
     d1a:	82 2f       	mov	r24, r18
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	f5 01       	movw	r30, r10
     d20:	e8 0f       	add	r30, r24
     d22:	f9 1f       	adc	r31, r25
     d24:	30 81       	ld	r19, Z
     d26:	de 01       	movw	r26, r28
     d28:	a8 0f       	add	r26, r24
     d2a:	b9 1f       	adc	r27, r25
     d2c:	59 96       	adiw	r26, 0x19	; 25
     d2e:	3c 93       	st	X, r19
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	29 f0       	breq	.+10     	; 0xd40 <prvInitialiseNewTask+0x70>
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <prvInitialiseNewTask+0x6c>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	28 30       	cpi	r18, 0x08	; 8
     d3e:	68 f3       	brcs	.-38     	; 0xd1a <prvInitialiseNewTask+0x4a>
     d40:	18 a2       	std	Y+32, r1	; 0x20
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <prvInitialiseNewTask+0x76>
     d44:	19 8e       	std	Y+25, r1	; 0x19
     d46:	04 30       	cpi	r16, 0x04	; 4
     d48:	08 f0       	brcs	.+2      	; 0xd4c <prvInitialiseNewTask+0x7c>
     d4a:	03 e0       	ldi	r16, 0x03	; 3
     d4c:	0e 8b       	std	Y+22, r16	; 0x16
     d4e:	09 a3       	std	Y+33, r16	; 0x21
     d50:	1a a2       	std	Y+34, r1	; 0x22
     d52:	ce 01       	movw	r24, r28
     d54:	02 96       	adiw	r24, 0x02	; 2
     d56:	7d da       	rcall	.-2822   	; 0x252 <vListInitialiseItem>
     d58:	ce 01       	movw	r24, r28
     d5a:	0c 96       	adiw	r24, 0x0c	; 12
     d5c:	7a da       	rcall	.-2828   	; 0x252 <vListInitialiseItem>
     d5e:	d9 87       	std	Y+9, r29	; 0x09
     d60:	c8 87       	std	Y+8, r28	; 0x08
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	80 1b       	sub	r24, r16
     d68:	91 09       	sbc	r25, r1
     d6a:	9d 87       	std	Y+13, r25	; 0x0d
     d6c:	8c 87       	std	Y+12, r24	; 0x0c
     d6e:	db 8b       	std	Y+19, r29	; 0x13
     d70:	ca 8b       	std	Y+18, r28	; 0x12
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	fe 01       	movw	r30, r28
     d76:	b3 96       	adiw	r30, 0x23	; 35
     d78:	df 01       	movw	r26, r30
     d7a:	1d 92       	st	X+, r1
     d7c:	8a 95       	dec	r24
     d7e:	e9 f7       	brne	.-6      	; 0xd7a <prvInitialiseNewTask+0xaa>
     d80:	1f a2       	std	Y+39, r1	; 0x27
     d82:	a3 01       	movw	r20, r6
     d84:	b2 01       	movw	r22, r4
     d86:	c4 01       	movw	r24, r8
     d88:	ed da       	rcall	.-2598   	; 0x364 <pxPortInitialiseStack>
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	88 83       	st	Y, r24
     d8e:	e1 14       	cp	r14, r1
     d90:	f1 04       	cpc	r15, r1
     d92:	19 f0       	breq	.+6      	; 0xd9a <prvInitialiseNewTask+0xca>
     d94:	f7 01       	movw	r30, r14
     d96:	d1 83       	std	Z+1, r29	; 0x01
     d98:	c0 83       	st	Z, r28
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	af 90       	pop	r10
     dac:	9f 90       	pop	r9
     dae:	8f 90       	pop	r8
     db0:	7f 90       	pop	r7
     db2:	6f 90       	pop	r6
     db4:	5f 90       	pop	r5
     db6:	4f 90       	pop	r4
     db8:	08 95       	ret

00000dba <prvInitialiseTaskLists>:
     dba:	cf 93       	push	r28
     dbc:	c0 e0       	ldi	r28, 0x00	; 0
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <prvInitialiseTaskLists+0x24>
     dc0:	8c 2f       	mov	r24, r28
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	9c 01       	movw	r18, r24
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	8d 55       	subi	r24, 0x5D	; 93
     dd8:	9d 4f       	sbci	r25, 0xFD	; 253
     dda:	2d da       	rcall	.-2982   	; 0x236 <vListInitialise>
     ddc:	cf 5f       	subi	r28, 0xFF	; 255
     dde:	c4 30       	cpi	r28, 0x04	; 4
     de0:	78 f3       	brcs	.-34     	; 0xdc0 <prvInitialiseTaskLists+0x6>
     de2:	8a e9       	ldi	r24, 0x9A	; 154
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	27 da       	rcall	.-2994   	; 0x236 <vListInitialise>
     de8:	81 e9       	ldi	r24, 0x91	; 145
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	24 da       	rcall	.-3000   	; 0x236 <vListInitialise>
     dee:	84 e8       	ldi	r24, 0x84	; 132
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	21 da       	rcall	.-3006   	; 0x236 <vListInitialise>
     df4:	8b e7       	ldi	r24, 0x7B	; 123
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	1e da       	rcall	.-3012   	; 0x236 <vListInitialise>
     dfa:	81 e7       	ldi	r24, 0x71	; 113
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	1b da       	rcall	.-3018   	; 0x236 <vListInitialise>
     e00:	8a e9       	ldi	r24, 0x9A	; 154
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <pxDelayedTaskList+0x1>
     e08:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <pxDelayedTaskList>
     e0c:	81 e9       	ldi	r24, 0x91	; 145
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <pxOverflowDelayedTaskList+0x1>
     e14:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <pxOverflowDelayedTaskList>
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <prvAddNewTaskToReadyList>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	0f 92       	push	r0
     e28:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <uxCurrentNumberOfTasks>
     e32:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     e36:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     e3a:	89 2b       	or	r24, r25
     e3c:	51 f4       	brne	.+20     	; 0xe52 <prvAddNewTaskToReadyList+0x36>
     e3e:	d0 93 c8 02 	sts	0x02C8, r29	; 0x8002c8 <pxCurrentTCB+0x1>
     e42:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <pxCurrentTCB>
     e46:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 f4       	brne	.+36     	; 0xe72 <prvAddNewTaskToReadyList+0x56>
     e4e:	b5 df       	rcall	.-150    	; 0xdba <prvInitialiseTaskLists>
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <prvAddNewTaskToReadyList+0x56>
     e52:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
     e56:	81 11       	cpse	r24, r1
     e58:	0c c0       	rjmp	.+24     	; 0xe72 <prvAddNewTaskToReadyList+0x56>
     e5a:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     e5e:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     e62:	96 89       	ldd	r25, Z+22	; 0x16
     e64:	8e 89       	ldd	r24, Y+22	; 0x16
     e66:	89 17       	cp	r24, r25
     e68:	20 f0       	brcs	.+8      	; 0xe72 <prvAddNewTaskToReadyList+0x56>
     e6a:	d0 93 c8 02 	sts	0x02C8, r29	; 0x8002c8 <pxCurrentTCB+0x1>
     e6e:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <pxCurrentTCB>
     e72:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <uxTaskNumber>
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <uxTaskNumber>
     e7c:	8e 89       	ldd	r24, Y+22	; 0x16
     e7e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
     e82:	98 17       	cp	r25, r24
     e84:	10 f4       	brcc	.+4      	; 0xe8a <prvAddNewTaskToReadyList+0x6e>
     e86:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	8e 0f       	add	r24, r30
     e9c:	9f 1f       	adc	r25, r31
     e9e:	fc 01       	movw	r30, r24
     ea0:	ed 55       	subi	r30, 0x5D	; 93
     ea2:	fd 4f       	sbci	r31, 0xFD	; 253
     ea4:	01 80       	ldd	r0, Z+1	; 0x01
     ea6:	f2 81       	ldd	r31, Z+2	; 0x02
     ea8:	e0 2d       	mov	r30, r0
     eaa:	fd 83       	std	Y+5, r31	; 0x05
     eac:	ec 83       	std	Y+4, r30	; 0x04
     eae:	84 81       	ldd	r24, Z+4	; 0x04
     eb0:	95 81       	ldd	r25, Z+5	; 0x05
     eb2:	9f 83       	std	Y+7, r25	; 0x07
     eb4:	8e 83       	std	Y+6, r24	; 0x06
     eb6:	a4 81       	ldd	r26, Z+4	; 0x04
     eb8:	b5 81       	ldd	r27, Z+5	; 0x05
     eba:	ce 01       	movw	r24, r28
     ebc:	02 96       	adiw	r24, 0x02	; 2
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	95 83       	std	Z+5, r25	; 0x05
     ec8:	84 83       	std	Z+4, r24	; 0x04
     eca:	ee 89       	ldd	r30, Y+22	; 0x16
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	cf 01       	movw	r24, r30
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	ed 55       	subi	r30, 0x5D	; 93
     ee2:	fd 4f       	sbci	r31, 0xFD	; 253
     ee4:	fb 87       	std	Y+11, r31	; 0x0b
     ee6:	ea 87       	std	Y+10, r30	; 0x0a
     ee8:	80 81       	ld	r24, Z
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
     ef6:	88 23       	and	r24, r24
     ef8:	49 f0       	breq	.+18     	; 0xf0c <prvAddNewTaskToReadyList+0xf0>
     efa:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     efe:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     f02:	96 89       	ldd	r25, Z+22	; 0x16
     f04:	8e 89       	ldd	r24, Y+22	; 0x16
     f06:	98 17       	cp	r25, r24
     f08:	08 f4       	brcc	.+2      	; 0xf0c <prvAddNewTaskToReadyList+0xf0>
     f0a:	75 da       	rcall	.-2838   	; 0x3f6 <vPortYield>
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <prvCheckTasksWaitingTermination>:
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	1a c0       	rjmp	.+52     	; 0xf4c <prvCheckTasksWaitingTermination+0x3a>
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <xTasksWaitingTermination+0x5>
     f22:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <xTasksWaitingTermination+0x6>
     f26:	c6 81       	ldd	r28, Z+6	; 0x06
     f28:	d7 81       	ldd	r29, Z+7	; 0x07
     f2a:	ce 01       	movw	r24, r28
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	e7 d9       	rcall	.-3122   	; 0x2fe <uxListRemove>
     f30:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <uxCurrentNumberOfTasks>
     f3a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxDeletedTasksWaitingCleanUp>
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <uxDeletedTasksWaitingCleanUp>
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	ce 01       	movw	r24, r28
     f4a:	b7 de       	rcall	.-658    	; 0xcba <prvDeleteTCB>
     f4c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxDeletedTasksWaitingCleanUp>
     f50:	81 11       	cpse	r24, r1
     f52:	e2 cf       	rjmp	.-60     	; 0xf18 <prvCheckTasksWaitingTermination+0x6>
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <prvAddCurrentTaskToDelayedList>:
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	f6 2e       	mov	r15, r22
     f68:	00 91 6e 02 	lds	r16, 0x026E	; 0x80026e <xTickCount>
     f6c:	10 91 6f 02 	lds	r17, 0x026F	; 0x80026f <xTickCount+0x1>
     f70:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     f74:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     f78:	02 96       	adiw	r24, 0x02	; 2
     f7a:	c1 d9       	rcall	.-3198   	; 0x2fe <uxListRemove>
     f7c:	cf 3f       	cpi	r28, 0xFF	; 255
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	d8 07       	cpc	r29, r24
     f82:	b1 f5       	brne	.+108    	; 0xff0 <prvAddCurrentTaskToDelayedList+0x96>
     f84:	ff 20       	and	r15, r15
     f86:	a1 f1       	breq	.+104    	; 0xff0 <prvAddCurrentTaskToDelayedList+0x96>
     f88:	e1 e7       	ldi	r30, 0x71	; 113
     f8a:	f2 e0       	ldi	r31, 0x02	; 2
     f8c:	a1 81       	ldd	r26, Z+1	; 0x01
     f8e:	b2 81       	ldd	r27, Z+2	; 0x02
     f90:	c0 91 c7 02 	lds	r28, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     f94:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     f98:	bd 83       	std	Y+5, r27	; 0x05
     f9a:	ac 83       	std	Y+4, r26	; 0x04
     f9c:	c0 91 c7 02 	lds	r28, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     fa0:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     fa4:	14 96       	adiw	r26, 0x04	; 4
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	15 97       	sbiw	r26, 0x05	; 5
     fac:	9f 83       	std	Y+7, r25	; 0x07
     fae:	8e 83       	std	Y+6, r24	; 0x06
     fb0:	14 96       	adiw	r26, 0x04	; 4
     fb2:	cd 91       	ld	r28, X+
     fb4:	dc 91       	ld	r29, X
     fb6:	15 97       	sbiw	r26, 0x05	; 5
     fb8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     fbc:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     fc0:	02 96       	adiw	r24, 0x02	; 2
     fc2:	9b 83       	std	Y+3, r25	; 0x03
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     fca:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     fce:	02 96       	adiw	r24, 0x02	; 2
     fd0:	15 96       	adiw	r26, 0x05	; 5
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
     fd6:	14 97       	sbiw	r26, 0x04	; 4
     fd8:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     fdc:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     fe0:	1b 96       	adiw	r26, 0x0b	; 11
     fe2:	fc 93       	st	X, r31
     fe4:	ee 93       	st	-X, r30
     fe6:	1a 97       	sbiw	r26, 0x0a	; 10
     fe8:	80 81       	ld	r24, Z
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
     fee:	2d c0       	rjmp	.+90     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
     ff0:	c0 0f       	add	r28, r16
     ff2:	d1 1f       	adc	r29, r17
     ff4:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
     ff8:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
     ffc:	d3 83       	std	Z+3, r29	; 0x03
     ffe:	c2 83       	std	Z+2, r28	; 0x02
    1000:	c0 17       	cp	r28, r16
    1002:	d1 07       	cpc	r29, r17
    1004:	60 f4       	brcc	.+24     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1006:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    100a:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    100e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <pxOverflowDelayedTaskList>
    1012:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <pxOverflowDelayedTaskList+0x1>
    1016:	6e 5f       	subi	r22, 0xFE	; 254
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	40 d9       	rcall	.-3456   	; 0x29c <vListInsert>
    101c:	16 c0       	rjmp	.+44     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    101e:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1022:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1026:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <pxDelayedTaskList>
    102a:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
    102e:	6e 5f       	subi	r22, 0xFE	; 254
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	34 d9       	rcall	.-3480   	; 0x29c <vListInsert>
    1034:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <xNextTaskUnblockTime>
    1038:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <xNextTaskUnblockTime+0x1>
    103c:	c8 17       	cp	r28, r24
    103e:	d9 07       	cpc	r29, r25
    1040:	20 f4       	brcc	.+8      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1042:	d0 93 66 02 	sts	0x0266, r29	; 0x800266 <xNextTaskUnblockTime+0x1>
    1046:	c0 93 65 02 	sts	0x0265, r28	; 0x800265 <xNextTaskUnblockTime>
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	08 95       	ret

00001056 <xTaskCreate>:
    1056:	2f 92       	push	r2
    1058:	3f 92       	push	r3
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	3c 01       	movw	r6, r24
    107a:	1b 01       	movw	r2, r22
    107c:	4a 01       	movw	r8, r20
    107e:	29 01       	movw	r4, r18
    1080:	ca 01       	movw	r24, r20
    1082:	b7 d8       	rcall	.-3730   	; 0x1f2 <pvPortMalloc>
    1084:	6c 01       	movw	r12, r24
    1086:	89 2b       	or	r24, r25
    1088:	61 f0       	breq	.+24     	; 0x10a2 <xTaskCreate+0x4c>
    108a:	88 e2       	ldi	r24, 0x28	; 40
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	b1 d8       	rcall	.-3742   	; 0x1f2 <pvPortMalloc>
    1090:	ec 01       	movw	r28, r24
    1092:	89 2b       	or	r24, r25
    1094:	19 f0       	breq	.+6      	; 0x109c <xTaskCreate+0x46>
    1096:	d8 8e       	std	Y+24, r13	; 0x18
    1098:	cf 8a       	std	Y+23, r12	; 0x17
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <xTaskCreate+0x50>
    109c:	c6 01       	movw	r24, r12
    109e:	bc d8       	rcall	.-3720   	; 0x218 <vPortFree>
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <xTaskCreate+0x50>
    10a2:	c0 e0       	ldi	r28, 0x00	; 0
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    10a6:	20 97       	sbiw	r28, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <xTaskCreate+0x6c>
    10aa:	a1 2c       	mov	r10, r1
    10ac:	b1 2c       	mov	r11, r1
    10ae:	6e 01       	movw	r12, r28
    10b0:	92 01       	movw	r18, r4
    10b2:	a4 01       	movw	r20, r8
    10b4:	b1 01       	movw	r22, r2
    10b6:	c3 01       	movw	r24, r6
    10b8:	0b de       	rcall	.-1002   	; 0xcd0 <prvInitialiseNewTask>
    10ba:	ce 01       	movw	r24, r28
    10bc:	af de       	rcall	.-674    	; 0xe1c <prvAddNewTaskToReadyList>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <xTaskCreate+0x6e>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	3f 90       	pop	r3
    10e4:	2f 90       	pop	r2
    10e6:	08 95       	ret

000010e8 <vTaskDelete>:
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
    10f8:	89 2b       	or	r24, r25
    10fa:	21 f4       	brne	.+8      	; 0x1104 <vTaskDelete+0x1c>
    10fc:	c0 91 c7 02 	lds	r28, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1100:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1104:	8e 01       	movw	r16, r28
    1106:	0e 5f       	subi	r16, 0xFE	; 254
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	c8 01       	movw	r24, r16
    110c:	f8 d8       	rcall	.-3600   	; 0x2fe <uxListRemove>
    110e:	8c 89       	ldd	r24, Y+20	; 0x14
    1110:	9d 89       	ldd	r25, Y+21	; 0x15
    1112:	89 2b       	or	r24, r25
    1114:	19 f0       	breq	.+6      	; 0x111c <vTaskDelete+0x34>
    1116:	ce 01       	movw	r24, r28
    1118:	0c 96       	adiw	r24, 0x0c	; 12
    111a:	f1 d8       	rcall	.-3614   	; 0x2fe <uxListRemove>
    111c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <uxTaskNumber>
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <uxTaskNumber>
    1126:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    112a:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    112e:	c8 17       	cp	r28, r24
    1130:	d9 07       	cpc	r29, r25
    1132:	51 f4       	brne	.+20     	; 0x1148 <vTaskDelete+0x60>
    1134:	b8 01       	movw	r22, r16
    1136:	8b e7       	ldi	r24, 0x7B	; 123
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	8f d8       	rcall	.-3810   	; 0x25a <vListInsertEnd>
    113c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <uxDeletedTasksWaitingCleanUp>
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <uxDeletedTasksWaitingCleanUp>
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <vTaskDelete+0x70>
    1148:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
    114c:	81 50       	subi	r24, 0x01	; 1
    114e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <uxCurrentNumberOfTasks>
    1152:	ce 01       	movw	r24, r28
    1154:	b2 dd       	rcall	.-1180   	; 0xcba <prvDeleteTCB>
    1156:	95 dd       	rcall	.-1238   	; 0xc82 <prvResetNextTaskUnblockTime>
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
    1160:	88 23       	and	r24, r24
    1162:	41 f0       	breq	.+16     	; 0x1174 <vTaskDelete+0x8c>
    1164:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1168:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    116c:	c8 17       	cp	r28, r24
    116e:	d9 07       	cpc	r29, r25
    1170:	09 f4       	brne	.+2      	; 0x1174 <vTaskDelete+0x8c>
    1172:	41 d9       	rcall	.-3454   	; 0x3f6 <vPortYield>
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <eTaskGetState>:
    117e:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1182:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	09 f4       	brne	.+2      	; 0x118e <eTaskGetState+0x10>
    118c:	38 c0       	rjmp	.+112    	; 0x11fe <eTaskGetState+0x80>
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	0f 92       	push	r0
    1194:	fc 01       	movw	r30, r24
    1196:	22 85       	ldd	r18, Z+10	; 0x0a
    1198:	33 85       	ldd	r19, Z+11	; 0x0b
    119a:	40 91 8f 02 	lds	r20, 0x028F	; 0x80028f <pxDelayedTaskList>
    119e:	50 91 90 02 	lds	r21, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
    11a2:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <pxOverflowDelayedTaskList>
    11a6:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <pxOverflowDelayedTaskList+0x1>
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	24 17       	cp	r18, r20
    11b0:	35 07       	cpc	r19, r21
    11b2:	39 f1       	breq	.+78     	; 0x1202 <eTaskGetState+0x84>
    11b4:	26 17       	cp	r18, r22
    11b6:	37 07       	cpc	r19, r23
    11b8:	31 f1       	breq	.+76     	; 0x1206 <eTaskGetState+0x88>
    11ba:	f2 e0       	ldi	r31, 0x02	; 2
    11bc:	21 37       	cpi	r18, 0x71	; 113
    11be:	3f 07       	cpc	r19, r31
    11c0:	b1 f4       	brne	.+44     	; 0x11ee <eTaskGetState+0x70>
    11c2:	fc 01       	movw	r30, r24
    11c4:	24 89       	ldd	r18, Z+20	; 0x14
    11c6:	35 89       	ldd	r19, Z+21	; 0x15
    11c8:	23 2b       	or	r18, r19
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <eTaskGetState+0x66>
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	08 95       	ret
    11d0:	fc 01       	movw	r30, r24
    11d2:	e2 0f       	add	r30, r18
    11d4:	f1 1d       	adc	r31, r1
    11d6:	27 fd       	sbrc	r18, 7
    11d8:	fa 95       	dec	r31
    11da:	37 a1       	ldd	r19, Z+39	; 0x27
    11dc:	31 30       	cpi	r19, 0x01	; 1
    11de:	a9 f0       	breq	.+42     	; 0x120a <eTaskGetState+0x8c>
    11e0:	2f 5f       	subi	r18, 0xFF	; 255
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <eTaskGetState+0x68>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	12 16       	cp	r1, r18
    11e8:	9c f7       	brge	.-26     	; 0x11d0 <eTaskGetState+0x52>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	08 95       	ret
    11ee:	f2 e0       	ldi	r31, 0x02	; 2
    11f0:	2b 37       	cpi	r18, 0x7B	; 123
    11f2:	3f 07       	cpc	r19, r31
    11f4:	61 f0       	breq	.+24     	; 0x120e <eTaskGetState+0x90>
    11f6:	23 2b       	or	r18, r19
    11f8:	61 f4       	brne	.+24     	; 0x1212 <eTaskGetState+0x94>
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	08 95       	ret
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	08 95       	ret
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	08 95       	ret
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	08 95       	ret
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	08 95       	ret
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret

00001216 <vTaskResume>:
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1222:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1226:	82 17       	cp	r24, r18
    1228:	93 07       	cpc	r25, r19
    122a:	09 f4       	brne	.+2      	; 0x122e <vTaskResume+0x18>
    122c:	52 c0       	rjmp	.+164    	; 0x12d2 <vTaskResume+0xbc>
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	09 f4       	brne	.+2      	; 0x1234 <vTaskResume+0x1e>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <vTaskResume+0xbc>
    1234:	ec 01       	movw	r28, r24
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	0f 92       	push	r0
    123c:	0b dd       	rcall	.-1514   	; 0xc54 <prvTaskIsTaskSuspended>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <vTaskResume+0x2e>
    1242:	45 c0       	rjmp	.+138    	; 0x12ce <vTaskResume+0xb8>
    1244:	8e 01       	movw	r16, r28
    1246:	0e 5f       	subi	r16, 0xFE	; 254
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	c8 01       	movw	r24, r16
    124c:	58 d8       	rcall	.-3920   	; 0x2fe <uxListRemove>
    124e:	8e 89       	ldd	r24, Y+22	; 0x16
    1250:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    1254:	98 17       	cp	r25, r24
    1256:	10 f4       	brcc	.+4      	; 0x125c <vTaskResume+0x46>
    1258:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	fc 01       	movw	r30, r24
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	8e 0f       	add	r24, r30
    126e:	9f 1f       	adc	r25, r31
    1270:	fc 01       	movw	r30, r24
    1272:	ed 55       	subi	r30, 0x5D	; 93
    1274:	fd 4f       	sbci	r31, 0xFD	; 253
    1276:	01 80       	ldd	r0, Z+1	; 0x01
    1278:	f2 81       	ldd	r31, Z+2	; 0x02
    127a:	e0 2d       	mov	r30, r0
    127c:	fd 83       	std	Y+5, r31	; 0x05
    127e:	ec 83       	std	Y+4, r30	; 0x04
    1280:	84 81       	ldd	r24, Z+4	; 0x04
    1282:	95 81       	ldd	r25, Z+5	; 0x05
    1284:	9f 83       	std	Y+7, r25	; 0x07
    1286:	8e 83       	std	Y+6, r24	; 0x06
    1288:	a4 81       	ldd	r26, Z+4	; 0x04
    128a:	b5 81       	ldd	r27, Z+5	; 0x05
    128c:	13 96       	adiw	r26, 0x03	; 3
    128e:	1c 93       	st	X, r17
    1290:	0e 93       	st	-X, r16
    1292:	12 97       	sbiw	r26, 0x02	; 2
    1294:	15 83       	std	Z+5, r17	; 0x05
    1296:	04 83       	std	Z+4, r16	; 0x04
    1298:	ee 89       	ldd	r30, Y+22	; 0x16
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	cf 01       	movw	r24, r30
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	ed 55       	subi	r30, 0x5D	; 93
    12b0:	fd 4f       	sbci	r31, 0xFD	; 253
    12b2:	fb 87       	std	Y+11, r31	; 0x0b
    12b4:	ea 87       	std	Y+10, r30	; 0x0a
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	80 83       	st	Z, r24
    12bc:	9e 89       	ldd	r25, Y+22	; 0x16
    12be:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    12c2:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    12c6:	86 89       	ldd	r24, Z+22	; 0x16
    12c8:	98 17       	cp	r25, r24
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <vTaskResume+0xb8>
    12cc:	94 d8       	rcall	.-3800   	; 0x3f6 <vPortYield>
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <vTaskStartScheduler>:
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	0f 2e       	mov	r0, r31
    12e4:	f3 e6       	ldi	r31, 0x63	; 99
    12e6:	ef 2e       	mov	r14, r31
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	ff 2e       	mov	r15, r31
    12ec:	f0 2d       	mov	r31, r0
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 ec       	ldi	r20, 0xC0	; 192
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	67 e0       	ldi	r22, 0x07	; 7
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	8c e7       	ldi	r24, 0x7C	; 124
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	aa de       	rcall	.-684    	; 0x1056 <xTaskCreate>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	09 f4       	brne	.+2      	; 0x1308 <vTaskStartScheduler+0x2c>
    1306:	4d d6       	rcall	.+3226   	; 0x1fa2 <xTimerCreateTimerTask>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	79 f4       	brne	.+30     	; 0x132a <vTaskStartScheduler+0x4e>
    130c:	f8 94       	cli
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <xNextTaskUnblockTime+0x1>
    1316:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <xNextTaskUnblockTime>
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <xSchedulerRunning>
    1320:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <xTickCount+0x1>
    1324:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <xTickCount>
    1328:	34 d8       	rcall	.-3992   	; 0x392 <xPortStartScheduler>
    132a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	08 95       	ret

00001336 <vTaskSuspendAll>:
    1336:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
    1340:	08 95       	ret

00001342 <xTaskGetTickCount>:
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	0f 92       	push	r0
    1348:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <xTickCount>
    134c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <xTickCount+0x1>
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	08 95       	ret

00001356 <xTaskIncrementTick>:
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    1362:	81 11       	cpse	r24, r1
    1364:	00 c1       	rjmp	.+512    	; 0x1566 <xTaskIncrementTick+0x210>
    1366:	c0 91 6e 02 	lds	r28, 0x026E	; 0x80026e <xTickCount>
    136a:	d0 91 6f 02 	lds	r29, 0x026F	; 0x80026f <xTickCount+0x1>
    136e:	8e 01       	movw	r16, r28
    1370:	0f 5f       	subi	r16, 0xFF	; 255
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	10 93 6f 02 	sts	0x026F, r17	; 0x80026f <xTickCount+0x1>
    1378:	00 93 6e 02 	sts	0x026E, r16	; 0x80026e <xTickCount>
    137c:	01 15       	cp	r16, r1
    137e:	11 05       	cpc	r17, r1
    1380:	b1 f4       	brne	.+44     	; 0x13ae <xTaskIncrementTick+0x58>
    1382:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <pxDelayedTaskList>
    1386:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
    138a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <pxOverflowDelayedTaskList>
    138e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <pxOverflowDelayedTaskList+0x1>
    1392:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <pxDelayedTaskList+0x1>
    1396:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <pxDelayedTaskList>
    139a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <pxOverflowDelayedTaskList+0x1>
    139e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <pxOverflowDelayedTaskList>
    13a2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <xNumOfOverflows>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <xNumOfOverflows>
    13ac:	6a dc       	rcall	.-1836   	; 0xc82 <prvResetNextTaskUnblockTime>
    13ae:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <xNextTaskUnblockTime>
    13b2:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <xNextTaskUnblockTime+0x1>
    13b6:	08 17       	cp	r16, r24
    13b8:	19 07       	cpc	r17, r25
    13ba:	20 f4       	brcc	.+8      	; 0x13c4 <xTaskIncrementTick+0x6e>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	b8 c0       	rjmp	.+368    	; 0x1530 <xTaskIncrementTick+0x1da>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <xTaskIncrementTick+0x70>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxDelayedTaskList>
    13ca:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
    13ce:	90 81       	ld	r25, Z
    13d0:	91 11       	cpse	r25, r1
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <xTaskIncrementTick+0x8c>
    13d4:	2f ef       	ldi	r18, 0xFF	; 255
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	30 93 66 02 	sts	0x0266, r19	; 0x800266 <xNextTaskUnblockTime+0x1>
    13dc:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <xNextTaskUnblockTime>
    13e0:	a7 c0       	rjmp	.+334    	; 0x1530 <xTaskIncrementTick+0x1da>
    13e2:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <pxDelayedTaskList>
    13e6:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <pxDelayedTaskList+0x1>
    13ea:	05 80       	ldd	r0, Z+5	; 0x05
    13ec:	f6 81       	ldd	r31, Z+6	; 0x06
    13ee:	e0 2d       	mov	r30, r0
    13f0:	06 80       	ldd	r0, Z+6	; 0x06
    13f2:	f7 81       	ldd	r31, Z+7	; 0x07
    13f4:	e0 2d       	mov	r30, r0
    13f6:	22 81       	ldd	r18, Z+2	; 0x02
    13f8:	33 81       	ldd	r19, Z+3	; 0x03
    13fa:	02 17       	cp	r16, r18
    13fc:	13 07       	cpc	r17, r19
    13fe:	28 f4       	brcc	.+10     	; 0x140a <xTaskIncrementTick+0xb4>
    1400:	30 93 66 02 	sts	0x0266, r19	; 0x800266 <xNextTaskUnblockTime+0x1>
    1404:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <xNextTaskUnblockTime>
    1408:	93 c0       	rjmp	.+294    	; 0x1530 <xTaskIncrementTick+0x1da>
    140a:	a2 85       	ldd	r26, Z+10	; 0x0a
    140c:	b3 85       	ldd	r27, Z+11	; 0x0b
    140e:	24 81       	ldd	r18, Z+4	; 0x04
    1410:	35 81       	ldd	r19, Z+5	; 0x05
    1412:	46 81       	ldd	r20, Z+6	; 0x06
    1414:	57 81       	ldd	r21, Z+7	; 0x07
    1416:	e9 01       	movw	r28, r18
    1418:	5d 83       	std	Y+5, r21	; 0x05
    141a:	4c 83       	std	Y+4, r20	; 0x04
    141c:	26 81       	ldd	r18, Z+6	; 0x06
    141e:	37 81       	ldd	r19, Z+7	; 0x07
    1420:	44 81       	ldd	r20, Z+4	; 0x04
    1422:	55 81       	ldd	r21, Z+5	; 0x05
    1424:	e9 01       	movw	r28, r18
    1426:	5b 83       	std	Y+3, r21	; 0x03
    1428:	4a 83       	std	Y+2, r20	; 0x02
    142a:	11 96       	adiw	r26, 0x01	; 1
    142c:	2d 91       	ld	r18, X+
    142e:	3c 91       	ld	r19, X
    1430:	12 97       	sbiw	r26, 0x02	; 2
    1432:	af 01       	movw	r20, r30
    1434:	4e 5f       	subi	r20, 0xFE	; 254
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	24 17       	cp	r18, r20
    143a:	35 07       	cpc	r19, r21
    143c:	31 f4       	brne	.+12     	; 0x144a <xTaskIncrementTick+0xf4>
    143e:	26 81       	ldd	r18, Z+6	; 0x06
    1440:	37 81       	ldd	r19, Z+7	; 0x07
    1442:	12 96       	adiw	r26, 0x02	; 2
    1444:	3c 93       	st	X, r19
    1446:	2e 93       	st	-X, r18
    1448:	11 97       	sbiw	r26, 0x01	; 1
    144a:	13 86       	std	Z+11, r1	; 0x0b
    144c:	12 86       	std	Z+10, r1	; 0x0a
    144e:	9c 91       	ld	r25, X
    1450:	91 50       	subi	r25, 0x01	; 1
    1452:	9c 93       	st	X, r25
    1454:	a4 89       	ldd	r26, Z+20	; 0x14
    1456:	b5 89       	ldd	r27, Z+21	; 0x15
    1458:	10 97       	sbiw	r26, 0x00	; 0
    145a:	19 f1       	breq	.+70     	; 0x14a2 <xTaskIncrementTick+0x14c>
    145c:	26 85       	ldd	r18, Z+14	; 0x0e
    145e:	37 85       	ldd	r19, Z+15	; 0x0f
    1460:	60 89       	ldd	r22, Z+16	; 0x10
    1462:	71 89       	ldd	r23, Z+17	; 0x11
    1464:	e9 01       	movw	r28, r18
    1466:	7d 83       	std	Y+5, r23	; 0x05
    1468:	6c 83       	std	Y+4, r22	; 0x04
    146a:	20 89       	ldd	r18, Z+16	; 0x10
    146c:	31 89       	ldd	r19, Z+17	; 0x11
    146e:	66 85       	ldd	r22, Z+14	; 0x0e
    1470:	77 85       	ldd	r23, Z+15	; 0x0f
    1472:	e9 01       	movw	r28, r18
    1474:	7b 83       	std	Y+3, r23	; 0x03
    1476:	6a 83       	std	Y+2, r22	; 0x02
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	6d 91       	ld	r22, X+
    147c:	7c 91       	ld	r23, X
    147e:	12 97       	sbiw	r26, 0x02	; 2
    1480:	9f 01       	movw	r18, r30
    1482:	24 5f       	subi	r18, 0xF4	; 244
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	62 17       	cp	r22, r18
    1488:	73 07       	cpc	r23, r19
    148a:	31 f4       	brne	.+12     	; 0x1498 <xTaskIncrementTick+0x142>
    148c:	20 89       	ldd	r18, Z+16	; 0x10
    148e:	31 89       	ldd	r19, Z+17	; 0x11
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	3c 93       	st	X, r19
    1494:	2e 93       	st	-X, r18
    1496:	11 97       	sbiw	r26, 0x01	; 1
    1498:	15 8a       	std	Z+21, r1	; 0x15
    149a:	14 8a       	std	Z+20, r1	; 0x14
    149c:	9c 91       	ld	r25, X
    149e:	91 50       	subi	r25, 0x01	; 1
    14a0:	9c 93       	st	X, r25
    14a2:	26 89       	ldd	r18, Z+22	; 0x16
    14a4:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    14a8:	92 17       	cp	r25, r18
    14aa:	10 f4       	brcc	.+4      	; 0x14b0 <xTaskIncrementTick+0x15a>
    14ac:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <uxTopReadyPriority>
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	d9 01       	movw	r26, r18
    14b4:	aa 0f       	add	r26, r26
    14b6:	bb 1f       	adc	r27, r27
    14b8:	aa 0f       	add	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	aa 0f       	add	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	2a 0f       	add	r18, r26
    14c2:	3b 1f       	adc	r19, r27
    14c4:	d9 01       	movw	r26, r18
    14c6:	ad 55       	subi	r26, 0x5D	; 93
    14c8:	bd 4f       	sbci	r27, 0xFD	; 253
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	0d 90       	ld	r0, X+
    14ce:	bc 91       	ld	r27, X
    14d0:	a0 2d       	mov	r26, r0
    14d2:	b5 83       	std	Z+5, r27	; 0x05
    14d4:	a4 83       	std	Z+4, r26	; 0x04
    14d6:	14 96       	adiw	r26, 0x04	; 4
    14d8:	2d 91       	ld	r18, X+
    14da:	3c 91       	ld	r19, X
    14dc:	15 97       	sbiw	r26, 0x05	; 5
    14de:	37 83       	std	Z+7, r19	; 0x07
    14e0:	26 83       	std	Z+6, r18	; 0x06
    14e2:	14 96       	adiw	r26, 0x04	; 4
    14e4:	2d 91       	ld	r18, X+
    14e6:	3c 91       	ld	r19, X
    14e8:	15 97       	sbiw	r26, 0x05	; 5
    14ea:	e9 01       	movw	r28, r18
    14ec:	5b 83       	std	Y+3, r21	; 0x03
    14ee:	4a 83       	std	Y+2, r20	; 0x02
    14f0:	15 96       	adiw	r26, 0x05	; 5
    14f2:	5c 93       	st	X, r21
    14f4:	4e 93       	st	-X, r20
    14f6:	14 97       	sbiw	r26, 0x04	; 4
    14f8:	a6 89       	ldd	r26, Z+22	; 0x16
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	9d 01       	movw	r18, r26
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	a2 0f       	add	r26, r18
    150c:	b3 1f       	adc	r27, r19
    150e:	ad 55       	subi	r26, 0x5D	; 93
    1510:	bd 4f       	sbci	r27, 0xFD	; 253
    1512:	b3 87       	std	Z+11, r27	; 0x0b
    1514:	a2 87       	std	Z+10, r26	; 0x0a
    1516:	9c 91       	ld	r25, X
    1518:	9f 5f       	subi	r25, 0xFF	; 255
    151a:	9c 93       	st	X, r25
    151c:	26 89       	ldd	r18, Z+22	; 0x16
    151e:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1522:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1526:	96 89       	ldd	r25, Z+22	; 0x16
    1528:	29 17       	cp	r18, r25
    152a:	08 f0       	brcs	.+2      	; 0x152e <xTaskIncrementTick+0x1d8>
    152c:	49 cf       	rjmp	.-366    	; 0x13c0 <xTaskIncrementTick+0x6a>
    152e:	4b cf       	rjmp	.-362    	; 0x13c6 <xTaskIncrementTick+0x70>
    1530:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1534:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1538:	26 89       	ldd	r18, Z+22	; 0x16
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	f9 01       	movw	r30, r18
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	2e 0f       	add	r18, r30
    154c:	3f 1f       	adc	r19, r31
    154e:	f9 01       	movw	r30, r18
    1550:	ed 55       	subi	r30, 0x5D	; 93
    1552:	fd 4f       	sbci	r31, 0xFD	; 253
    1554:	90 81       	ld	r25, Z
    1556:	92 30       	cpi	r25, 0x02	; 2
    1558:	08 f0       	brcs	.+2      	; 0x155c <xTaskIncrementTick+0x206>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <xYieldPending>
    1560:	91 11       	cpse	r25, r1
    1562:	0c c0       	rjmp	.+24     	; 0x157c <xTaskIncrementTick+0x226>
    1564:	0c c0       	rjmp	.+24     	; 0x157e <xTaskIncrementTick+0x228>
    1566:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <xPendedTicks>
    156a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <xPendedTicks+0x1>
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <xPendedTicks+0x1>
    1574:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <xPendedTicks>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	01 c0       	rjmp	.+2      	; 0x157e <xTaskIncrementTick+0x228>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <xTaskResumeAll>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
    1592:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
    159c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    15a0:	81 11       	cpse	r24, r1
    15a2:	bd c0       	rjmp	.+378    	; 0x171e <xTaskResumeAll+0x196>
    15a4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
    15a8:	81 11       	cpse	r24, r1
    15aa:	96 c0       	rjmp	.+300    	; 0x16d8 <xTaskResumeAll+0x150>
    15ac:	bb c0       	rjmp	.+374    	; 0x1724 <xTaskResumeAll+0x19c>
    15ae:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <xPendingReadyList+0x5>
    15b2:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <xPendingReadyList+0x6>
    15b6:	06 80       	ldd	r0, Z+6	; 0x06
    15b8:	f7 81       	ldd	r31, Z+7	; 0x07
    15ba:	e0 2d       	mov	r30, r0
    15bc:	a4 89       	ldd	r26, Z+20	; 0x14
    15be:	b5 89       	ldd	r27, Z+21	; 0x15
    15c0:	c6 85       	ldd	r28, Z+14	; 0x0e
    15c2:	d7 85       	ldd	r29, Z+15	; 0x0f
    15c4:	80 89       	ldd	r24, Z+16	; 0x10
    15c6:	91 89       	ldd	r25, Z+17	; 0x11
    15c8:	9d 83       	std	Y+5, r25	; 0x05
    15ca:	8c 83       	std	Y+4, r24	; 0x04
    15cc:	c0 89       	ldd	r28, Z+16	; 0x10
    15ce:	d1 89       	ldd	r29, Z+17	; 0x11
    15d0:	86 85       	ldd	r24, Z+14	; 0x0e
    15d2:	97 85       	ldd	r25, Z+15	; 0x0f
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	2d 91       	ld	r18, X+
    15dc:	3c 91       	ld	r19, X
    15de:	12 97       	sbiw	r26, 0x02	; 2
    15e0:	cf 01       	movw	r24, r30
    15e2:	0c 96       	adiw	r24, 0x0c	; 12
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	31 f4       	brne	.+12     	; 0x15f6 <xTaskResumeAll+0x6e>
    15ea:	80 89       	ldd	r24, Z+16	; 0x10
    15ec:	91 89       	ldd	r25, Z+17	; 0x11
    15ee:	12 96       	adiw	r26, 0x02	; 2
    15f0:	9c 93       	st	X, r25
    15f2:	8e 93       	st	-X, r24
    15f4:	11 97       	sbiw	r26, 0x01	; 1
    15f6:	15 8a       	std	Z+21, r1	; 0x15
    15f8:	14 8a       	std	Z+20, r1	; 0x14
    15fa:	8c 91       	ld	r24, X
    15fc:	81 50       	subi	r24, 0x01	; 1
    15fe:	8c 93       	st	X, r24
    1600:	a2 85       	ldd	r26, Z+10	; 0x0a
    1602:	b3 85       	ldd	r27, Z+11	; 0x0b
    1604:	c4 81       	ldd	r28, Z+4	; 0x04
    1606:	d5 81       	ldd	r29, Z+5	; 0x05
    1608:	86 81       	ldd	r24, Z+6	; 0x06
    160a:	97 81       	ldd	r25, Z+7	; 0x07
    160c:	9d 83       	std	Y+5, r25	; 0x05
    160e:	8c 83       	std	Y+4, r24	; 0x04
    1610:	c6 81       	ldd	r28, Z+6	; 0x06
    1612:	d7 81       	ldd	r29, Z+7	; 0x07
    1614:	84 81       	ldd	r24, Z+4	; 0x04
    1616:	95 81       	ldd	r25, Z+5	; 0x05
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	12 97       	sbiw	r26, 0x02	; 2
    1624:	9f 01       	movw	r18, r30
    1626:	2e 5f       	subi	r18, 0xFE	; 254
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	82 17       	cp	r24, r18
    162c:	93 07       	cpc	r25, r19
    162e:	31 f4       	brne	.+12     	; 0x163c <xTaskResumeAll+0xb4>
    1630:	86 81       	ldd	r24, Z+6	; 0x06
    1632:	97 81       	ldd	r25, Z+7	; 0x07
    1634:	12 96       	adiw	r26, 0x02	; 2
    1636:	9c 93       	st	X, r25
    1638:	8e 93       	st	-X, r24
    163a:	11 97       	sbiw	r26, 0x01	; 1
    163c:	13 86       	std	Z+11, r1	; 0x0b
    163e:	12 86       	std	Z+10, r1	; 0x0a
    1640:	8c 91       	ld	r24, X
    1642:	81 50       	subi	r24, 0x01	; 1
    1644:	8c 93       	st	X, r24
    1646:	86 89       	ldd	r24, Z+22	; 0x16
    1648:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    164c:	98 17       	cp	r25, r24
    164e:	10 f4       	brcc	.+4      	; 0x1654 <xTaskResumeAll+0xcc>
    1650:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	dc 01       	movw	r26, r24
    1658:	aa 0f       	add	r26, r26
    165a:	bb 1f       	adc	r27, r27
    165c:	aa 0f       	add	r26, r26
    165e:	bb 1f       	adc	r27, r27
    1660:	aa 0f       	add	r26, r26
    1662:	bb 1f       	adc	r27, r27
    1664:	8a 0f       	add	r24, r26
    1666:	9b 1f       	adc	r25, r27
    1668:	dc 01       	movw	r26, r24
    166a:	ad 55       	subi	r26, 0x5D	; 93
    166c:	bd 4f       	sbci	r27, 0xFD	; 253
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	0d 90       	ld	r0, X+
    1672:	bc 91       	ld	r27, X
    1674:	a0 2d       	mov	r26, r0
    1676:	b5 83       	std	Z+5, r27	; 0x05
    1678:	a4 83       	std	Z+4, r26	; 0x04
    167a:	14 96       	adiw	r26, 0x04	; 4
    167c:	8d 91       	ld	r24, X+
    167e:	9c 91       	ld	r25, X
    1680:	15 97       	sbiw	r26, 0x05	; 5
    1682:	97 83       	std	Z+7, r25	; 0x07
    1684:	86 83       	std	Z+6, r24	; 0x06
    1686:	14 96       	adiw	r26, 0x04	; 4
    1688:	cd 91       	ld	r28, X+
    168a:	dc 91       	ld	r29, X
    168c:	15 97       	sbiw	r26, 0x05	; 5
    168e:	3b 83       	std	Y+3, r19	; 0x03
    1690:	2a 83       	std	Y+2, r18	; 0x02
    1692:	15 96       	adiw	r26, 0x05	; 5
    1694:	3c 93       	st	X, r19
    1696:	2e 93       	st	-X, r18
    1698:	14 97       	sbiw	r26, 0x04	; 4
    169a:	a6 89       	ldd	r26, Z+22	; 0x16
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	cd 01       	movw	r24, r26
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	a8 0f       	add	r26, r24
    16ae:	b9 1f       	adc	r27, r25
    16b0:	ad 55       	subi	r26, 0x5D	; 93
    16b2:	bd 4f       	sbci	r27, 0xFD	; 253
    16b4:	b3 87       	std	Z+11, r27	; 0x0b
    16b6:	a2 87       	std	Z+10, r26	; 0x0a
    16b8:	8c 91       	ld	r24, X
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	8c 93       	st	X, r24
    16be:	96 89       	ldd	r25, Z+22	; 0x16
    16c0:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    16c4:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    16c8:	56 96       	adiw	r26, 0x16	; 22
    16ca:	8c 91       	ld	r24, X
    16cc:	98 17       	cp	r25, r24
    16ce:	30 f0       	brcs	.+12     	; 0x16dc <xTaskResumeAll+0x154>
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <xYieldPending>
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <xTaskResumeAll+0x154>
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <xPendingReadyList>
    16e0:	81 11       	cpse	r24, r1
    16e2:	65 cf       	rjmp	.-310    	; 0x15ae <xTaskResumeAll+0x26>
    16e4:	ef 2b       	or	r30, r31
    16e6:	09 f0       	breq	.+2      	; 0x16ea <xTaskResumeAll+0x162>
    16e8:	cc da       	rcall	.-2664   	; 0xc82 <prvResetNextTaskUnblockTime>
    16ea:	c0 91 6a 02 	lds	r28, 0x026A	; 0x80026a <xPendedTicks>
    16ee:	d0 91 6b 02 	lds	r29, 0x026B	; 0x80026b <xPendedTicks+0x1>
    16f2:	20 97       	sbiw	r28, 0x00	; 0
    16f4:	61 f0       	breq	.+24     	; 0x170e <xTaskResumeAll+0x186>
    16f6:	2f de       	rcall	.-930    	; 0x1356 <xTaskIncrementTick>
    16f8:	88 23       	and	r24, r24
    16fa:	19 f0       	breq	.+6      	; 0x1702 <xTaskResumeAll+0x17a>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <xYieldPending>
    1702:	21 97       	sbiw	r28, 0x01	; 1
    1704:	c1 f7       	brne	.-16     	; 0x16f6 <xTaskResumeAll+0x16e>
    1706:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <xPendedTicks+0x1>
    170a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <xPendedTicks>
    170e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <xYieldPending>
    1712:	88 23       	and	r24, r24
    1714:	31 f0       	breq	.+12     	; 0x1722 <xTaskResumeAll+0x19a>
    1716:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vPortYield>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <xTaskResumeAll+0x19c>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <xTaskResumeAll+0x19c>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <vTaskDelay>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	ec 01       	movw	r28, r24
    1734:	89 2b       	or	r24, r25
    1736:	31 f0       	breq	.+12     	; 0x1744 <vTaskDelay+0x16>
    1738:	fe dd       	rcall	.-1028   	; 0x1336 <vTaskSuspendAll>
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	ce 01       	movw	r24, r28
    173e:	0d dc       	rcall	.-2022   	; 0xf5a <prvAddCurrentTaskToDelayedList>
    1740:	23 df       	rcall	.-442    	; 0x1588 <xTaskResumeAll>
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vTaskDelay+0x18>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	81 11       	cpse	r24, r1
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vTaskDelay+0x20>
    174a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vPortYield>
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <vTaskSwitchContext>:
    1754:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    1758:	88 23       	and	r24, r24
    175a:	21 f0       	breq	.+8      	; 0x1764 <vTaskSwitchContext+0x10>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <xYieldPending>
    1762:	08 95       	ret
    1764:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <xYieldPending>
    1768:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    176c:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1770:	20 81       	ld	r18, Z
    1772:	31 81       	ldd	r19, Z+1	; 0x01
    1774:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1778:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    177c:	87 89       	ldd	r24, Z+23	; 0x17
    177e:	90 8d       	ldd	r25, Z+24	; 0x18
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	58 f0       	brcs	.+22     	; 0x179c <vTaskSwitchContext+0x48>
    1786:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    178a:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    178e:	67 5e       	subi	r22, 0xE7	; 231
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1796:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    179a:	ee d5       	rcall	.+3036   	; 0x2378 <vApplicationStackOverflowHook>
    179c:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <uxTopReadyPriority>
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vTaskSwitchContext+0x50>
    17a2:	21 50       	subi	r18, 0x01	; 1
    17a4:	82 2f       	mov	r24, r18
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	e8 0f       	add	r30, r24
    17b8:	f9 1f       	adc	r31, r25
    17ba:	ed 55       	subi	r30, 0x5D	; 93
    17bc:	fd 4f       	sbci	r31, 0xFD	; 253
    17be:	30 81       	ld	r19, Z
    17c0:	33 23       	and	r19, r19
    17c2:	79 f3       	breq	.-34     	; 0x17a2 <vTaskSwitchContext+0x4e>
    17c4:	ac 01       	movw	r20, r24
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	44 0f       	add	r20, r20
    17cc:	55 1f       	adc	r21, r21
    17ce:	44 0f       	add	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	48 0f       	add	r20, r24
    17d4:	59 1f       	adc	r21, r25
    17d6:	df 01       	movw	r26, r30
    17d8:	01 80       	ldd	r0, Z+1	; 0x01
    17da:	f2 81       	ldd	r31, Z+2	; 0x02
    17dc:	e0 2d       	mov	r30, r0
    17de:	02 80       	ldd	r0, Z+2	; 0x02
    17e0:	f3 81       	ldd	r31, Z+3	; 0x03
    17e2:	e0 2d       	mov	r30, r0
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	fc 93       	st	X, r31
    17e8:	ee 93       	st	-X, r30
    17ea:	11 97       	sbiw	r26, 0x01	; 1
    17ec:	4a 55       	subi	r20, 0x5A	; 90
    17ee:	5d 4f       	sbci	r21, 0xFD	; 253
    17f0:	e4 17       	cp	r30, r20
    17f2:	f5 07       	cpc	r31, r21
    17f4:	29 f4       	brne	.+10     	; 0x1800 <vTaskSwitchContext+0xac>
    17f6:	42 81       	ldd	r20, Z+2	; 0x02
    17f8:	53 81       	ldd	r21, Z+3	; 0x03
    17fa:	fd 01       	movw	r30, r26
    17fc:	52 83       	std	Z+2, r21	; 0x02
    17fe:	41 83       	std	Z+1, r20	; 0x01
    1800:	fc 01       	movw	r30, r24
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	8e 0f       	add	r24, r30
    1810:	9f 1f       	adc	r25, r31
    1812:	fc 01       	movw	r30, r24
    1814:	ed 55       	subi	r30, 0x5D	; 93
    1816:	fd 4f       	sbci	r31, 0xFD	; 253
    1818:	01 80       	ldd	r0, Z+1	; 0x01
    181a:	f2 81       	ldd	r31, Z+2	; 0x02
    181c:	e0 2d       	mov	r30, r0
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	97 81       	ldd	r25, Z+7	; 0x07
    1822:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <pxCurrentTCB+0x1>
    1826:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <pxCurrentTCB>
    182a:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <uxTopReadyPriority>
    182e:	08 95       	ret

00001830 <vTaskSuspend>:
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	ec 01       	movw	r28, r24
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	0f 92       	push	r0
    1840:	89 2b       	or	r24, r25
    1842:	21 f4       	brne	.+8      	; 0x184c <vTaskSuspend+0x1c>
    1844:	c0 91 c7 02 	lds	r28, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1848:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    184c:	8e 01       	movw	r16, r28
    184e:	0e 5f       	subi	r16, 0xFE	; 254
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	c8 01       	movw	r24, r16
    1854:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
    1858:	8c 89       	ldd	r24, Y+20	; 0x14
    185a:	9d 89       	ldd	r25, Y+21	; 0x15
    185c:	89 2b       	or	r24, r25
    185e:	21 f0       	breq	.+8      	; 0x1868 <vTaskSuspend+0x38>
    1860:	ce 01       	movw	r24, r28
    1862:	0c 96       	adiw	r24, 0x0c	; 12
    1864:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
    1868:	b8 01       	movw	r22, r16
    186a:	81 e7       	ldi	r24, 0x71	; 113
    186c:	92 e0       	ldi	r25, 0x02	; 2
    186e:	0e 94 2d 01 	call	0x25a	; 0x25a <vListInsertEnd>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0f c0       	rjmp	.+30     	; 0x1894 <vTaskSuspend+0x64>
    1876:	28 2f       	mov	r18, r24
    1878:	08 2e       	mov	r0, r24
    187a:	00 0c       	add	r0, r0
    187c:	33 0b       	sbc	r19, r19
    187e:	fe 01       	movw	r30, r28
    1880:	e2 0f       	add	r30, r18
    1882:	f3 1f       	adc	r31, r19
    1884:	97 a1       	ldd	r25, Z+39	; 0x27
    1886:	91 30       	cpi	r25, 0x01	; 1
    1888:	21 f4       	brne	.+8      	; 0x1892 <vTaskSuspend+0x62>
    188a:	fe 01       	movw	r30, r28
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	17 a2       	std	Z+39, r1	; 0x27
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	18 16       	cp	r1, r24
    1896:	7c f7       	brge	.-34     	; 0x1876 <vTaskSuspend+0x46>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
    18a0:	88 23       	and	r24, r24
    18a2:	31 f0       	breq	.+12     	; 0x18b0 <vTaskSuspend+0x80>
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	0f 92       	push	r0
    18aa:	eb d9       	rcall	.-3114   	; 0xc82 <prvResetNextTaskUnblockTime>
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    18b4:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    18b8:	c8 17       	cp	r28, r24
    18ba:	d9 07       	cpc	r29, r25
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <vTaskSuspend+0xb4>
    18be:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
    18c2:	88 23       	and	r24, r24
    18c4:	19 f0       	breq	.+6      	; 0x18cc <vTaskSuspend+0x9c>
    18c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vPortYield>
    18ca:	0c c0       	rjmp	.+24     	; 0x18e4 <vTaskSuspend+0xb4>
    18cc:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <xSuspendedTaskList>
    18d0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uxCurrentNumberOfTasks>
    18d4:	98 13       	cpse	r25, r24
    18d6:	05 c0       	rjmp	.+10     	; 0x18e2 <vTaskSuspend+0xb2>
    18d8:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <pxCurrentTCB+0x1>
    18dc:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <pxCurrentTCB>
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <vTaskSuspend+0xb4>
    18e2:	38 df       	rcall	.-400    	; 0x1754 <vTaskSwitchContext>
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <vTaskPlaceOnEventList>:
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	eb 01       	movw	r28, r22
    18f4:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    18f8:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    18fc:	64 5f       	subi	r22, 0xF4	; 244
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	0e 94 4e 01 	call	0x29c	; 0x29c <vListInsert>
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	ce 01       	movw	r24, r28
    1908:	28 db       	rcall	.-2480   	; 0xf5a <prvAddCurrentTaskToDelayedList>
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <vTaskPlaceOnEventListRestricted>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	fc 01       	movw	r30, r24
    191a:	8b 01       	movw	r16, r22
    191c:	a1 81       	ldd	r26, Z+1	; 0x01
    191e:	b2 81       	ldd	r27, Z+2	; 0x02
    1920:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1924:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1928:	ec 01       	movw	r28, r24
    192a:	bf 87       	std	Y+15, r27	; 0x0f
    192c:	ae 87       	std	Y+14, r26	; 0x0e
    192e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1932:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1936:	14 96       	adiw	r26, 0x04	; 4
    1938:	2d 91       	ld	r18, X+
    193a:	3c 91       	ld	r19, X
    193c:	15 97       	sbiw	r26, 0x05	; 5
    193e:	ec 01       	movw	r28, r24
    1940:	39 8b       	std	Y+17, r19	; 0x11
    1942:	28 8b       	std	Y+16, r18	; 0x10
    1944:	14 96       	adiw	r26, 0x04	; 4
    1946:	8d 91       	ld	r24, X+
    1948:	9c 91       	ld	r25, X
    194a:	15 97       	sbiw	r26, 0x05	; 5
    194c:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1950:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1954:	24 5f       	subi	r18, 0xF4	; 244
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	ec 01       	movw	r28, r24
    195a:	3b 83       	std	Y+3, r19	; 0x03
    195c:	2a 83       	std	Y+2, r18	; 0x02
    195e:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1962:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1966:	24 5f       	subi	r18, 0xF4	; 244
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	15 96       	adiw	r26, 0x05	; 5
    196c:	3c 93       	st	X, r19
    196e:	2e 93       	st	-X, r18
    1970:	14 97       	sbiw	r26, 0x04	; 4
    1972:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1976:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    197a:	55 96       	adiw	r26, 0x15	; 21
    197c:	fc 93       	st	X, r31
    197e:	ee 93       	st	-X, r30
    1980:	54 97       	sbiw	r26, 0x14	; 20
    1982:	90 81       	ld	r25, Z
    1984:	9f 5f       	subi	r25, 0xFF	; 255
    1986:	90 83       	st	Z, r25
    1988:	44 23       	and	r20, r20
    198a:	11 f0       	breq	.+4      	; 0x1990 <vTaskPlaceOnEventListRestricted+0x80>
    198c:	0f ef       	ldi	r16, 0xFF	; 255
    198e:	1f ef       	ldi	r17, 0xFF	; 255
    1990:	64 2f       	mov	r22, r20
    1992:	c8 01       	movw	r24, r16
    1994:	e2 da       	rcall	.-2620   	; 0xf5a <prvAddCurrentTaskToDelayedList>
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <xTaskRemoveFromEventList>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	dc 01       	movw	r26, r24
    19a6:	15 96       	adiw	r26, 0x05	; 5
    19a8:	ed 91       	ld	r30, X+
    19aa:	fc 91       	ld	r31, X
    19ac:	16 97       	sbiw	r26, 0x06	; 6
    19ae:	06 80       	ldd	r0, Z+6	; 0x06
    19b0:	f7 81       	ldd	r31, Z+7	; 0x07
    19b2:	e0 2d       	mov	r30, r0
    19b4:	a4 89       	ldd	r26, Z+20	; 0x14
    19b6:	b5 89       	ldd	r27, Z+21	; 0x15
    19b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    19ba:	d7 85       	ldd	r29, Z+15	; 0x0f
    19bc:	80 89       	ldd	r24, Z+16	; 0x10
    19be:	91 89       	ldd	r25, Z+17	; 0x11
    19c0:	9d 83       	std	Y+5, r25	; 0x05
    19c2:	8c 83       	std	Y+4, r24	; 0x04
    19c4:	c0 89       	ldd	r28, Z+16	; 0x10
    19c6:	d1 89       	ldd	r29, Z+17	; 0x11
    19c8:	86 85       	ldd	r24, Z+14	; 0x0e
    19ca:	97 85       	ldd	r25, Z+15	; 0x0f
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	8d 91       	ld	r24, X+
    19d4:	9c 91       	ld	r25, X
    19d6:	12 97       	sbiw	r26, 0x02	; 2
    19d8:	9f 01       	movw	r18, r30
    19da:	24 5f       	subi	r18, 0xF4	; 244
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	82 17       	cp	r24, r18
    19e0:	93 07       	cpc	r25, r19
    19e2:	31 f4       	brne	.+12     	; 0x19f0 <xTaskRemoveFromEventList+0x50>
    19e4:	80 89       	ldd	r24, Z+16	; 0x10
    19e6:	91 89       	ldd	r25, Z+17	; 0x11
    19e8:	12 96       	adiw	r26, 0x02	; 2
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
    19ee:	11 97       	sbiw	r26, 0x01	; 1
    19f0:	15 8a       	std	Z+21, r1	; 0x15
    19f2:	14 8a       	std	Z+20, r1	; 0x14
    19f4:	8c 91       	ld	r24, X
    19f6:	81 50       	subi	r24, 0x01	; 1
    19f8:	8c 93       	st	X, r24
    19fa:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    19fe:	81 11       	cpse	r24, r1
    1a00:	60 c0       	rjmp	.+192    	; 0x1ac2 <xTaskRemoveFromEventList+0x122>
    1a02:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a04:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a06:	c4 81       	ldd	r28, Z+4	; 0x04
    1a08:	d5 81       	ldd	r29, Z+5	; 0x05
    1a0a:	86 81       	ldd	r24, Z+6	; 0x06
    1a0c:	97 81       	ldd	r25, Z+7	; 0x07
    1a0e:	9d 83       	std	Y+5, r25	; 0x05
    1a10:	8c 83       	std	Y+4, r24	; 0x04
    1a12:	c6 81       	ldd	r28, Z+6	; 0x06
    1a14:	d7 81       	ldd	r29, Z+7	; 0x07
    1a16:	84 81       	ldd	r24, Z+4	; 0x04
    1a18:	95 81       	ldd	r25, Z+5	; 0x05
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	8d 91       	ld	r24, X+
    1a22:	9c 91       	ld	r25, X
    1a24:	12 97       	sbiw	r26, 0x02	; 2
    1a26:	9f 01       	movw	r18, r30
    1a28:	2e 5f       	subi	r18, 0xFE	; 254
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	82 17       	cp	r24, r18
    1a2e:	93 07       	cpc	r25, r19
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <xTaskRemoveFromEventList+0x9e>
    1a32:	86 81       	ldd	r24, Z+6	; 0x06
    1a34:	97 81       	ldd	r25, Z+7	; 0x07
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	9c 93       	st	X, r25
    1a3a:	8e 93       	st	-X, r24
    1a3c:	11 97       	sbiw	r26, 0x01	; 1
    1a3e:	13 86       	std	Z+11, r1	; 0x0b
    1a40:	12 86       	std	Z+10, r1	; 0x0a
    1a42:	8c 91       	ld	r24, X
    1a44:	81 50       	subi	r24, 0x01	; 1
    1a46:	8c 93       	st	X, r24
    1a48:	86 89       	ldd	r24, Z+22	; 0x16
    1a4a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    1a4e:	98 17       	cp	r25, r24
    1a50:	10 f4       	brcc	.+4      	; 0x1a56 <xTaskRemoveFromEventList+0xb6>
    1a52:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	dc 01       	movw	r26, r24
    1a5a:	aa 0f       	add	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	aa 0f       	add	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	aa 0f       	add	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	8a 0f       	add	r24, r26
    1a68:	9b 1f       	adc	r25, r27
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	ad 55       	subi	r26, 0x5D	; 93
    1a6e:	bd 4f       	sbci	r27, 0xFD	; 253
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	0d 90       	ld	r0, X+
    1a74:	bc 91       	ld	r27, X
    1a76:	a0 2d       	mov	r26, r0
    1a78:	b5 83       	std	Z+5, r27	; 0x05
    1a7a:	a4 83       	std	Z+4, r26	; 0x04
    1a7c:	14 96       	adiw	r26, 0x04	; 4
    1a7e:	8d 91       	ld	r24, X+
    1a80:	9c 91       	ld	r25, X
    1a82:	15 97       	sbiw	r26, 0x05	; 5
    1a84:	97 83       	std	Z+7, r25	; 0x07
    1a86:	86 83       	std	Z+6, r24	; 0x06
    1a88:	14 96       	adiw	r26, 0x04	; 4
    1a8a:	cd 91       	ld	r28, X+
    1a8c:	dc 91       	ld	r29, X
    1a8e:	15 97       	sbiw	r26, 0x05	; 5
    1a90:	3b 83       	std	Y+3, r19	; 0x03
    1a92:	2a 83       	std	Y+2, r18	; 0x02
    1a94:	15 96       	adiw	r26, 0x05	; 5
    1a96:	3c 93       	st	X, r19
    1a98:	2e 93       	st	-X, r18
    1a9a:	14 97       	sbiw	r26, 0x04	; 4
    1a9c:	a6 89       	ldd	r26, Z+22	; 0x16
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	a8 0f       	add	r26, r24
    1ab0:	b9 1f       	adc	r27, r25
    1ab2:	ad 55       	subi	r26, 0x5D	; 93
    1ab4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ab6:	b3 87       	std	Z+11, r27	; 0x0b
    1ab8:	a2 87       	std	Z+10, r26	; 0x0a
    1aba:	8c 91       	ld	r24, X
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	8c 93       	st	X, r24
    1ac0:	1c c0       	rjmp	.+56     	; 0x1afa <xTaskRemoveFromEventList+0x15a>
    1ac2:	44 e8       	ldi	r20, 0x84	; 132
    1ac4:	52 e0       	ldi	r21, 0x02	; 2
    1ac6:	da 01       	movw	r26, r20
    1ac8:	11 96       	adiw	r26, 0x01	; 1
    1aca:	cd 91       	ld	r28, X+
    1acc:	dc 91       	ld	r29, X
    1ace:	12 97       	sbiw	r26, 0x02	; 2
    1ad0:	d7 87       	std	Z+15, r29	; 0x0f
    1ad2:	c6 87       	std	Z+14, r28	; 0x0e
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	91 8b       	std	Z+17, r25	; 0x11
    1ada:	80 8b       	std	Z+16, r24	; 0x10
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	3c 93       	st	X, r19
    1ae6:	2e 93       	st	-X, r18
    1ae8:	12 97       	sbiw	r26, 0x02	; 2
    1aea:	3d 83       	std	Y+5, r19	; 0x05
    1aec:	2c 83       	std	Y+4, r18	; 0x04
    1aee:	55 8b       	std	Z+21, r21	; 0x15
    1af0:	44 8b       	std	Z+20, r20	; 0x14
    1af2:	da 01       	movw	r26, r20
    1af4:	8c 91       	ld	r24, X
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	8c 93       	st	X, r24
    1afa:	96 89       	ldd	r25, Z+22	; 0x16
    1afc:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1b00:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1b04:	86 89       	ldd	r24, Z+22	; 0x16
    1b06:	89 17       	cp	r24, r25
    1b08:	20 f4       	brcc	.+8      	; 0x1b12 <xTaskRemoveFromEventList+0x172>
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <xYieldPending>
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <xTaskRemoveFromEventList+0x174>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	08 95       	ret

00001b1a <vTaskInternalSetTimeOutState>:
    1b1a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <xNumOfOverflows>
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
    1b22:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <xTickCount>
    1b26:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <xTickCount+0x1>
    1b2a:	32 83       	std	Z+2, r19	; 0x02
    1b2c:	21 83       	std	Z+1, r18	; 0x01
    1b2e:	08 95       	ret

00001b30 <xTaskCheckForTimeOut>:
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	0f 92       	push	r0
    1b3c:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <xTickCount>
    1b40:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <xTickCount+0x1>
    1b44:	dc 01       	movw	r26, r24
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	4d 91       	ld	r20, X+
    1b4a:	5c 91       	ld	r21, X
    1b4c:	12 97       	sbiw	r26, 0x02	; 2
    1b4e:	df 01       	movw	r26, r30
    1b50:	a4 1b       	sub	r26, r20
    1b52:	b5 0b       	sbc	r27, r21
    1b54:	eb 01       	movw	r28, r22
    1b56:	28 81       	ld	r18, Y
    1b58:	39 81       	ldd	r19, Y+1	; 0x01
    1b5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1b5c:	df ef       	ldi	r29, 0xFF	; 255
    1b5e:	3d 07       	cpc	r19, r29
    1b60:	f1 f0       	breq	.+60     	; 0x1b9e <xTaskCheckForTimeOut+0x6e>
    1b62:	ec 01       	movw	r28, r24
    1b64:	18 81       	ld	r17, Y
    1b66:	c0 91 68 02 	lds	r28, 0x0268	; 0x800268 <xNumOfOverflows>
    1b6a:	1c 17       	cp	r17, r28
    1b6c:	41 f0       	breq	.+16     	; 0x1b7e <xTaskCheckForTimeOut+0x4e>
    1b6e:	e4 17       	cp	r30, r20
    1b70:	f5 07       	cpc	r31, r21
    1b72:	28 f0       	brcs	.+10     	; 0x1b7e <xTaskCheckForTimeOut+0x4e>
    1b74:	fb 01       	movw	r30, r22
    1b76:	11 82       	std	Z+1, r1	; 0x01
    1b78:	10 82       	st	Z, r1
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	11 c0       	rjmp	.+34     	; 0x1ba0 <xTaskCheckForTimeOut+0x70>
    1b7e:	a2 17       	cp	r26, r18
    1b80:	b3 07       	cpc	r27, r19
    1b82:	40 f4       	brcc	.+16     	; 0x1b94 <xTaskCheckForTimeOut+0x64>
    1b84:	fb 01       	movw	r30, r22
    1b86:	2a 1b       	sub	r18, r26
    1b88:	3b 0b       	sbc	r19, r27
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	20 83       	st	Z, r18
    1b8e:	c5 df       	rcall	.-118    	; 0x1b1a <vTaskInternalSetTimeOutState>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	06 c0       	rjmp	.+12     	; 0x1ba0 <xTaskCheckForTimeOut+0x70>
    1b94:	db 01       	movw	r26, r22
    1b96:	1d 92       	st	X+, r1
    1b98:	1c 92       	st	X, r1
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <xTaskCheckForTimeOut+0x70>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	08 95       	ret

00001bac <vTaskMissedYield>:
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <xYieldPending>
    1bb2:	08 95       	ret

00001bb4 <xTaskGetSchedulerState>:
    1bb4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <xSchedulerRunning>
    1bb8:	88 23       	and	r24, r24
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <xTaskGetSchedulerState+0x14>
    1bbc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <xTaskGetSchedulerState+0x18>
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	08 95       	ret
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	08 95       	ret
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	08 95       	ret

00001bd0 <xTaskPriorityInherit>:
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	fc 01       	movw	r30, r24
    1bda:	89 2b       	or	r24, r25
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <xTaskPriorityInherit+0x10>
    1bde:	84 c0       	rjmp	.+264    	; 0x1ce8 <xTaskPriorityInherit+0x118>
    1be0:	26 89       	ldd	r18, Z+22	; 0x16
    1be2:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1be6:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1bea:	56 96       	adiw	r26, 0x16	; 22
    1bec:	8c 91       	ld	r24, X
    1bee:	28 17       	cp	r18, r24
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <xTaskPriorityInherit+0x24>
    1bf2:	70 c0       	rjmp	.+224    	; 0x1cd4 <xTaskPriorityInherit+0x104>
    1bf4:	84 85       	ldd	r24, Z+12	; 0x0c
    1bf6:	95 85       	ldd	r25, Z+13	; 0x0d
    1bf8:	99 23       	and	r25, r25
    1bfa:	64 f0       	brlt	.+24     	; 0x1c14 <xTaskPriorityInherit+0x44>
    1bfc:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1c00:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1c04:	56 96       	adiw	r26, 0x16	; 22
    1c06:	3c 91       	ld	r19, X
    1c08:	84 e0       	ldi	r24, 0x04	; 4
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	83 1b       	sub	r24, r19
    1c0e:	91 09       	sbc	r25, r1
    1c10:	95 87       	std	Z+13, r25	; 0x0d
    1c12:	84 87       	std	Z+12, r24	; 0x0c
    1c14:	82 85       	ldd	r24, Z+10	; 0x0a
    1c16:	93 85       	ldd	r25, Z+11	; 0x0b
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	44 0f       	add	r20, r20
    1c1e:	55 1f       	adc	r21, r21
    1c20:	44 0f       	add	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	44 0f       	add	r20, r20
    1c26:	55 1f       	adc	r21, r21
    1c28:	24 0f       	add	r18, r20
    1c2a:	35 1f       	adc	r19, r21
    1c2c:	2d 55       	subi	r18, 0x5D	; 93
    1c2e:	3d 4f       	sbci	r19, 0xFD	; 253
    1c30:	82 17       	cp	r24, r18
    1c32:	93 07       	cpc	r25, r19
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <xTaskPriorityInherit+0x68>
    1c36:	45 c0       	rjmp	.+138    	; 0x1cc2 <xTaskPriorityInherit+0xf2>
    1c38:	ef 01       	movw	r28, r30
    1c3a:	8f 01       	movw	r16, r30
    1c3c:	0e 5f       	subi	r16, 0xFE	; 254
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	c8 01       	movw	r24, r16
    1c42:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
    1c46:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1c4a:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1c4e:	86 89       	ldd	r24, Z+22	; 0x16
    1c50:	8e 8b       	std	Y+22, r24	; 0x16
    1c52:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    1c56:	98 17       	cp	r25, r24
    1c58:	10 f4       	brcc	.+4      	; 0x1c5e <xTaskPriorityInherit+0x8e>
    1c5a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	fc 01       	movw	r30, r24
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	ee 0f       	add	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	8e 0f       	add	r24, r30
    1c70:	9f 1f       	adc	r25, r31
    1c72:	fc 01       	movw	r30, r24
    1c74:	ed 55       	subi	r30, 0x5D	; 93
    1c76:	fd 4f       	sbci	r31, 0xFD	; 253
    1c78:	01 80       	ldd	r0, Z+1	; 0x01
    1c7a:	f2 81       	ldd	r31, Z+2	; 0x02
    1c7c:	e0 2d       	mov	r30, r0
    1c7e:	fd 83       	std	Y+5, r31	; 0x05
    1c80:	ec 83       	std	Y+4, r30	; 0x04
    1c82:	84 81       	ldd	r24, Z+4	; 0x04
    1c84:	95 81       	ldd	r25, Z+5	; 0x05
    1c86:	9f 83       	std	Y+7, r25	; 0x07
    1c88:	8e 83       	std	Y+6, r24	; 0x06
    1c8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c8e:	13 96       	adiw	r26, 0x03	; 3
    1c90:	1c 93       	st	X, r17
    1c92:	0e 93       	st	-X, r16
    1c94:	12 97       	sbiw	r26, 0x02	; 2
    1c96:	15 83       	std	Z+5, r17	; 0x05
    1c98:	04 83       	std	Z+4, r16	; 0x04
    1c9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	e8 0f       	add	r30, r24
    1cae:	f9 1f       	adc	r31, r25
    1cb0:	ed 55       	subi	r30, 0x5D	; 93
    1cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb4:	fb 87       	std	Y+11, r31	; 0x0b
    1cb6:	ea 87       	std	Y+10, r30	; 0x0a
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	80 83       	st	Z, r24
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <xTaskPriorityInherit+0x11e>
    1cc2:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1cc6:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1cca:	56 96       	adiw	r26, 0x16	; 22
    1ccc:	8c 91       	ld	r24, X
    1cce:	86 8b       	std	Z+22, r24	; 0x16
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <xTaskPriorityInherit+0x11e>
    1cd4:	91 a1       	ldd	r25, Z+33	; 0x21
    1cd6:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1cda:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1cde:	86 89       	ldd	r24, Z+22	; 0x16
    1ce0:	98 17       	cp	r25, r24
    1ce2:	20 f0       	brcs	.+8      	; 0x1cec <xTaskPriorityInherit+0x11c>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <xTaskPriorityInherit+0x11e>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <xTaskPriorityInherit+0x11e>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <xTaskPriorityDisinherit>:
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	fc 01       	movw	r30, r24
    1d02:	89 2b       	or	r24, r25
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <xTaskPriorityDisinherit+0x10>
    1d06:	51 c0       	rjmp	.+162    	; 0x1daa <xTaskPriorityDisinherit+0xb2>
    1d08:	82 a1       	ldd	r24, Z+34	; 0x22
    1d0a:	81 50       	subi	r24, 0x01	; 1
    1d0c:	82 a3       	std	Z+34, r24	; 0x22
    1d0e:	26 89       	ldd	r18, Z+22	; 0x16
    1d10:	91 a1       	ldd	r25, Z+33	; 0x21
    1d12:	29 17       	cp	r18, r25
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <xTaskPriorityDisinherit+0x20>
    1d16:	4b c0       	rjmp	.+150    	; 0x1dae <xTaskPriorityDisinherit+0xb6>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	4b c0       	rjmp	.+150    	; 0x1db2 <xTaskPriorityDisinherit+0xba>
    1d1c:	ef 01       	movw	r28, r30
    1d1e:	8f 01       	movw	r16, r30
    1d20:	0e 5f       	subi	r16, 0xFE	; 254
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	c8 01       	movw	r24, r16
    1d26:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
    1d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2c:	8e 8b       	std	Y+22, r24	; 0x16
    1d2e:	24 e0       	ldi	r18, 0x04	; 4
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	28 1b       	sub	r18, r24
    1d34:	31 09       	sbc	r19, r1
    1d36:	3d 87       	std	Y+13, r19	; 0x0d
    1d38:	2c 87       	std	Y+12, r18	; 0x0c
    1d3a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    1d3e:	98 17       	cp	r25, r24
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <xTaskPriorityDisinherit+0x4e>
    1d42:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	fc 01       	movw	r30, r24
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	8e 0f       	add	r24, r30
    1d58:	9f 1f       	adc	r25, r31
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	ed 55       	subi	r30, 0x5D	; 93
    1d5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d60:	01 80       	ldd	r0, Z+1	; 0x01
    1d62:	f2 81       	ldd	r31, Z+2	; 0x02
    1d64:	e0 2d       	mov	r30, r0
    1d66:	fd 83       	std	Y+5, r31	; 0x05
    1d68:	ec 83       	std	Y+4, r30	; 0x04
    1d6a:	84 81       	ldd	r24, Z+4	; 0x04
    1d6c:	95 81       	ldd	r25, Z+5	; 0x05
    1d6e:	9f 83       	std	Y+7, r25	; 0x07
    1d70:	8e 83       	std	Y+6, r24	; 0x06
    1d72:	a4 81       	ldd	r26, Z+4	; 0x04
    1d74:	b5 81       	ldd	r27, Z+5	; 0x05
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	1c 93       	st	X, r17
    1d7a:	0e 93       	st	-X, r16
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	15 83       	std	Z+5, r17	; 0x05
    1d80:	04 83       	std	Z+4, r16	; 0x04
    1d82:	ee 89       	ldd	r30, Y+22	; 0x16
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	cf 01       	movw	r24, r30
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	e8 0f       	add	r30, r24
    1d96:	f9 1f       	adc	r31, r25
    1d98:	ed 55       	subi	r30, 0x5D	; 93
    1d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9c:	fb 87       	std	Y+11, r31	; 0x0b
    1d9e:	ea 87       	std	Y+10, r30	; 0x0a
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	80 83       	st	Z, r24
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <xTaskPriorityDisinherit+0xbc>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <xTaskPriorityDisinherit+0xbc>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <xTaskPriorityDisinherit+0xbc>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <vTaskPriorityDisinheritAfterTimeout>:
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	89 2b       	or	r24, r25
    1dca:	09 f4       	brne	.+2      	; 0x1dce <vTaskPriorityDisinheritAfterTimeout+0x10>
    1dcc:	66 c0       	rjmp	.+204    	; 0x1e9a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1dce:	91 a1       	ldd	r25, Z+33	; 0x21
    1dd0:	96 17       	cp	r25, r22
    1dd2:	08 f4       	brcc	.+2      	; 0x1dd6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1dd4:	96 2f       	mov	r25, r22
    1dd6:	86 89       	ldd	r24, Z+22	; 0x16
    1dd8:	98 17       	cp	r25, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <vTaskPriorityDisinheritAfterTimeout+0x20>
    1ddc:	5e c0       	rjmp	.+188    	; 0x1e9a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1dde:	22 a1       	ldd	r18, Z+34	; 0x22
    1de0:	21 30       	cpi	r18, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1de4:	5a c0       	rjmp	.+180    	; 0x1e9a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1de6:	96 8b       	std	Z+22, r25	; 0x16
    1de8:	24 85       	ldd	r18, Z+12	; 0x0c
    1dea:	35 85       	ldd	r19, Z+13	; 0x0d
    1dec:	33 23       	and	r19, r19
    1dee:	34 f0       	brlt	.+12     	; 0x1dfc <vTaskPriorityDisinheritAfterTimeout+0x3e>
    1df0:	24 e0       	ldi	r18, 0x04	; 4
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	29 1b       	sub	r18, r25
    1df6:	31 09       	sbc	r19, r1
    1df8:	35 87       	std	Z+13, r19	; 0x0d
    1dfa:	24 87       	std	Z+12, r18	; 0x0c
    1dfc:	22 85       	ldd	r18, Z+10	; 0x0a
    1dfe:	33 85       	ldd	r19, Z+11	; 0x0b
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	ac 01       	movw	r20, r24
    1e04:	44 0f       	add	r20, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	44 0f       	add	r20, r20
    1e0a:	55 1f       	adc	r21, r21
    1e0c:	44 0f       	add	r20, r20
    1e0e:	55 1f       	adc	r21, r21
    1e10:	84 0f       	add	r24, r20
    1e12:	95 1f       	adc	r25, r21
    1e14:	8d 55       	subi	r24, 0x5D	; 93
    1e16:	9d 4f       	sbci	r25, 0xFD	; 253
    1e18:	28 17       	cp	r18, r24
    1e1a:	39 07       	cpc	r19, r25
    1e1c:	f1 f5       	brne	.+124    	; 0x1e9a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1e1e:	ef 01       	movw	r28, r30
    1e20:	8f 01       	movw	r16, r30
    1e22:	0e 5f       	subi	r16, 0xFE	; 254
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
    1e2c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e2e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <uxTopReadyPriority>
    1e32:	98 17       	cp	r25, r24
    1e34:	10 f4       	brcc	.+4      	; 0x1e3a <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1e36:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <uxTopReadyPriority>
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	8e 0f       	add	r24, r30
    1e4c:	9f 1f       	adc	r25, r31
    1e4e:	fc 01       	movw	r30, r24
    1e50:	ed 55       	subi	r30, 0x5D	; 93
    1e52:	fd 4f       	sbci	r31, 0xFD	; 253
    1e54:	01 80       	ldd	r0, Z+1	; 0x01
    1e56:	f2 81       	ldd	r31, Z+2	; 0x02
    1e58:	e0 2d       	mov	r30, r0
    1e5a:	fd 83       	std	Y+5, r31	; 0x05
    1e5c:	ec 83       	std	Y+4, r30	; 0x04
    1e5e:	84 81       	ldd	r24, Z+4	; 0x04
    1e60:	95 81       	ldd	r25, Z+5	; 0x05
    1e62:	9f 83       	std	Y+7, r25	; 0x07
    1e64:	8e 83       	std	Y+6, r24	; 0x06
    1e66:	a4 81       	ldd	r26, Z+4	; 0x04
    1e68:	b5 81       	ldd	r27, Z+5	; 0x05
    1e6a:	13 96       	adiw	r26, 0x03	; 3
    1e6c:	1c 93       	st	X, r17
    1e6e:	0e 93       	st	-X, r16
    1e70:	12 97       	sbiw	r26, 0x02	; 2
    1e72:	15 83       	std	Z+5, r17	; 0x05
    1e74:	04 83       	std	Z+4, r16	; 0x04
    1e76:	8e 89       	ldd	r24, Y+22	; 0x16
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	e8 0f       	add	r30, r24
    1e8a:	f9 1f       	adc	r31, r25
    1e8c:	ed 55       	subi	r30, 0x5D	; 93
    1e8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e90:	fb 87       	std	Y+11, r31	; 0x0b
    1e92:	ea 87       	std	Y+10, r30	; 0x0a
    1e94:	80 81       	ld	r24, Z
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 83       	st	Z, r24
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	08 95       	ret

00001ea4 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1ea4:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1ea8:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1eac:	89 2b       	or	r24, r25
    1eae:	39 f0       	breq	.+14     	; 0x1ebe <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1eb0:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1eb4:	f0 91 c8 02 	lds	r31, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    1eb8:	82 a1       	ldd	r24, Z+34	; 0x22
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	82 a3       	std	Z+34, r24	; 0x22
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    1ebe:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <pxCurrentTCB>
    1ec2:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <pxCurrentTCB+0x1>
    }
    1ec6:	08 95       	ret

00001ec8 <prvGetNextExpireTime>:
    1ec8:	dc 01       	movw	r26, r24
    1eca:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTimerList>
    1ece:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTimerList+0x1>
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 93       	st	X, r25
    1edc:	91 11       	cpse	r25, r1
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <prvGetNextExpireTime+0x24>
    1ee0:	05 80       	ldd	r0, Z+5	; 0x05
    1ee2:	f6 81       	ldd	r31, Z+6	; 0x06
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	08 95       	ret
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	08 95       	ret

00001ef2 <prvInsertTimerInActiveList>:
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	73 83       	std	Z+3, r23	; 0x03
    1ef6:	62 83       	std	Z+2, r22	; 0x02
    1ef8:	91 87       	std	Z+9, r25	; 0x09
    1efa:	80 87       	std	Z+8, r24	; 0x08
    1efc:	46 17       	cp	r20, r22
    1efe:	57 07       	cpc	r21, r23
    1f00:	90 f0       	brcs	.+36     	; 0x1f26 <prvInsertTimerInActiveList+0x34>
    1f02:	42 1b       	sub	r20, r18
    1f04:	53 0b       	sbc	r21, r19
    1f06:	84 85       	ldd	r24, Z+12	; 0x0c
    1f08:	95 85       	ldd	r25, Z+13	; 0x0d
    1f0a:	48 17       	cp	r20, r24
    1f0c:	59 07       	cpc	r21, r25
    1f0e:	e0 f4       	brcc	.+56     	; 0x1f48 <prvInsertTimerInActiveList+0x56>
    1f10:	bf 01       	movw	r22, r30
    1f12:	6e 5f       	subi	r22, 0xFE	; 254
    1f14:	7f 4f       	sbci	r23, 0xFF	; 255
    1f16:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <pxOverflowTimerList>
    1f1a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <pxOverflowTimerList+0x1>
    1f1e:	0e 94 4e 01 	call	0x29c	; 0x29c <vListInsert>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	08 95       	ret
    1f26:	42 17       	cp	r20, r18
    1f28:	53 07       	cpc	r21, r19
    1f2a:	18 f4       	brcc	.+6      	; 0x1f32 <prvInsertTimerInActiveList+0x40>
    1f2c:	62 17       	cp	r22, r18
    1f2e:	73 07       	cpc	r23, r19
    1f30:	68 f4       	brcc	.+26     	; 0x1f4c <prvInsertTimerInActiveList+0x5a>
    1f32:	bf 01       	movw	r22, r30
    1f34:	6e 5f       	subi	r22, 0xFE	; 254
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTimerList>
    1f3c:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTimerList+0x1>
    1f40:	0e 94 4e 01 	call	0x29c	; 0x29c <vListInsert>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	08 95       	ret
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	08 95       	ret
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	08 95       	ret

00001f50 <prvCheckForValidListAndQueue>:
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	0f 92       	push	r0
    1f56:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    1f5a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    1f5e:	89 2b       	or	r24, r25
    1f60:	e9 f4       	brne	.+58     	; 0x1f9c <prvCheckForValidListAndQueue+0x4c>
    1f62:	8c ed       	ldi	r24, 0xDC	; 220
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	0e 94 1b 01 	call	0x236	; 0x236 <vListInitialise>
    1f6a:	83 ed       	ldi	r24, 0xD3	; 211
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	0e 94 1b 01 	call	0x236	; 0x236 <vListInitialise>
    1f72:	8c ed       	ldi	r24, 0xDC	; 220
    1f74:	92 e0       	ldi	r25, 0x02	; 2
    1f76:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <pxCurrentTimerList+0x1>
    1f7a:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <pxCurrentTimerList>
    1f7e:	83 ed       	ldi	r24, 0xD3	; 211
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <pxOverflowTimerList+0x1>
    1f86:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <pxOverflowTimerList>
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	65 e0       	ldi	r22, 0x05	; 5
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	0e 94 ef 03 	call	0x7de	; 0x7de <xQueueGenericCreate>
    1f94:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <xTimerQueue+0x1>
    1f98:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <xTimerQueue>
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	08 95       	ret

00001fa2 <xTimerCreateTimerTask>:
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	d3 df       	rcall	.-90     	; 0x1f50 <prvCheckForValidListAndQueue>
    1faa:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    1fae:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    1fb2:	89 2b       	or	r24, r25
    1fb4:	89 f0       	breq	.+34     	; 0x1fd8 <xTimerCreateTimerTask+0x36>
    1fb6:	0f 2e       	mov	r0, r31
    1fb8:	fb ec       	ldi	r31, 0xCB	; 203
    1fba:	ef 2e       	mov	r14, r31
    1fbc:	f2 e0       	ldi	r31, 0x02	; 2
    1fbe:	ff 2e       	mov	r15, r31
    1fc0:	f0 2d       	mov	r31, r0
    1fc2:	03 e0       	ldi	r16, 0x03	; 3
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	45 e5       	ldi	r20, 0x55	; 85
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	6c e0       	ldi	r22, 0x0C	; 12
    1fce:	72 e0       	ldi	r23, 0x02	; 2
    1fd0:	83 e8       	ldi	r24, 0x83	; 131
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	40 d8       	rcall	.-3968   	; 0x1056 <xTaskCreate>
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <xTimerCreateTimerTask+0x38>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <xTimerGenericCommand+0xa>
    1fec:	1f 92       	push	r1
    1fee:	1f 92       	push	r1
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1ff4:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <xTimerQueue>
    1ff8:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    1ffc:	30 97       	sbiw	r30, 0x00	; 0
    1ffe:	69 f1       	breq	.+90     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2000:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2002:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2004:	5b 83       	std	Y+3, r21	; 0x03
    2006:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2008:	9d 83       	std	Y+5, r25	; 0x05
    200a:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    200c:	66 30       	cpi	r22, 0x06	; 6
    200e:	e4 f4       	brge	.+56     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2010:	d1 dd       	rcall	.-1118   	; 0x1bb4 <xTaskGetSchedulerState>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	61 f4       	brne	.+24     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	a8 01       	movw	r20, r16
    201a:	be 01       	movw	r22, r28
    201c:	6f 5f       	subi	r22, 0xFF	; 255
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    2024:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    2028:	0e 94 12 04 	call	0x824	; 0x824 <xQueueGenericSend>
    202c:	17 c0       	rjmp	.+46     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	be 01       	movw	r22, r28
    2036:	6f 5f       	subi	r22, 0xFF	; 255
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    203e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    2042:	0e 94 12 04 	call	0x824	; 0x824 <xQueueGenericSend>
    2046:	0a c0       	rjmp	.+20     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	ad 01       	movw	r20, r26
    204c:	be 01       	movw	r22, r28
    204e:	6f 5f       	subi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	cf 01       	movw	r24, r30
    2054:	0e 94 b2 04 	call	0x964	; 0x964 <xQueueGenericSendFromISR>
    2058:	01 c0       	rjmp	.+2      	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    205a:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    207c:	2f c0       	rjmp	.+94     	; 0x20dc <prvSwitchTimerLists+0x6c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    207e:	05 80       	ldd	r0, Z+5	; 0x05
    2080:	f6 81       	ldd	r31, Z+6	; 0x06
    2082:	e0 2d       	mov	r30, r0
    2084:	e0 80       	ld	r14, Z
    2086:	f1 80       	ldd	r15, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2088:	c6 81       	ldd	r28, Z+6	; 0x06
    208a:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    208c:	8e 01       	movw	r16, r28
    208e:	0e 5f       	subi	r16, 0xFE	; 254
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	c8 01       	movw	r24, r16
    2094:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2098:	e8 89       	ldd	r30, Y+16	; 0x10
    209a:	f9 89       	ldd	r31, Y+17	; 0x11
    209c:	ce 01       	movw	r24, r28
    209e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    20a0:	8a 89       	ldd	r24, Y+18	; 0x12
    20a2:	82 ff       	sbrs	r24, 2
    20a4:	1b c0       	rjmp	.+54     	; 0x20dc <prvSwitchTimerLists+0x6c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    20a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20aa:	8e 0d       	add	r24, r14
    20ac:	9f 1d       	adc	r25, r15

                if( xReloadTime > xNextExpireTime )
    20ae:	e8 16       	cp	r14, r24
    20b0:	f9 06       	cpc	r15, r25
    20b2:	60 f4       	brcc	.+24     	; 0x20cc <prvSwitchTimerLists+0x5c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    20b8:	d9 87       	std	Y+9, r29	; 0x09
    20ba:	c8 87       	std	Y+8, r28	; 0x08
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    20bc:	b8 01       	movw	r22, r16
    20be:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <pxCurrentTimerList>
    20c2:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <pxCurrentTimerList+0x1>
    20c6:	0e 94 4e 01 	call	0x29c	; 0x29c <vListInsert>
    20ca:	08 c0       	rjmp	.+16     	; 0x20dc <prvSwitchTimerLists+0x6c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	a7 01       	movw	r20, r14
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	ce 01       	movw	r24, r28
    20da:	83 df       	rcall	.-250    	; 0x1fe2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    20dc:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTimerList>
    20e0:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTimerList+0x1>
    20e4:	80 81       	ld	r24, Z
    20e6:	81 11       	cpse	r24, r1
    20e8:	ca cf       	rjmp	.-108    	; 0x207e <prvSwitchTimerLists+0xe>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    20ea:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <pxOverflowTimerList>
    20ee:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <pxOverflowTimerList+0x1>
    20f2:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <pxCurrentTimerList+0x1>
    20f6:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    20fa:	f0 93 d0 02 	sts	0x02D0, r31	; 0x8002d0 <pxOverflowTimerList+0x1>
    20fe:	e0 93 cf 02 	sts	0x02CF, r30	; 0x8002cf <pxOverflowTimerList>
    }
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	08 95       	ret

00002110 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    211a:	13 d9       	rcall	.-3546   	; 0x1342 <xTaskGetTickCount>
    211c:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    211e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <xLastTime.2436>
    2122:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <xLastTime.2436+0x1>
    2126:	c8 17       	cp	r28, r24
    2128:	d9 07       	cpc	r29, r25
        {
            prvSwitchTimerLists();
    212a:	28 f4       	brcc	.+10     	; 0x2136 <prvSampleTimeNow+0x26>
    212c:	a1 df       	rcall	.-190    	; 0x2070 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	f8 01       	movw	r30, r16
    2132:	80 83       	st	Z, r24
    2134:	02 c0       	rjmp	.+4      	; 0x213a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2136:	f8 01       	movw	r30, r16
    2138:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    213a:	d0 93 ca 02 	sts	0x02CA, r29	; 0x8002ca <xLastTime.2436+0x1>
    213e:	c0 93 c9 02 	sts	0x02C9, r28	; 0x8002c9 <xLastTime.2436>

        return xTimeNow;
    }
    2142:	ce 01       	movw	r24, r28
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	7c 01       	movw	r14, r24
    215c:	8b 01       	movw	r16, r22
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    215e:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <pxCurrentTimerList>
    2162:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <pxCurrentTimerList+0x1>
    2166:	05 80       	ldd	r0, Z+5	; 0x05
    2168:	f6 81       	ldd	r31, Z+6	; 0x06
    216a:	e0 2d       	mov	r30, r0
    216c:	c6 81       	ldd	r28, Z+6	; 0x06
    216e:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2170:	ce 01       	movw	r24, r28
    2172:	02 96       	adiw	r24, 0x02	; 2
    2174:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2178:	8a 89       	ldd	r24, Y+18	; 0x12
    217a:	82 ff       	sbrs	r24, 2
    217c:	13 c0       	rjmp	.+38     	; 0x21a4 <prvProcessExpiredTimer+0x56>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    217e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2180:	7d 85       	ldd	r23, Y+13	; 0x0d
    2182:	6e 0d       	add	r22, r14
    2184:	7f 1d       	adc	r23, r15
    2186:	97 01       	movw	r18, r14
    2188:	a8 01       	movw	r20, r16
    218a:	ce 01       	movw	r24, r28
    218c:	b2 de       	rcall	.-668    	; 0x1ef2 <prvInsertTimerInActiveList>
    218e:	88 23       	and	r24, r24
    2190:	59 f0       	breq	.+22     	; 0x21a8 <prvProcessExpiredTimer+0x5a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2192:	00 e0       	ldi	r16, 0x00	; 0
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	a7 01       	movw	r20, r14
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	ce 01       	movw	r24, r28
    21a0:	20 df       	rcall	.-448    	; 0x1fe2 <xTimerGenericCommand>
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <prvProcessExpiredTimer+0x5a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    21a4:	8e 7f       	andi	r24, 0xFE	; 254
    21a6:	8a 8b       	std	Y+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    21a8:	e8 89       	ldd	r30, Y+16	; 0x10
    21aa:	f9 89       	ldd	r31, Y+17	; 0x11
    21ac:	ce 01       	movw	r24, r28
    21ae:	19 95       	eicall
    }
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	08 95       	ret

000021be <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	1f 92       	push	r1
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	7c 01       	movw	r14, r24
    21d4:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    21d6:	af d8       	rcall	.-3746   	; 0x1336 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    21d8:	ce 01       	movw	r24, r28
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	99 df       	rcall	.-206    	; 0x2110 <prvSampleTimeNow>
    21de:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	81 11       	cpse	r24, r1
    21e4:	24 c0       	rjmp	.+72     	; 0x222e <__stack+0x2f>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    21e6:	11 11       	cpse	r17, r1
    21e8:	08 c0       	rjmp	.+16     	; 0x21fa <prvProcessTimerOrBlockTask+0x3c>
    21ea:	ce 14       	cp	r12, r14
    21ec:	df 04       	cpc	r13, r15
                {
                    ( void ) xTaskResumeAll();
    21ee:	28 f0       	brcs	.+10     	; 0x21fa <prvProcessTimerOrBlockTask+0x3c>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    21f0:	cb d9       	rcall	.-3178   	; 0x1588 <xTaskResumeAll>
    21f2:	b6 01       	movw	r22, r12
    21f4:	c7 01       	movw	r24, r14
    21f6:	ab df       	rcall	.-170    	; 0x214e <prvProcessExpiredTimer>
    21f8:	1b c0       	rjmp	.+54     	; 0x2230 <__stack+0x31>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    21fa:	11 23       	and	r17, r17
    21fc:	41 f0       	breq	.+16     	; 0x220e <__stack+0xf>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    21fe:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <pxOverflowTimerList>
    2202:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <pxOverflowTimerList+0x1>
    2206:	80 81       	ld	r24, Z
    2208:	11 e0       	ldi	r17, 0x01	; 1
    220a:	81 11       	cpse	r24, r1
    220c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    220e:	b7 01       	movw	r22, r14
    2210:	6c 19       	sub	r22, r12
    2212:	7d 09       	sbc	r23, r13
    2214:	41 2f       	mov	r20, r17
    2216:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    221a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    221e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2222:	b2 d9       	rcall	.-3228   	; 0x1588 <xTaskResumeAll>
    2224:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <__stack+0x31>
    2228:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <__stack+0x31>
    222e:	ac d9       	rcall	.-3240   	; 0x1588 <xTaskResumeAll>
            }
        }
    }
    2230:	0f 90       	pop	r0
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	08 95       	ret

00002242 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	00 d0       	rcall	.+0      	; 0x2250 <prvProcessReceivedCommands+0xe>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <prvProcessReceivedCommands+0x10>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2256:	6c c0       	rjmp	.+216    	; 0x2330 <prvProcessReceivedCommands+0xee>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 23       	and	r24, r24
    225c:	0c f4       	brge	.+2      	; 0x2260 <prvProcessReceivedCommands+0x1e>
    225e:	68 c0       	rjmp	.+208    	; 0x2330 <prvProcessReceivedCommands+0xee>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2260:	ec 80       	ldd	r14, Y+4	; 0x04
    2262:	fd 80       	ldd	r15, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2264:	d7 01       	movw	r26, r14
    2266:	1a 96       	adiw	r26, 0x0a	; 10
    2268:	8d 91       	ld	r24, X+
    226a:	9c 91       	ld	r25, X
    226c:	1b 97       	sbiw	r26, 0x0b	; 11
    226e:	89 2b       	or	r24, r25
    2270:	21 f0       	breq	.+8      	; 0x227a <prvProcessReceivedCommands+0x38>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2272:	c7 01       	movw	r24, r14
    2274:	02 96       	adiw	r24, 0x02	; 2
    2276:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    227a:	ce 01       	movw	r24, r28
    227c:	06 96       	adiw	r24, 0x06	; 6
    227e:	48 df       	rcall	.-368    	; 0x2110 <prvSampleTimeNow>
    2280:	ac 01       	movw	r20, r24

                switch( xMessage.xMessageID )
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	0e 2e       	mov	r0, r30
    2286:	00 0c       	add	r0, r0
    2288:	ff 0b       	sbc	r31, r31
    228a:	ea 30       	cpi	r30, 0x0A	; 10
    228c:	f1 05       	cpc	r31, r1
    228e:	08 f0       	brcs	.+2      	; 0x2292 <prvProcessReceivedCommands+0x50>
    2290:	4f c0       	rjmp	.+158    	; 0x2330 <prvProcessReceivedCommands+0xee>
    2292:	88 27       	eor	r24, r24
    2294:	ee 58       	subi	r30, 0x8E	; 142
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	8f 4f       	sbci	r24, 0xFF	; 255
    229a:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    229e:	f7 01       	movw	r30, r14
    22a0:	82 89       	ldd	r24, Z+18	; 0x12
    22a2:	81 60       	ori	r24, 0x01	; 1
    22a4:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    22a6:	2a 81       	ldd	r18, Y+2	; 0x02
    22a8:	3b 81       	ldd	r19, Y+3	; 0x03
    22aa:	64 85       	ldd	r22, Z+12	; 0x0c
    22ac:	75 85       	ldd	r23, Z+13	; 0x0d
    22ae:	62 0f       	add	r22, r18
    22b0:	73 1f       	adc	r23, r19
    22b2:	c7 01       	movw	r24, r14
    22b4:	1e de       	rcall	.-964    	; 0x1ef2 <prvInsertTimerInActiveList>
    22b6:	88 23       	and	r24, r24
    22b8:	d9 f1       	breq	.+118    	; 0x2330 <prvProcessReceivedCommands+0xee>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    22ba:	d7 01       	movw	r26, r14
    22bc:	50 96       	adiw	r26, 0x10	; 16
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	51 97       	sbiw	r26, 0x11	; 17
    22c4:	c7 01       	movw	r24, r14
    22c6:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    22c8:	f7 01       	movw	r30, r14
    22ca:	82 89       	ldd	r24, Z+18	; 0x12
    22cc:	82 ff       	sbrs	r24, 2
    22ce:	30 c0       	rjmp	.+96     	; 0x2330 <prvProcessReceivedCommands+0xee>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    22d0:	4a 81       	ldd	r20, Y+2	; 0x02
    22d2:	5b 81       	ldd	r21, Y+3	; 0x03
    22d4:	84 85       	ldd	r24, Z+12	; 0x0c
    22d6:	95 85       	ldd	r25, Z+13	; 0x0d
    22d8:	48 0f       	add	r20, r24
    22da:	59 1f       	adc	r21, r25
    22dc:	00 e0       	ldi	r16, 0x00	; 0
    22de:	10 e0       	ldi	r17, 0x00	; 0
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	c7 01       	movw	r24, r14
    22e8:	7c de       	rcall	.-776    	; 0x1fe2 <xTimerGenericCommand>
    22ea:	22 c0       	rjmp	.+68     	; 0x2330 <prvProcessReceivedCommands+0xee>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    22ec:	d7 01       	movw	r26, r14
    22ee:	52 96       	adiw	r26, 0x12	; 18
    22f0:	8c 91       	ld	r24, X
    22f2:	52 97       	sbiw	r26, 0x12	; 18
    22f4:	8e 7f       	andi	r24, 0xFE	; 254
    22f6:	52 96       	adiw	r26, 0x12	; 18
    22f8:	8c 93       	st	X, r24
                        break;
    22fa:	1a c0       	rjmp	.+52     	; 0x2330 <prvProcessReceivedCommands+0xee>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    22fc:	f7 01       	movw	r30, r14
    22fe:	82 89       	ldd	r24, Z+18	; 0x12
    2300:	81 60       	ori	r24, 0x01	; 1
    2302:	82 8b       	std	Z+18, r24	; 0x12
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2304:	6a 81       	ldd	r22, Y+2	; 0x02
    2306:	7b 81       	ldd	r23, Y+3	; 0x03
    2308:	75 87       	std	Z+13, r23	; 0x0d
    230a:	64 87       	std	Z+12, r22	; 0x0c
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    230c:	64 0f       	add	r22, r20
    230e:	75 1f       	adc	r23, r21
    2310:	9a 01       	movw	r18, r20
    2312:	c7 01       	movw	r24, r14
    2314:	ee dd       	rcall	.-1060   	; 0x1ef2 <prvInsertTimerInActiveList>
                        break;
    2316:	0c c0       	rjmp	.+24     	; 0x2330 <prvProcessReceivedCommands+0xee>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2318:	d7 01       	movw	r26, r14
    231a:	52 96       	adiw	r26, 0x12	; 18
    231c:	8c 91       	ld	r24, X
    231e:	81 fd       	sbrc	r24, 1
    2320:	04 c0       	rjmp	.+8      	; 0x232a <prvProcessReceivedCommands+0xe8>
                                {
                                    vPortFree( pxTimer );
    2322:	c7 01       	movw	r24, r14
    2324:	0e 94 0c 01 	call	0x218	; 0x218 <vPortFree>
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <prvProcessReceivedCommands+0xee>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    232a:	8e 7f       	andi	r24, 0xFE	; 254
    232c:	f7 01       	movw	r30, r14
    232e:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	be 01       	movw	r22, r28
    2336:	6f 5f       	subi	r22, 0xFF	; 255
    2338:	7f 4f       	sbci	r23, 0xFF	; 255
    233a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <xTimerQueue>
    233e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <xTimerQueue+0x1>
    2342:	0e 94 ed 04 	call	0x9da	; 0x9da <xQueueReceive>
    2346:	81 11       	cpse	r24, r1
    2348:	87 cf       	rjmp	.-242    	; 0x2258 <prvProcessReceivedCommands+0x16>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    234a:	26 96       	adiw	r28, 0x06	; 6
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	08 95       	ret

00002364 <vApplicationMallocFailedHook>:
 */
void prvSetMainLedOn( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2364:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2366:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2368:	83 ed       	ldi	r24, 0xD3	; 211
    236a:	90 e3       	ldi	r25, 0x30	; 48
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <vApplicationMallocFailedHook+0x8>
    2370:	00 c0       	rjmp	.+0      	; 0x2372 <vApplicationMallocFailedHook+0xe>
    2372:	00 00       	nop
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2374:	1f 9a       	sbi	0x03, 7	; 3
    2376:	f8 cf       	rjmp	.-16     	; 0x2368 <vApplicationMallocFailedHook+0x4>

00002378 <vApplicationStackOverflowHook>:
 */
void prvSetMainLedOn( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2378:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    237a:	2f 9a       	sbi	0x05, 7	; 5
    237c:	2f e7       	ldi	r18, 0x7F	; 127
    237e:	8a e1       	ldi	r24, 0x1A	; 26
    2380:	96 e0       	ldi	r25, 0x06	; 6
    2382:	21 50       	subi	r18, 0x01	; 1
    2384:	80 40       	sbci	r24, 0x00	; 0
    2386:	90 40       	sbci	r25, 0x00	; 0
    2388:	e1 f7       	brne	.-8      	; 0x2382 <vApplicationStackOverflowHook+0xa>
    238a:	00 c0       	rjmp	.+0      	; 0x238c <vApplicationStackOverflowHook+0x14>
    238c:	00 00       	nop
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    238e:	1f 9a       	sbi	0x03, 7	; 3
    2390:	f5 cf       	rjmp	.-22     	; 0x237c <vApplicationStackOverflowHook+0x4>

00002392 <_Z4initv>:
/**/ SemaphoreHandle_t voltage_SEM = NULL; /**/ // Preprecuje da bi dva taska dostopala do napetosti naenkrat
/*************************************************/
void init()
{

DDRE |= 1;
    2392:	68 9a       	sbi	0x0d, 0	; 13
DDRH |= 1 << 3 | 1 << 4 | 1 << 5;
    2394:	e1 e0       	ldi	r30, 0x01	; 1
    2396:	f1 e0       	ldi	r31, 0x01	; 1
    2398:	80 81       	ld	r24, Z
    239a:	88 63       	ori	r24, 0x38	; 56
    239c:	80 83       	st	Z, r24
DDRB |= 0b11110000;
    239e:	84 b1       	in	r24, 0x04	; 4
    23a0:	80 6f       	ori	r24, 0xF0	; 240
    23a2:	84 b9       	out	0x04, r24	; 4

/************************/
/* Nastavitev Timerja */

TCCR5A = 0b00000010;
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
TCCR5B = (1 << CS50);
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
OCR5A = 16000;
    23b0:	20 e8       	ldi	r18, 0x80	; 128
    23b2:	3e e3       	ldi	r19, 0x3E	; 62
    23b4:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    23b8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
TIMSK5 = (1 << OCIE5A);
    23bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7c0073>

/************************/
ADMUX = (1 << REFS0) | (1 << 0b00000011) | (1 << ADLAR); //Nastavi referenco za napetost
    23c0:	88 e6       	ldi	r24, 0x68	; 104
    23c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
ADCSRA |= (1 << ADEN);                                   //Vklop adc in zacetek konverzije
    23c6:	ea e7       	ldi	r30, 0x7A	; 122
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	80 68       	ori	r24, 0x80	; 128
    23ce:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC);
    23d0:	80 81       	ld	r24, Z
    23d2:	80 64       	ori	r24, 0x40	; 64
    23d4:	80 83       	st	Z, r24
DIDR0 = 0b11111111; // Izklop digitalnih registrov od 0 to 7
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
DIDR1 = 0b11111100; //Isto samo za ostale
    23dc:	8c ef       	ldi	r24, 0xFC	; 252
    23de:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    23e2:	08 95       	ret

000023e4 <main>:
}

int main()
{
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16

init();
    23ea:	d3 df       	rcall	.-90     	; 0x2392 <_Z4initv>

writeOUTPUT(4, 'B', 1); // PULL up
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	62 e4       	ldi	r22, 0x42	; 66
    23f0:	84 e0       	ldi	r24, 0x04	; 4
    23f2:	67 d7       	rcall	.+3790   	; 0x32c2 <_Z11writeOUTPUThcb>
//Hardware.POLKONC = EEPROM.read(battery_eeprom_addr);
voltage_SEM = xSemaphoreCreateMutex();
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	0e 94 a6 04 	call	0x94c	; 0x94c <xQueueCreateMutex>
    23fa:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <voltage_SEM+0x1>
    23fe:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <voltage_SEM>
xSemaphoreGive(voltage_SEM); /*   (GIVE = ostali lahko vzamejo dostop, TAKE = task ostalim taskom vzame dostop do semaforja)  */
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	0e 94 12 04 	call	0x824	; 0x824 <xQueueGenericSend>

trenutni_audio_mode = OFF_A;
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <AUSYS_vars+0x1>
    2418:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <AUSYS_vars>
xTaskCreate(core, "_core", 256, NULL, tskIDLE_PRIORITY, &core_control);
    241c:	81 ef       	ldi	r24, 0xF1	; 241
    241e:	e8 2e       	mov	r14, r24
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	f8 2e       	mov	r15, r24
    2424:	00 e0       	ldi	r16, 0x00	; 0
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	51 e0       	ldi	r21, 0x01	; 1
    242e:	64 e1       	ldi	r22, 0x14	; 20
    2430:	72 e0       	ldi	r23, 0x02	; 2
    2432:	80 eb       	ldi	r24, 0xB0	; 176
    2434:	96 e1       	ldi	r25, 0x16	; 22
    2436:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
xTaskCreate(events, "Events task", 256, NULL, 3, &event_control);
    243a:	9f ee       	ldi	r25, 0xEF	; 239
    243c:	e9 2e       	mov	r14, r25
    243e:	92 e0       	ldi	r25, 0x02	; 2
    2440:	f9 2e       	mov	r15, r25
    2442:	03 e0       	ldi	r16, 0x03	; 3
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	51 e0       	ldi	r21, 0x01	; 1
    244c:	6a e1       	ldi	r22, 0x1A	; 26
    244e:	72 e0       	ldi	r23, 0x02	; 2
    2450:	8b ed       	ldi	r24, 0xDB	; 219
    2452:	97 e1       	ldi	r25, 0x17	; 23
    2454:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
xTaskCreate(zaslon, "LVCHRG", 256, NULL, tskIDLE_PRIORITY, &zaslon_control);
    2458:	2b ee       	ldi	r18, 0xEB	; 235
    245a:	e2 2e       	mov	r14, r18
    245c:	22 e0       	ldi	r18, 0x02	; 2
    245e:	f2 2e       	mov	r15, r18
    2460:	00 e0       	ldi	r16, 0x00	; 0
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	51 e0       	ldi	r21, 0x01	; 1
    246a:	66 e2       	ldi	r22, 0x26	; 38
    246c:	72 e0       	ldi	r23, 0x02	; 2
    246e:	8e ec       	ldi	r24, 0xCE	; 206
    2470:	9a e1       	ldi	r25, 0x1A	; 26
    2472:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
xTaskCreate(thermal, "therm", 256, NULL, 1, &thermal_control);
    2476:	37 ee       	ldi	r19, 0xE7	; 231
    2478:	e3 2e       	mov	r14, r19
    247a:	32 e0       	ldi	r19, 0x02	; 2
    247c:	f3 2e       	mov	r15, r19
    247e:	01 e0       	ldi	r16, 0x01	; 1
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	51 e0       	ldi	r21, 0x01	; 1
    2488:	6d e2       	ldi	r22, 0x2D	; 45
    248a:	72 e0       	ldi	r23, 0x02	; 2
    248c:	84 e2       	ldi	r24, 0x24	; 36
    248e:	9b e1       	ldi	r25, 0x1B	; 27
    2490:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
xTaskCreate(polnjenje, "CHRG", 256, NULL, tskIDLE_PRIORITY, &chrg_control);
    2494:	49 ee       	ldi	r20, 0xE9	; 233
    2496:	e4 2e       	mov	r14, r20
    2498:	42 e0       	ldi	r20, 0x02	; 2
    249a:	f4 2e       	mov	r15, r20
    249c:	00 e0       	ldi	r16, 0x00	; 0
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	51 e0       	ldi	r21, 0x01	; 1
    24a6:	68 e2       	ldi	r22, 0x28	; 40
    24a8:	72 e0       	ldi	r23, 0x02	; 2
    24aa:	81 e6       	ldi	r24, 0x61	; 97
    24ac:	9a e1       	ldi	r25, 0x1A	; 26
    24ae:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
xTaskCreate(audio_visual, "auvs", 256, NULL, 2, &audio_system_control);
    24b2:	5d ee       	ldi	r21, 0xED	; 237
    24b4:	e5 2e       	mov	r14, r21
    24b6:	52 e0       	ldi	r21, 0x02	; 2
    24b8:	f5 2e       	mov	r15, r21
    24ba:	02 e0       	ldi	r16, 0x02	; 2
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	51 e0       	ldi	r21, 0x01	; 1
    24c4:	63 e3       	ldi	r22, 0x33	; 51
    24c6:	72 e0       	ldi	r23, 0x02	; 2
    24c8:	80 e7       	ldi	r24, 0x70	; 112
    24ca:	92 e1       	ldi	r25, 0x12	; 18
    24cc:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>

vTaskStartScheduler();
    24d0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vTaskStartScheduler>
return 0;
}
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0f 91       	pop	r16
    24da:	ff 90       	pop	r15
    24dc:	ef 90       	pop	r14
    24de:	08 95       	ret

000024e0 <_Z12audio_visualPv>:
castimer mic_sim_timer;

void audio_visual(void *p) //Funkcija avdio-vizualnega sistema
{
    bool mikrofon_detect = false;
    uint16_t povprecna_glasnost = 0;
    24e0:	c0 e0       	ldi	r28, 0x00	; 0
    24e2:	d0 e0       	ldi	r29, 0x00	; 0
    24e4:	3d c0       	rjmp	.+122    	; 0x2560 <_Z12audio_visualPv+0x80>

    while (true)
    {
       
        int checkPVP = AVG_Volume_Meri(); // Izmeri povprecje
        povprecna_glasnost = checkPVP != 0 ? checkPVP : povprecna_glasnost;
    24e6:	ec 01       	movw	r28, r24
        mikrofon_detect = readANALOG(mic_pin) >= (povprecna_glasnost + 80) && povprecna_glasnost != 0 ? true : false;
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	3e d7       	rcall	.+3708   	; 0x3368 <_Z10readANALOGh>
    24ec:	9e 01       	movw	r18, r28
    24ee:	20 5b       	subi	r18, 0xB0	; 176
    24f0:	3f 4f       	sbci	r19, 0xFF	; 255
    24f2:	82 17       	cp	r24, r18
    24f4:	93 07       	cpc	r25, r19
    24f6:	08 f4       	brcc	.+2      	; 0x24fa <_Z12audio_visualPv+0x1a>
    24f8:	42 c0       	rjmp	.+132    	; 0x257e <_Z12audio_visualPv+0x9e>
     

        if (Timers.lucke_filter_time.vrednost() > 100 && mikrofon_detect ) // AUDIO_M machine
    24fa:	83 e6       	ldi	r24, 0x63	; 99
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2502:	65 36       	cpi	r22, 0x65	; 101
    2504:	71 05       	cpc	r23, r1
    2506:	81 05       	cpc	r24, r1
    2508:	91 05       	cpc	r25, r1
    250a:	38 f1       	brcs	.+78     	; 0x255a <_Z12audio_visualPv+0x7a>
        {
            Timers.lucke_filter_time.ponastavi();
    250c:	83 e6       	ldi	r24, 0x63	; 99
    250e:	93 e0       	ldi	r25, 0x03	; 3
    2510:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
            static uint8_t barva_selekt = 0;
			barva_selekt += 1 % LENGHT; 
    2514:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_ZZ12audio_visualPvE12barva_selekt>
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_ZZ12audio_visualPvE12barva_selekt>
            switch (trenutni_audio_mode)
    251e:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <AUSYS_vars>
    2522:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <AUSYS_vars+0x1>
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	91 05       	cpc	r25, r1
    252a:	09 f4       	brne	.+2      	; 0x252e <_Z12audio_visualPv+0x4e>
    252c:	6b c0       	rjmp	.+214    	; 0x2604 <_Z12audio_visualPv+0x124>
    252e:	08 f4       	brcc	.+2      	; 0x2532 <_Z12audio_visualPv+0x52>
    2530:	4a c0       	rjmp	.+148    	; 0x25c6 <_Z12audio_visualPv+0xe6>
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	91 05       	cpc	r25, r1
    2536:	41 f1       	breq	.+80     	; 0x2588 <_Z12audio_visualPv+0xa8>
    2538:	04 97       	sbiw	r24, 0x04	; 4
    253a:	79 f4       	brne	.+30     	; 0x255a <_Z12audio_visualPv+0x7a>
            case Fade_Breathe: //Dihalni nacin
                cr_fade_tsk(Fade_Breathe_Task, "Breathe Fade", barva_selekt, Breathe_control);
                break;

            case OFF_A:
                holdTASK(audio_system_control); //Ne rabi hoditi v task ce je izkljucen
    253c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    2540:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    2544:	0e 94 bf 08 	call	0x117e	; 0x117e <eTaskGetState>
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	39 f0       	breq	.+14     	; 0x255a <_Z12audio_visualPv+0x7a>
    254c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    2550:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	09 f0       	breq	.+2      	; 0x255a <_Z12audio_visualPv+0x7a>
    2558:	6b d9       	rcall	.-3370   	; 0x1830 <vTaskSuspend>
                break;
            }
        }

        vTaskDelay(1);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t povprecna_glasnost = 0;

    while (true)
    {
       
        int checkPVP = AVG_Volume_Meri(); // Izmeri povprecje
    255e:	e7 d8       	rcall	.-3634   	; 0x172e <vTaskDelay>
    2560:	70 d0       	rcall	.+224    	; 0x2642 <_Z15AVG_Volume_Meriv>
        povprecna_glasnost = checkPVP != 0 ? checkPVP : povprecna_glasnost;
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	09 f0       	breq	.+2      	; 0x2568 <_Z12audio_visualPv+0x88>
        mikrofon_detect = readANALOG(mic_pin) >= (povprecna_glasnost + 80) && povprecna_glasnost != 0 ? true : false;
    2566:	bf cf       	rjmp	.-130    	; 0x24e6 <_Z12audio_visualPv+0x6>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	fe d6       	rcall	.+3580   	; 0x3368 <_Z10readANALOGh>
    256c:	9e 01       	movw	r18, r28
    256e:	20 5b       	subi	r18, 0xB0	; 176
    2570:	3f 4f       	sbci	r19, 0xFF	; 255
    2572:	82 17       	cp	r24, r18
    2574:	93 07       	cpc	r25, r19
    2576:	18 f0       	brcs	.+6      	; 0x257e <_Z12audio_visualPv+0x9e>
    2578:	20 97       	sbiw	r28, 0x00	; 0
    257a:	09 f0       	breq	.+2      	; 0x257e <_Z12audio_visualPv+0x9e>
    257c:	be cf       	rjmp	.-132    	; 0x24fa <_Z12audio_visualPv+0x1a>
     

        if (Timers.lucke_filter_time.vrednost() > 100 && mikrofon_detect ) // AUDIO_M machine
    257e:	83 e6       	ldi	r24, 0x63	; 99
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2586:	e9 cf       	rjmp	.-46     	; 0x255a <_Z12audio_visualPv+0x7a>
            case COLOR_FADE: //Prehod iz trenutne barve v zeljeno
                cr_fade_tsk(Color_Fade_task, "Color shift", barva_selekt, color_fade_control);
                break;

            case Fade_Breathe: //Dihalni nacin
                cr_fade_tsk(Fade_Breathe_Task, "Breathe Fade", barva_selekt, Breathe_control);
    2588:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <Breathe_control>
    258c:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <Breathe_control+0x1>
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	49 f0       	breq	.+18     	; 0x25a6 <_Z12audio_visualPv+0xc6>
    2594:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    2598:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Breathe_control+0x1>
    259c:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Breathe_control>
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	c4 d8       	rcall	.-3704   	; 0x172e <vTaskDelay>
    25a6:	84 ef       	ldi	r24, 0xF4	; 244
    25a8:	e8 2e       	mov	r14, r24
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	f8 2e       	mov	r15, r24
    25ae:	03 e0       	ldi	r16, 0x03	; 3
    25b0:	23 ef       	ldi	r18, 0xF3	; 243
    25b2:	32 e0       	ldi	r19, 0x02	; 2
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	60 e5       	ldi	r22, 0x50	; 80
    25ba:	72 e0       	ldi	r23, 0x02	; 2
    25bc:	80 e5       	ldi	r24, 0x50	; 80
    25be:	96 e1       	ldi	r25, 0x16	; 22
    25c0:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
                break;
    25c4:	ca cf       	rjmp	.-108    	; 0x255a <_Z12audio_visualPv+0x7a>
			barva_selekt += 1 % LENGHT; 
            switch (trenutni_audio_mode)
            {

            case NORMAL_FADE: //Prizig in fade izklop
                cr_fade_tsk(fade_task, "Normal Fade", barva_selekt, fade_control);
    25c6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <fade_control>
    25ca:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <fade_control+0x1>
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	49 f0       	breq	.+18     	; 0x25e4 <_Z12audio_visualPv+0x104>
    25d2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    25d6:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <fade_control+0x1>
    25da:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <fade_control>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a5 d8       	rcall	.-3766   	; 0x172e <vTaskDelay>
    25e4:	28 ef       	ldi	r18, 0xF8	; 248
    25e6:	e2 2e       	mov	r14, r18
    25e8:	22 e0       	ldi	r18, 0x02	; 2
    25ea:	f2 2e       	mov	r15, r18
    25ec:	03 e0       	ldi	r16, 0x03	; 3
    25ee:	23 ef       	ldi	r18, 0xF3	; 243
    25f0:	32 e0       	ldi	r19, 0x02	; 2
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	68 e3       	ldi	r22, 0x38	; 56
    25f8:	72 e0       	ldi	r23, 0x02	; 2
    25fa:	85 ef       	ldi	r24, 0xF5	; 245
    25fc:	95 e1       	ldi	r25, 0x15	; 21
    25fe:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
                break;
    2602:	ab cf       	rjmp	.-170    	; 0x255a <_Z12audio_visualPv+0x7a>

            case COLOR_FADE: //Prehod iz trenutne barve v zeljeno
                cr_fade_tsk(Color_Fade_task, "Color shift", barva_selekt, color_fade_control);
    2604:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <color_fade_control>
    2608:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <color_fade_control+0x1>
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	49 f0       	breq	.+18     	; 0x2622 <_Z12audio_visualPv+0x142>
    2610:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    2614:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <color_fade_control+0x1>
    2618:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <color_fade_control>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	86 d8       	rcall	.-3828   	; 0x172e <vTaskDelay>
    2622:	96 ef       	ldi	r25, 0xF6	; 246
    2624:	e9 2e       	mov	r14, r25
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	f9 2e       	mov	r15, r25
    262a:	03 e0       	ldi	r16, 0x03	; 3
    262c:	23 ef       	ldi	r18, 0xF3	; 243
    262e:	32 e0       	ldi	r19, 0x02	; 2
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	64 e4       	ldi	r22, 0x44	; 68
    2636:	72 e0       	ldi	r23, 0x02	; 2
    2638:	8a e3       	ldi	r24, 0x3A	; 58
    263a:	96 e1       	ldi	r25, 0x16	; 22
    263c:	0e 94 2b 08 	call	0x1056	; 0x1056 <xTaskCreate>
                break;
    2640:	8c cf       	rjmp	.-232    	; 0x255a <_Z12audio_visualPv+0x7a>

00002642 <_Z15AVG_Volume_Meriv>:
    static unsigned long vsota_branj = 0;
    static unsigned short st_branj = 0;
    static unsigned short max_izmerjeno = 0;


    unsigned short tr_vrednost = readANALOG(mic_pin);
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	91 d6       	rcall	.+3362   	; 0x3368 <_Z10readANALOGh>
    if (tr_vrednost > max_izmerjeno)
    2646:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
    264a:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	20 f4       	brcc	.+8      	; 0x265c <_Z15AVG_Volume_Meriv+0x1a>
        max_izmerjeno = tr_vrednost;
    2654:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    2658:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>

    if (Timers.average_v_timer.vrednost() >= 20)
    265c:	8c e7       	ldi	r24, 0x7C	; 124
    265e:	93 e0       	ldi	r25, 0x03	; 3
    2660:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2664:	64 31       	cpi	r22, 0x14	; 20
    2666:	71 05       	cpc	r23, r1
    2668:	81 05       	cpc	r24, r1
    266a:	91 05       	cpc	r25, r1
    266c:	40 f5       	brcc	.+80     	; 0x26be <_Z15AVG_Volume_Meriv+0x7c>
        st_branj++;
        max_izmerjeno = 0;
        Timers.average_v_timer.ponastavi();
    }

    if (st_branj >= 50)
    266e:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <_ZZ15AVG_Volume_MerivE8st_branj>
    2672:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    2676:	22 33       	cpi	r18, 0x32	; 50
    2678:	31 05       	cpc	r19, r1
    267a:	f0 f0       	brcs	.+60     	; 0x26b8 <_Z15AVG_Volume_Meriv+0x76>
    {
        uint16_t tmp = vsota_branj / st_branj;
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <_ZZ15AVG_Volume_MerivE11vsota_branj>
    2684:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    2688:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    268c:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
    2690:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__udivmodsi4>
        vsota_branj = 0;
    2694:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <_ZZ15AVG_Volume_MerivE11vsota_branj>
    2698:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    269c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    26a0:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
        st_branj = 0;
    26a4:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    26a8:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <_ZZ15AVG_Volume_MerivE8st_branj>
        max_izmerjeno = 0;
    26ac:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    26b0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
        return tmp;
    26b4:	c9 01       	movw	r24, r18
    26b6:	08 95       	ret
    }
    return 0;
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
}
    26bc:	08 95       	ret
    if (tr_vrednost > max_izmerjeno)
        max_izmerjeno = tr_vrednost;

    if (Timers.average_v_timer.vrednost() >= 20)
    {
        vsota_branj += max_izmerjeno;
    26be:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
    26c2:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    26c6:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZZ15AVG_Volume_MerivE11vsota_branj>
    26ca:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    26ce:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    26d2:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
    26d6:	82 0f       	add	r24, r18
    26d8:	93 1f       	adc	r25, r19
    26da:	a1 1d       	adc	r26, r1
    26dc:	b1 1d       	adc	r27, r1
    26de:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <_ZZ15AVG_Volume_MerivE11vsota_branj>
    26e2:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    26e6:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    26ea:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
        st_branj++;
    26ee:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZZ15AVG_Volume_MerivE8st_branj>
    26f2:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    26fc:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZZ15AVG_Volume_MerivE8st_branj>
        max_izmerjeno = 0;
    2700:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    2704:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
        Timers.average_v_timer.ponastavi();
    2708:	8c e7       	ldi	r24, 0x7C	; 124
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    2710:	ae cf       	rjmp	.-164    	; 0x266e <_Z15AVG_Volume_Meriv+0x2c>

00002712 <_Z24deleteALL_subAUDIO_tasksv>:
    holdTASK(Breathe_control);
}

void deleteALL_subAUDIO_tasks()
{
    deleteTask(fade_control);
    2712:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <fade_control>
    2716:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <fade_control+0x1>
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	51 f0       	breq	.+20     	; 0x2732 <_Z24deleteALL_subAUDIO_tasksv+0x20>
    271e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    2722:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <fade_control+0x1>
    2726:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <fade_control>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    deleteTask(color_fade_control);
    2732:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <color_fade_control>
    2736:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <color_fade_control+0x1>
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	51 f0       	breq	.+20     	; 0x2752 <_Z24deleteALL_subAUDIO_tasksv+0x40>
    273e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    2742:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <color_fade_control+0x1>
    2746:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <color_fade_control>
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    deleteTask(Breathe_control);
    2752:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <Breathe_control>
    2756:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <Breathe_control+0x1>
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	51 f0       	breq	.+20     	; 0x2772 <_Z24deleteALL_subAUDIO_tasksv+0x60>
    275e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <vTaskDelete>
    2762:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Breathe_control+0x1>
    2766:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Breathe_control>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    delay_FRTOS(15);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0c 94 97 0b 	jmp	0x172e	; 0x172e <vTaskDelay>

0000277a <_Z9writeTRAKv>:
}

void writeTRAK()
{
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    writePWM(r_trak, 'B', (float)tr_r * (float)tr_bright / 255.00);
    2786:	c4 e5       	ldi	r28, 0x54	; 84
    2788:	d3 e0       	ldi	r29, 0x03	; 3
    278a:	6a 81       	ldd	r22, Y+2	; 0x02
    278c:	7b 81       	ldd	r23, Y+3	; 0x03
    278e:	07 2e       	mov	r0, r23
    2790:	00 0c       	add	r0, r0
    2792:	88 0b       	sbc	r24, r24
    2794:	99 0b       	sbc	r25, r25
    2796:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    279a:	6b 01       	movw	r12, r22
    279c:	7c 01       	movw	r14, r24
    279e:	68 85       	ldd	r22, Y+8	; 0x08
    27a0:	79 85       	ldd	r23, Y+9	; 0x09
    27a2:	07 2e       	mov	r0, r23
    27a4:	00 0c       	add	r0, r0
    27a6:	88 0b       	sbc	r24, r24
    27a8:	99 0b       	sbc	r25, r25
    27aa:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    27ae:	9b 01       	movw	r18, r22
    27b0:	ac 01       	movw	r20, r24
    27b2:	c7 01       	movw	r24, r14
    27b4:	b6 01       	movw	r22, r12
    27b6:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <__mulsf3>
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	53 e4       	ldi	r21, 0x43	; 67
    27c2:	0e 94 02 1c 	call	0x3804	; 0x3804 <__divsf3>
    27c6:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fixunssfsi>
    27ca:	46 2f       	mov	r20, r22
    27cc:	62 e4       	ldi	r22, 0x42	; 66
    27ce:	84 e0       	ldi	r24, 0x04	; 4
    27d0:	dd d5       	rcall	.+3002   	; 0x338c <_Z8writePWMhch>
    writePWM(z_trak, 'B', (float)tr_z * (float)tr_bright / 255.00);
    27d2:	6c 81       	ldd	r22, Y+4	; 0x04
    27d4:	7d 81       	ldd	r23, Y+5	; 0x05
    27d6:	07 2e       	mov	r0, r23
    27d8:	00 0c       	add	r0, r0
    27da:	88 0b       	sbc	r24, r24
    27dc:	99 0b       	sbc	r25, r25
    27de:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    27e2:	6b 01       	movw	r12, r22
    27e4:	7c 01       	movw	r14, r24
    27e6:	68 85       	ldd	r22, Y+8	; 0x08
    27e8:	79 85       	ldd	r23, Y+9	; 0x09
    27ea:	07 2e       	mov	r0, r23
    27ec:	00 0c       	add	r0, r0
    27ee:	88 0b       	sbc	r24, r24
    27f0:	99 0b       	sbc	r25, r25
    27f2:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    27f6:	9b 01       	movw	r18, r22
    27f8:	ac 01       	movw	r20, r24
    27fa:	c7 01       	movw	r24, r14
    27fc:	b6 01       	movw	r22, r12
    27fe:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <__mulsf3>
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	fc d7       	rcall	.+4088   	; 0x3804 <__divsf3>
    280c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fixunssfsi>
    2810:	46 2f       	mov	r20, r22
    2812:	62 e4       	ldi	r22, 0x42	; 66
    2814:	85 e0       	ldi	r24, 0x05	; 5
    2816:	ba d5       	rcall	.+2932   	; 0x338c <_Z8writePWMhch>
    writePWM(m_trak, 'B', (float)tr_m * (float)tr_bright / 255.00);
    2818:	6e 81       	ldd	r22, Y+6	; 0x06
    281a:	7f 81       	ldd	r23, Y+7	; 0x07
    281c:	07 2e       	mov	r0, r23
    281e:	00 0c       	add	r0, r0
    2820:	88 0b       	sbc	r24, r24
    2822:	99 0b       	sbc	r25, r25
    2824:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    2828:	6b 01       	movw	r12, r22
    282a:	7c 01       	movw	r14, r24
    282c:	68 85       	ldd	r22, Y+8	; 0x08
    282e:	79 85       	ldd	r23, Y+9	; 0x09
    2830:	07 2e       	mov	r0, r23
    2832:	00 0c       	add	r0, r0
    2834:	88 0b       	sbc	r24, r24
    2836:	99 0b       	sbc	r25, r25
    2838:	0e 94 98 1c 	call	0x3930	; 0x3930 <__floatsisf>
    283c:	9b 01       	movw	r18, r22
    283e:	ac 01       	movw	r20, r24
    2840:	c7 01       	movw	r24, r14
    2842:	b6 01       	movw	r22, r12
    2844:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <__mulsf3>
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	53 e4       	ldi	r21, 0x43	; 67
    2850:	d9 d7       	rcall	.+4018   	; 0x3804 <__divsf3>
    2852:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <__fixunssfsi>
    2856:	46 2f       	mov	r20, r22
    2858:	62 e4       	ldi	r22, 0x42	; 66
    285a:	86 e0       	ldi	r24, 0x06	; 6
}
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	ff 90       	pop	r15
    2862:	ef 90       	pop	r14
    2864:	df 90       	pop	r13

void writeTRAK()
{
    writePWM(r_trak, 'B', (float)tr_r * (float)tr_bright / 255.00);
    writePWM(z_trak, 'B', (float)tr_z * (float)tr_bright / 255.00);
    writePWM(m_trak, 'B', (float)tr_m * (float)tr_bright / 255.00);
    2866:	cf 90       	pop	r12
    2868:	91 c5       	rjmp	.+2850   	; 0x338c <_Z8writePWMhch>

0000286a <_Z11flash_stripv>:
}

void flash_strip() //Utripanje (Izhod iz scroll stata / menjava mikrofona)
{
    286a:	cf 93       	push	r28
	free(AUSYS_vars.TR_BARVA);
    286c:	86 e5       	ldi	r24, 0x56	; 86
    286e:	93 e0       	ldi	r25, 0x03	; 3
    2870:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <free>
	memcpy(AUSYS_vars.TR_BARVA, mozne_barve.barvni_ptr[BELA], 3);
    2874:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <mozne_barve+0x18>
    2878:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <mozne_barve+0x19>
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <AUSYS_vars+0x3>
    2884:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <AUSYS_vars+0x2>
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <AUSYS_vars+0x4>
    288e:	c5 e0       	ldi	r28, 0x05	; 5
    for (uint8_t i = 0; i < 5; i++)
    {
        writeOUTPUT(r_trak,'B', 0);
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	62 e4       	ldi	r22, 0x42	; 66
    2894:	84 e0       	ldi	r24, 0x04	; 4
    2896:	15 d5       	rcall	.+2602   	; 0x32c2 <_Z11writeOUTPUThcb>
        writeOUTPUT(z_trak,'B', 0);
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	62 e4       	ldi	r22, 0x42	; 66
    289c:	85 e0       	ldi	r24, 0x05	; 5
    289e:	11 d5       	rcall	.+2594   	; 0x32c2 <_Z11writeOUTPUThcb>
        writeOUTPUT(m_trak,'B', 0);
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	62 e4       	ldi	r22, 0x42	; 66
    28a4:	86 e0       	ldi	r24, 0x06	; 6
    28a6:	0d d5       	rcall	.+2586   	; 0x32c2 <_Z11writeOUTPUThcb>
        delay_FRTOS(125);
    28a8:	87 e0       	ldi	r24, 0x07	; 7
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
        writeOUTPUT(r_trak,'B', 1);
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	62 e4       	ldi	r22, 0x42	; 66
    28b4:	84 e0       	ldi	r24, 0x04	; 4
    28b6:	05 d5       	rcall	.+2570   	; 0x32c2 <_Z11writeOUTPUThcb>
        writeOUTPUT(z_trak,'B', 1);
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	62 e4       	ldi	r22, 0x42	; 66
    28bc:	85 e0       	ldi	r24, 0x05	; 5
    28be:	01 d5       	rcall	.+2562   	; 0x32c2 <_Z11writeOUTPUThcb>
        writeOUTPUT(m_trak,'B', 1);
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	62 e4       	ldi	r22, 0x42	; 66
    28c4:	86 e0       	ldi	r24, 0x06	; 6
    28c6:	fd d4       	rcall	.+2554   	; 0x32c2 <_Z11writeOUTPUThcb>
    28c8:	87 e0       	ldi	r24, 0x07	; 7
        delay_FRTOS(125);
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    28d0:	c1 50       	subi	r28, 0x01	; 1
    28d2:	f1 f6       	brne	.-68     	; 0x2890 <_Z11flash_stripv+0x26>

void flash_strip() //Utripanje (Izhod iz scroll stata / menjava mikrofona)
{
	free(AUSYS_vars.TR_BARVA);
	memcpy(AUSYS_vars.TR_BARVA, mozne_barve.barvni_ptr[BELA], 3);
    for (uint8_t i = 0; i < 5; i++)
    28d4:	cf 91       	pop	r28
        writeOUTPUT(r_trak,'B', 1);
        writeOUTPUT(z_trak,'B', 1);
        writeOUTPUT(m_trak,'B', 1);
        delay_FRTOS(125);
    }
}
    28d6:	08 95       	ret

000028d8 <_Z16color_fade_functPh>:
    28d8:	ef 92       	push	r14

void color_fade_funct(uint8_t *BARVA)
{
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	ec 01       	movw	r28, r24
    28e6:	2c c0       	rjmp	.+88     	; 0x2940 <_Z16color_fade_functPh+0x68>
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
        mozne_barve.barvni_ptr[*BARVA][1] >= tr_z ? smer[1] = 1 : smer[1] = -1;
        mozne_barve.barvni_ptr[*BARVA][2] >= tr_m ? smer[2] = 1 : smer[2] = -1;
    28e8:	6a e0       	ldi	r22, 0x0A	; 10
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	81 e0       	ldi	r24, 0x01	; 1

        tr_r = tr_r + (10 * smer[0]);
    28ee:	2e 0f       	add	r18, r30
    28f0:	3f 1f       	adc	r19, r31
    28f2:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <AUSYS_vars+0x3>
    28f6:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <AUSYS_vars+0x2>
        tr_z = tr_z + (10 * smer[1]);
    28fa:	ae 0d       	add	r26, r14
    28fc:	bf 1d       	adc	r27, r15
    28fe:	b0 93 59 03 	sts	0x0359, r27	; 0x800359 <AUSYS_vars+0x5>
    2902:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <AUSYS_vars+0x4>
        tr_m = tr_m + (10 * smer[2]);
    2906:	60 0f       	add	r22, r16
    2908:	71 1f       	adc	r23, r17
    290a:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <AUSYS_vars+0x7>
    290e:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <AUSYS_vars+0x6>

        //Preveri prenihaj:

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
    2912:	51 30       	cpi	r21, 0x01	; 1
    2914:	09 f4       	brne	.+2      	; 0x2918 <_Z16color_fade_functPh+0x40>
    2916:	e2 c0       	rjmp	.+452    	; 0x2adc <_Z16color_fade_functPh+0x204>
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    2918:	41 30       	cpi	r20, 0x01	; 1
    291a:	09 f4       	brne	.+2      	; 0x291e <_Z16color_fade_functPh+0x46>
    291c:	cb c0       	rjmp	.+406    	; 0x2ab4 <_Z16color_fade_functPh+0x1dc>
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	09 f4       	brne	.+2      	; 0x2924 <_Z16color_fade_functPh+0x4c>
    2922:	b4 c0       	rjmp	.+360    	; 0x2a8c <_Z16color_fade_functPh+0x1b4>

        smer[0] == -1 && tr_r < mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL;
    2924:	5f 3f       	cpi	r21, 0xFF	; 255
    2926:	09 f4       	brne	.+2      	; 0x292a <_Z16color_fade_functPh+0x52>
    2928:	99 c0       	rjmp	.+306    	; 0x2a5c <_Z16color_fade_functPh+0x184>
        smer[1] == -1 && tr_z < mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    292a:	4f 3f       	cpi	r20, 0xFF	; 255
    292c:	09 f4       	brne	.+2      	; 0x2930 <_Z16color_fade_functPh+0x58>
    292e:	7e c0       	rjmp	.+252    	; 0x2a2c <_Z16color_fade_functPh+0x154>
        smer[2] == -1 && tr_m < mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    2930:	8f 3f       	cpi	r24, 0xFF	; 255
    2932:	09 f4       	brne	.+2      	; 0x2936 <_Z16color_fade_functPh+0x5e>
    2934:	63 c0       	rjmp	.+198    	; 0x29fc <_Z16color_fade_functPh+0x124>

        writeTRAK();
    2936:	21 df       	rcall	.-446    	; 0x277a <_Z9writeTRAKv>
        delay_FRTOS(5);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    }
}

void color_fade_funct(uint8_t *BARVA)
{
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    2940:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <AUSYS_vars+0x2>
    2944:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <AUSYS_vars+0x3>
    2948:	e8 81       	ld	r30, Y
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	ee 0f       	add	r30, r30
    294e:	ff 1f       	adc	r31, r31
    2950:	ec 5b       	subi	r30, 0xBC	; 188
    2952:	fc 4f       	sbci	r31, 0xFC	; 252
    2954:	01 90       	ld	r0, Z+
    2956:	f0 81       	ld	r31, Z
    2958:	e0 2d       	mov	r30, r0
    295a:	80 81       	ld	r24, Z
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	28 17       	cp	r18, r24
    2960:	39 07       	cpc	r19, r25
    2962:	39 f1       	breq	.+78     	; 0x29b2 <_Z16color_fade_functPh+0xda>
    2964:	61 81       	ldd	r22, Z+1	; 0x01
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <AUSYS_vars+0x4>
    296c:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <AUSYS_vars+0x5>
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
    2970:	82 17       	cp	r24, r18
    2972:	93 07       	cpc	r25, r19
    2974:	3c f5       	brge	.+78     	; 0x29c4 <_Z16color_fade_functPh+0xec>
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <AUSYS_vars+0x6>
    297e:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <AUSYS_vars+0x7>
    2982:	e6 ef       	ldi	r30, 0xF6	; 246
    2984:	ff ef       	ldi	r31, 0xFF	; 255
    2986:	5f ef       	ldi	r21, 0xFF	; 255
        mozne_barve.barvni_ptr[*BARVA][1] >= tr_z ? smer[1] = 1 : smer[1] = -1;
    2988:	6a 17       	cp	r22, r26
    298a:	7b 07       	cpc	r23, r27
    298c:	6c f4       	brge	.+26     	; 0x29a8 <_Z16color_fade_functPh+0xd0>
    298e:	46 ef       	ldi	r20, 0xF6	; 246
    2990:	e4 2e       	mov	r14, r20
    2992:	ff 24       	eor	r15, r15
    2994:	fa 94       	dec	r15
    2996:	4f ef       	ldi	r20, 0xFF	; 255
        mozne_barve.barvni_ptr[*BARVA][2] >= tr_m ? smer[2] = 1 : smer[2] = -1;
    2998:	80 17       	cp	r24, r16
    299a:	91 07       	cpc	r25, r17
    299c:	0c f0       	brlt	.+2      	; 0x29a0 <_Z16color_fade_functPh+0xc8>
    299e:	a4 cf       	rjmp	.-184    	; 0x28e8 <_Z16color_fade_functPh+0x10>
    29a0:	66 ef       	ldi	r22, 0xF6	; 246
    29a2:	7f ef       	ldi	r23, 0xFF	; 255
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	a3 cf       	rjmp	.-186    	; 0x28ee <_Z16color_fade_functPh+0x16>
{
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
        mozne_barve.barvni_ptr[*BARVA][1] >= tr_z ? smer[1] = 1 : smer[1] = -1;
    29a8:	6a e0       	ldi	r22, 0x0A	; 10
    29aa:	e6 2e       	mov	r14, r22
    29ac:	f1 2c       	mov	r15, r1
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	f3 cf       	rjmp	.-26     	; 0x2998 <_Z16color_fade_functPh+0xc0>
    }
}

void color_fade_funct(uint8_t *BARVA)
{
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    29b2:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <AUSYS_vars+0x4>
    29b6:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <AUSYS_vars+0x5>
    29ba:	61 81       	ldd	r22, Z+1	; 0x01
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	a6 17       	cp	r26, r22
    29c0:	b7 07       	cpc	r27, r23
    29c2:	51 f0       	breq	.+20     	; 0x29d8 <_Z16color_fade_functPh+0x100>
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <AUSYS_vars+0x6>
    29cc:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <AUSYS_vars+0x7>
        delay_FRTOS(125);
    }
}

void color_fade_funct(uint8_t *BARVA)
{
    29d0:	ea e0       	ldi	r30, 0x0A	; 10
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
    29d4:	51 e0       	ldi	r21, 0x01	; 1
    29d6:	d8 cf       	rjmp	.-80     	; 0x2988 <_Z16color_fade_functPh+0xb0>
    }
}

void color_fade_funct(uint8_t *BARVA)
{
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    29d8:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <AUSYS_vars+0x6>
    29dc:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <AUSYS_vars+0x7>
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	08 17       	cp	r16, r24
    29e6:	19 07       	cpc	r17, r25
    29e8:	09 f4       	brne	.+2      	; 0x29ec <_Z16color_fade_functPh+0x114>
    29ea:	8c c0       	rjmp	.+280    	; 0x2b04 <_Z16color_fade_functPh+0x22c>
    29ec:	ea e0       	ldi	r30, 0x0A	; 10
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
    29f0:	51 e0       	ldi	r21, 0x01	; 1
    29f2:	7a e0       	ldi	r23, 0x0A	; 10
    29f4:	e7 2e       	mov	r14, r23
    29f6:	f1 2c       	mov	r15, r1
        mozne_barve.barvni_ptr[*BARVA][1] >= tr_z ? smer[1] = 1 : smer[1] = -1;
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	ce cf       	rjmp	.-100    	; 0x2998 <_Z16color_fade_functPh+0xc0>
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;

        smer[0] == -1 && tr_r < mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL;
        smer[1] == -1 && tr_z < mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
        smer[2] == -1 && tr_m < mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    29fc:	e8 81       	ld	r30, Y
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	ee 0f       	add	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	ec 5b       	subi	r30, 0xBC	; 188
    2a06:	fc 4f       	sbci	r31, 0xFC	; 252
    2a08:	01 90       	ld	r0, Z+
    2a0a:	f0 81       	ld	r31, Z
    2a0c:	e0 2d       	mov	r30, r0
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <AUSYS_vars+0x6>
    2a16:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <AUSYS_vars+0x7>
    2a1a:	28 17       	cp	r18, r24
    2a1c:	39 07       	cpc	r19, r25
    2a1e:	0c f0       	brlt	.+2      	; 0x2a22 <_Z16color_fade_functPh+0x14a>
    2a20:	8a cf       	rjmp	.-236    	; 0x2936 <_Z16color_fade_functPh+0x5e>
    2a22:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <AUSYS_vars+0x7>
    2a26:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <AUSYS_vars+0x6>
    2a2a:	85 cf       	rjmp	.-246    	; 0x2936 <_Z16color_fade_functPh+0x5e>
        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;

        smer[0] == -1 && tr_r < mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL;
        smer[1] == -1 && tr_z < mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    2a2c:	e8 81       	ld	r30, Y
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	ee 0f       	add	r30, r30
    2a32:	ff 1f       	adc	r31, r31
    2a34:	ec 5b       	subi	r30, 0xBC	; 188
    2a36:	fc 4f       	sbci	r31, 0xFC	; 252
    2a38:	01 90       	ld	r0, Z+
    2a3a:	f0 81       	ld	r31, Z
    2a3c:	e0 2d       	mov	r30, r0
    2a3e:	21 81       	ldd	r18, Z+1	; 0x01
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <AUSYS_vars+0x4>
    2a46:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <AUSYS_vars+0x5>
    2a4a:	42 17       	cp	r20, r18
    2a4c:	53 07       	cpc	r21, r19
    2a4e:	0c f0       	brlt	.+2      	; 0x2a52 <_Z16color_fade_functPh+0x17a>
    2a50:	6f cf       	rjmp	.-290    	; 0x2930 <_Z16color_fade_functPh+0x58>
    2a52:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <AUSYS_vars+0x5>
    2a56:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <AUSYS_vars+0x4>
    2a5a:	6a cf       	rjmp	.-300    	; 0x2930 <_Z16color_fade_functPh+0x58>

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;

        smer[0] == -1 && tr_r < mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL;
    2a5c:	e8 81       	ld	r30, Y
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ec 5b       	subi	r30, 0xBC	; 188
    2a66:	fc 4f       	sbci	r31, 0xFC	; 252
    2a68:	01 90       	ld	r0, Z+
    2a6a:	f0 81       	ld	r31, Z
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	20 81       	ld	r18, Z
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	60 91 56 03 	lds	r22, 0x0356	; 0x800356 <AUSYS_vars+0x2>
    2a76:	70 91 57 03 	lds	r23, 0x0357	; 0x800357 <AUSYS_vars+0x3>
    2a7a:	62 17       	cp	r22, r18
    2a7c:	73 07       	cpc	r23, r19
    2a7e:	0c f0       	brlt	.+2      	; 0x2a82 <_Z16color_fade_functPh+0x1aa>
    2a80:	54 cf       	rjmp	.-344    	; 0x292a <_Z16color_fade_functPh+0x52>
    2a82:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <AUSYS_vars+0x3>
    2a86:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <AUSYS_vars+0x2>
    2a8a:	4f cf       	rjmp	.-354    	; 0x292a <_Z16color_fade_functPh+0x52>

        //Preveri prenihaj:

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    2a8c:	e8 81       	ld	r30, Y
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	ec 5b       	subi	r30, 0xBC	; 188
    2a96:	fc 4f       	sbci	r31, 0xFC	; 252
    2a98:	01 90       	ld	r0, Z+
    2a9a:	f0 81       	ld	r31, Z
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	22 81       	ldd	r18, Z+2	; 0x02
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	26 17       	cp	r18, r22
    2aa4:	37 07       	cpc	r19, r23
    2aa6:	0c f0       	brlt	.+2      	; 0x2aaa <_Z16color_fade_functPh+0x1d2>
    2aa8:	3d cf       	rjmp	.-390    	; 0x2924 <_Z16color_fade_functPh+0x4c>
    2aaa:	30 93 5b 03 	sts	0x035B, r19	; 0x80035b <AUSYS_vars+0x7>
    2aae:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <AUSYS_vars+0x6>
    2ab2:	38 cf       	rjmp	.-400    	; 0x2924 <_Z16color_fade_functPh+0x4c>
        tr_m = tr_m + (10 * smer[2]);

        //Preveri prenihaj:

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    2ab4:	e8 81       	ld	r30, Y
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	ec 5b       	subi	r30, 0xBC	; 188
    2abe:	fc 4f       	sbci	r31, 0xFC	; 252
    2ac0:	01 90       	ld	r0, Z+
    2ac2:	f0 81       	ld	r31, Z
    2ac4:	e0 2d       	mov	r30, r0
    2ac6:	21 81       	ldd	r18, Z+1	; 0x01
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	2a 17       	cp	r18, r26
    2acc:	3b 07       	cpc	r19, r27
    2ace:	0c f0       	brlt	.+2      	; 0x2ad2 <_Z16color_fade_functPh+0x1fa>
    2ad0:	26 cf       	rjmp	.-436    	; 0x291e <_Z16color_fade_functPh+0x46>
    2ad2:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <AUSYS_vars+0x5>
    2ad6:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <AUSYS_vars+0x4>
    2ada:	21 cf       	rjmp	.-446    	; 0x291e <_Z16color_fade_functPh+0x46>
        tr_z = tr_z + (10 * smer[1]);
        tr_m = tr_m + (10 * smer[2]);

        //Preveri prenihaj:

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
    2adc:	e8 81       	ld	r30, Y
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	ec 5b       	subi	r30, 0xBC	; 188
    2ae6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ae8:	01 90       	ld	r0, Z+
    2aea:	f0 81       	ld	r31, Z
    2aec:	e0 2d       	mov	r30, r0
    2aee:	e0 81       	ld	r30, Z
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	e2 17       	cp	r30, r18
    2af4:	f3 07       	cpc	r31, r19
    2af6:	0c f0       	brlt	.+2      	; 0x2afa <_Z16color_fade_functPh+0x222>
    2af8:	0f cf       	rjmp	.-482    	; 0x2918 <_Z16color_fade_functPh+0x40>
    2afa:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <AUSYS_vars+0x3>
    2afe:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <AUSYS_vars+0x2>
    2b02:	0a cf       	rjmp	.-492    	; 0x2918 <_Z16color_fade_functPh+0x40>
        smer[2] == -1 && tr_m < mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;

        writeTRAK();
        delay_FRTOS(5);
    }
}
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	08 95       	ret

00002b12 <_Z18svetlost_mod_functch>:

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	f8 2e       	mov	r15, r24
    2b1e:	98 e0       	ldi	r25, 0x08	; 8
    2b20:	89 02       	muls	r24, r25
    2b22:	e0 01       	movw	r28, r0
    2b24:	11 24       	eor	r1, r1
    {
        tr_bright += 8 * smer;
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
        writeTRAK();
        delay_FRTOS(cas_krog);
    2b26:	26 2f       	mov	r18, r22
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	ae e3       	ldi	r26, 0x3E	; 62
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__umulhisi3>
    2b32:	28 ee       	ldi	r18, 0xE8	; 232
    2b34:	33 e0       	ldi	r19, 0x03	; 3
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__udivmodsi4>
    2b3e:	89 01       	movw	r16, r18
}

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{

    while (smer > 0 ? tr_bright < 255 : tr_bright > 0)
    2b40:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <AUSYS_vars+0x8>
    2b44:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <AUSYS_vars+0x9>
    2b48:	1f 14       	cp	r1, r15
    2b4a:	4c f4       	brge	.+18     	; 0x2b5e <_Z18svetlost_mod_functch+0x4c>
    2b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b4e:	91 05       	cpc	r25, r1
    2b50:	4c f0       	brlt	.+18     	; 0x2b64 <_Z18svetlost_mod_functch+0x52>
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
        writeTRAK();
        delay_FRTOS(cas_krog);
    }
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	08 95       	ret
}

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{

    while (smer > 0 ? tr_bright < 255 : tr_bright > 0)
    2b5e:	18 16       	cp	r1, r24
    2b60:	19 06       	cpc	r1, r25
    2b62:	bc f7       	brge	.-18     	; 0x2b52 <_Z18svetlost_mod_functch+0x40>
    {
        tr_bright += 8 * smer;
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
    2b64:	8c 0f       	add	r24, r28
    2b66:	9d 1f       	adc	r25, r29
    2b68:	97 fd       	sbrc	r25, 7
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <_Z18svetlost_mod_functch+0x78>
    2b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6e:	91 05       	cpc	r25, r1
    2b70:	19 f0       	breq	.+6      	; 0x2b78 <_Z18svetlost_mod_functch+0x66>
    2b72:	14 f0       	brlt	.+4      	; 0x2b78 <_Z18svetlost_mod_functch+0x66>
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <AUSYS_vars+0x9>
    2b7c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <AUSYS_vars+0x8>
        writeTRAK();
    2b80:	fc dd       	rcall	.-1032   	; 0x277a <_Z9writeTRAKv>
        delay_FRTOS(cas_krog);
    2b82:	c8 01       	movw	r24, r16
    2b84:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
}

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{

    while (smer > 0 ? tr_bright < 255 : tr_bright > 0)
    2b88:	db cf       	rjmp	.-74     	; 0x2b40 <_Z18svetlost_mod_functch+0x2e>
    {
        tr_bright += 8 * smer;
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	ee cf       	rjmp	.-36     	; 0x2b6c <_Z18svetlost_mod_functch+0x5a>

00002b90 <_Z14strip_mode_chgPc>:
    }
}

void strip_mode_chg(char *ch)
{
    if (ch == "off")
    2b90:	8d 55       	subi	r24, 0x5D	; 93
    2b92:	92 40       	sbci	r25, 0x02	; 2
    2b94:	19 f1       	breq	.+70     	; 0x2bdc <_Z14strip_mode_chgPc+0x4c>
        trenutni_audio_mode = OFF_A;

    else if (trenutni_audio_mode == OFF_A)
    2b96:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <AUSYS_vars>
    2b9a:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <AUSYS_vars+0x1>
    2b9e:	24 30       	cpi	r18, 0x04	; 4
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	b9 f0       	breq	.+46     	; 0x2bd2 <_Z14strip_mode_chgPc+0x42>
        trenutni_audio_mode = NORMAL_FADE;

    else
        trenutni_audio_mode = ++trenutni_audio_mode % LENGTH_2;
    2ba4:	a9 01       	movw	r20, r18
    2ba6:	4f 5f       	subi	r20, 0xFF	; 255
    2ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    2baa:	9a 01       	movw	r18, r20
    2bac:	ab ea       	ldi	r26, 0xAB	; 171
    2bae:	ba ea       	ldi	r27, 0xAA	; 170
    2bb0:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <__umulhisi3>
    2bb4:	96 95       	lsr	r25
    2bb6:	87 95       	ror	r24
    2bb8:	9c 01       	movw	r18, r24
    2bba:	22 0f       	add	r18, r18
    2bbc:	33 1f       	adc	r19, r19
    2bbe:	82 0f       	add	r24, r18
    2bc0:	93 1f       	adc	r25, r19
    2bc2:	9a 01       	movw	r18, r20
    2bc4:	28 1b       	sub	r18, r24
    2bc6:	39 0b       	sbc	r19, r25
    2bc8:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <AUSYS_vars+0x1>
    2bcc:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <AUSYS_vars>
    //EEPROM.write(audiomode_eeprom_addr, trenutni_audio_mode);
    deleteALL_subAUDIO_tasks();
    2bd0:	a0 cd       	rjmp	.-1216   	; 0x2712 <_Z24deleteALL_subAUDIO_tasksv>
{
    if (ch == "off")
        trenutni_audio_mode = OFF_A;

    else if (trenutni_audio_mode == OFF_A)
        trenutni_audio_mode = NORMAL_FADE;
    2bd2:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <AUSYS_vars+0x1>
    2bd6:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <AUSYS_vars>

    else
        trenutni_audio_mode = ++trenutni_audio_mode % LENGTH_2;
    //EEPROM.write(audiomode_eeprom_addr, trenutni_audio_mode);
    deleteALL_subAUDIO_tasks();
    2bda:	9b cd       	rjmp	.-1226   	; 0x2712 <_Z24deleteALL_subAUDIO_tasksv>
}

void strip_mode_chg(char *ch)
{
    if (ch == "off")
        trenutni_audio_mode = OFF_A;
    2bdc:	84 e0       	ldi	r24, 0x04	; 4
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <AUSYS_vars+0x1>
    2be4:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <AUSYS_vars>
        trenutni_audio_mode = NORMAL_FADE;

    else
        trenutni_audio_mode = ++trenutni_audio_mode % LENGTH_2;
    //EEPROM.write(audiomode_eeprom_addr, trenutni_audio_mode);
    deleteALL_subAUDIO_tasks();
    2be8:	94 cd       	rjmp	.-1240   	; 0x2712 <_Z24deleteALL_subAUDIO_tasksv>

00002bea <_Z9fade_taskPv>:
*                                                                                                                         *
*                                                         FADE TASKI                                                      *
*                                                                                                                         *
**************************************************************************************************************************/
void fade_task(void *BARVA) //Prizig na barbi in pocasen izklop
{
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    tr_bright = 255;
    2bf0:	a4 e5       	ldi	r26, 0x54	; 84
    2bf2:	b3 e0       	ldi	r27, 0x03	; 3
    2bf4:	8f ef       	ldi	r24, 0xFF	; 255
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	19 96       	adiw	r26, 0x09	; 9
    2bfa:	9c 93       	st	X, r25
    2bfc:	8e 93       	st	-X, r24
    2bfe:	18 97       	sbiw	r26, 0x08	; 8
    nastavi_barve(BARVA);
    2c00:	e8 81       	ld	r30, Y
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	ee 0f       	add	r30, r30
    2c06:	ff 1f       	adc	r31, r31
    2c08:	ec 5b       	subi	r30, 0xBC	; 188
    2c0a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c0c:	01 90       	ld	r0, Z+
    2c0e:	f0 81       	ld	r31, Z
    2c10:	e0 2d       	mov	r30, r0
    2c12:	80 81       	ld	r24, Z
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	13 96       	adiw	r26, 0x03	; 3
    2c18:	9c 93       	st	X, r25
    2c1a:	8e 93       	st	-X, r24
    2c1c:	12 97       	sbiw	r26, 0x02	; 2
    2c1e:	e8 81       	ld	r30, Y
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	ee 0f       	add	r30, r30
    2c24:	ff 1f       	adc	r31, r31
    2c26:	ec 5b       	subi	r30, 0xBC	; 188
    2c28:	fc 4f       	sbci	r31, 0xFC	; 252
    2c2a:	01 90       	ld	r0, Z+
    2c2c:	f0 81       	ld	r31, Z
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	81 81       	ldd	r24, Z+1	; 0x01
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	15 96       	adiw	r26, 0x05	; 5
    2c36:	9c 93       	st	X, r25
    2c38:	8e 93       	st	-X, r24
    2c3a:	14 97       	sbiw	r26, 0x04	; 4
    2c3c:	e8 81       	ld	r30, Y
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	ee 0f       	add	r30, r30
    2c42:	ff 1f       	adc	r31, r31
    2c44:	ec 5b       	subi	r30, 0xBC	; 188
    2c46:	fc 4f       	sbci	r31, 0xFC	; 252
    2c48:	01 90       	ld	r0, Z+
    2c4a:	f0 81       	ld	r31, Z
    2c4c:	e0 2d       	mov	r30, r0
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	17 96       	adiw	r26, 0x07	; 7
    2c54:	9c 93       	st	X, r25
    2c56:	8e 93       	st	-X, r24
    2c58:	16 97       	sbiw	r26, 0x06	; 6

    brightDOWN(15);
    2c5a:	6f e0       	ldi	r22, 0x0F	; 15
    2c5c:	8f ef       	ldi	r24, 0xFF	; 255
    2c5e:	59 df       	rcall	.-334    	; 0x2b12 <_Z18svetlost_mod_functch>

    fade_control = NULL;
    2c60:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <fade_control+0x1>
    2c64:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <fade_control>
    vTaskDelete(NULL);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
}
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    nastavi_barve(BARVA);

    brightDOWN(15);

    fade_control = NULL;
    vTaskDelete(NULL);
    2c70:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <vTaskDelete>

00002c74 <_Z15Color_Fade_taskPv>:
}

void Color_Fade_task(void *BARVA) //Fade iz ene barve v drugo
{

    if (Breathe_control == NULL) // Ce diha on ne sme nastaviti svetlosti,
    2c74:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <Breathe_control>
    2c78:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <Breathe_control+0x1>
    2c7c:	23 2b       	or	r18, r19
    2c7e:	49 f0       	breq	.+18     	; 0x2c92 <_Z15Color_Fade_taskPv+0x1e>
    {                            // saj jo nastavlja dihalni task
        tr_bright = 255;
    }

    colorSHIFT(BARVA); //prehod iz ene barve v drugo
    2c80:	2b de       	rcall	.-938    	; 0x28d8 <_Z16color_fade_functPh>
    color_fade_control = NULL;
    2c82:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <color_fade_control+0x1>
    2c86:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <color_fade_control>
    vTaskDelete(NULL);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <vTaskDelete>
void Color_Fade_task(void *BARVA) //Fade iz ene barve v drugo
{

    if (Breathe_control == NULL) // Ce diha on ne sme nastaviti svetlosti,
    {                            // saj jo nastavlja dihalni task
        tr_bright = 255;
    2c92:	2f ef       	ldi	r18, 0xFF	; 255
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	30 93 5d 03 	sts	0x035D, r19	; 0x80035d <AUSYS_vars+0x9>
    2c9a:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <AUSYS_vars+0x8>
    2c9e:	f0 cf       	rjmp	.-32     	; 0x2c80 <_Z15Color_Fade_taskPv+0xc>

00002ca0 <_Z17Fade_Breathe_TaskPv>:
    vTaskDelete(NULL);
}

void Fade_Breathe_Task(void *BARVA)
{
    if (color_fade_control == NULL)
    2ca0:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <color_fade_control>
    2ca4:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <color_fade_control+0x1>
    2ca8:	23 2b       	or	r18, r19
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <_Z17Fade_Breathe_TaskPv+0x28>
    {
        nastavi_barve(BARVA);
    }
    brightUP(7);
    2cac:	67 e0       	ldi	r22, 0x07	; 7
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	30 df       	rcall	.-416    	; 0x2b12 <_Z18svetlost_mod_functch>
    brightDOWN(7);
    2cb2:	67 e0       	ldi	r22, 0x07	; 7
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	2d df       	rcall	.-422    	; 0x2b12 <_Z18svetlost_mod_functch>
    Breathe_control = NULL;
    2cb8:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Breathe_control+0x1>
    2cbc:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Breathe_control>
    vTaskDelete(NULL);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <vTaskDelete>

void Fade_Breathe_Task(void *BARVA)
{
    if (color_fade_control == NULL)
    {
        nastavi_barve(BARVA);
    2cc8:	dc 01       	movw	r26, r24
    2cca:	ec 91       	ld	r30, X
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	ec 5b       	subi	r30, 0xBC	; 188
    2cd4:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd6:	01 90       	ld	r0, Z+
    2cd8:	f0 81       	ld	r31, Z
    2cda:	e0 2d       	mov	r30, r0
    2cdc:	20 81       	ld	r18, Z
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <AUSYS_vars+0x3>
    2ce4:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <AUSYS_vars+0x2>
    2ce8:	ec 91       	ld	r30, X
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	ee 0f       	add	r30, r30
    2cee:	ff 1f       	adc	r31, r31
    2cf0:	ec 5b       	subi	r30, 0xBC	; 188
    2cf2:	fc 4f       	sbci	r31, 0xFC	; 252
    2cf4:	01 90       	ld	r0, Z+
    2cf6:	f0 81       	ld	r31, Z
    2cf8:	e0 2d       	mov	r30, r0
    2cfa:	21 81       	ldd	r18, Z+1	; 0x01
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	30 93 59 03 	sts	0x0359, r19	; 0x800359 <AUSYS_vars+0x5>
    2d02:	20 93 58 03 	sts	0x0358, r18	; 0x800358 <AUSYS_vars+0x4>
    2d06:	ec 91       	ld	r30, X
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	ec 5b       	subi	r30, 0xBC	; 188
    2d10:	fc 4f       	sbci	r31, 0xFC	; 252
    2d12:	01 90       	ld	r0, Z+
    2d14:	f0 81       	ld	r31, Z
    2d16:	e0 2d       	mov	r30, r0
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <AUSYS_vars+0x7>
    2d20:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <AUSYS_vars+0x6>
    2d24:	c3 cf       	rjmp	.-122    	; 0x2cac <_Z17Fade_Breathe_TaskPv+0xc>

00002d26 <_Z8Shutdownv>:
	}
}

void Shutdown()
{
	writeOUTPUT(_12V_line, 'B', 0); // izklopi izhod
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	62 e4       	ldi	r22, 0x42	; 66
    2d2a:	87 e0       	ldi	r24, 0x07	; 7
    2d2c:	ca d2       	rcall	.+1428   	; 0x32c2 <_Z11writeOUTPUThcb>
	writeOUTPUT(main_mosfet_pin, 'H', 0);
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	68 e4       	ldi	r22, 0x48	; 72
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	c6 d2       	rcall	.+1420   	; 0x32c2 <_Z11writeOUTPUThcb>
	Hardware.is_Powered_UP = false;
    2d36:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <Hardware+0x8>
	trenutni_audio_mode = OFF_A;
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <AUSYS_vars+0x1>
    2d42:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <AUSYS_vars>
    2d46:	08 95       	ret

00002d48 <_Z8Power_UPv>:
}

void Power_UP()
{
	// trenutni_audio_mode = EEPROM.read(audiomode_eeprom_addr);
	writeOUTPUT(_12V_line, 'B', 1); // izklopi izhod
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	62 e4       	ldi	r22, 0x42	; 66
    2d4c:	87 e0       	ldi	r24, 0x07	; 7
    2d4e:	b9 d2       	rcall	.+1394   	; 0x32c2 <_Z11writeOUTPUThcb>
	writeOUTPUT(main_mosfet_pin, 'H', 1);
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	68 e4       	ldi	r22, 0x48	; 72
    2d54:	83 e0       	ldi	r24, 0x03	; 3
    2d56:	b5 d2       	rcall	.+1386   	; 0x32c2 <_Z11writeOUTPUThcb>
	Hardware.is_Powered_UP = true;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <Hardware+0x8>
    2d5e:	08 95       	ret

00002d60 <_Z4corePv>:
void core(void *paramOdTaska)
{

	while (true)
	{
		if (stikalo.vrednost() == 0 && Timers.stikaloOFFtime.vrednost() > 30)
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	93 e0       	ldi	r25, 0x03	; 3
    2d64:	a7 d4       	rcall	.+2382   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    2d66:	88 23       	and	r24, r24
    2d68:	69 f1       	breq	.+90     	; 0x2dc4 <_Z4corePv+0x64>
			if (stikalo.fallingEdge())
			{
				Hardware.AMP_oheat = false;
			}
		}
		else if (stikalo.vrednost() == 1)
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	93 e0       	ldi	r25, 0x03	; 3
    2d6e:	a2 d4       	rcall	.+2372   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    2d70:	81 11       	cpse	r24, r1
    2d72:	7f c0       	rjmp	.+254    	; 0x2e72 <_Z4corePv+0x112>
		*                                      BRANJE VOLT                                            *
		*                                                                                             *
		*                                                                                             *
		***********************************************************************************************/

		if (xSemaphoreTake(voltage_SEM, portMAX_DELAY) == pdTRUE) // Vzame dostop do napetostnega semaforja -> ostali taski ne morajo brati napetosti
    2d74:	6f ef       	ldi	r22, 0xFF	; 255
    2d76:	7f ef       	ldi	r23, 0xFF	; 255
    2d78:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltage_SEM>
    2d7c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <voltage_SEM+0x1>
    2d80:	0e 94 6e 05 	call	0xadc	; 0xadc <xQueueSemaphoreTake>
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <_Z4corePv+0x2a>
    2d88:	5f c0       	rjmp	.+190    	; 0x2e48 <_Z4corePv+0xe8>
		}

		//----------------------------------------------------------------------------------------------------------------------------------
		//                                               Power UP
		//----------------------------------------------------------------------------------------------------------------------------------
		if (Timers.stikaloCAS.vrednost() >= 2000 && !Hardware.AMP_oheat && (Hardware.napetost > sleep_voltage + 50 || Hardware.PSW) && !Hardware.is_Powered_UP)
    2d8a:	8e e5       	ldi	r24, 0x5E	; 94
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2d92:	60 3d       	cpi	r22, 0xD0	; 208
    2d94:	77 40       	sbci	r23, 0x07	; 7
    2d96:	81 05       	cpc	r24, r1
    2d98:	91 05       	cpc	r25, r1
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <_Z4corePv+0x44>
    2d9c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <Hardware+0xc>
    2da0:	88 23       	and	r24, r24
    2da2:	51 f1       	breq	.+84     	; 0x2df8 <_Z4corePv+0x98>
    2da4:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Hardware+0x12>
    2da8:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <Hardware+0x13>
		{ // Elapsed 2000 ms, not overheated, enough power or (already switched to)external power and not already powered up
			Power_UP();
		}
		if (Hardware.napetost <= sleep_voltage && napajalnik.vrednost() == 0 && Hardware.napetost != 0 && !Hardware.is_Powered_UP) //Če je napetost 0V, to pomeni da baterij še ni prebral ; V spanje gre pri 8% napolnjenosti
    2dac:	85 3e       	cpi	r24, 0xE5	; 229
    2dae:	9c 40       	sbci	r25, 0x0C	; 12
    2db0:	88 f1       	brcs	.+98     	; 0x2e14 <_Z4corePv+0xb4>
		{
			Shutdown();
		}
		delay_FRTOS(200);
    2db2:	8c e0       	ldi	r24, 0x0C	; 12
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
void core(void *paramOdTaska)
{

	while (true)
	{
		if (stikalo.vrednost() == 0 && Timers.stikaloOFFtime.vrednost() > 30)
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	93 e0       	ldi	r25, 0x03	; 3
    2dbe:	7a d4       	rcall	.+2292   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    2dc0:	81 11       	cpse	r24, r1
    2dc2:	d3 cf       	rjmp	.-90     	; 0x2d6a <_Z4corePv+0xa>
    2dc4:	8d e6       	ldi	r24, 0x6D	; 109
    2dc6:	93 e0       	ldi	r25, 0x03	; 3
    2dc8:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2dcc:	6f 31       	cpi	r22, 0x1F	; 31
    2dce:	71 05       	cpc	r23, r1
    2dd0:	81 05       	cpc	r24, r1
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	50 f2       	brcs	.-108    	; 0x2d6a <_Z4corePv+0xa>
		{
			if (Hardware.is_Powered_UP)
    2dd6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Hardware+0x8>
    2dda:	81 11       	cpse	r24, r1
    2ddc:	2d c0       	rjmp	.+90     	; 0x2e38 <_Z4corePv+0xd8>
			{
				Shutdown();
			}
			Timers.stikaloCAS.ponastavi();
    2dde:	8e e5       	ldi	r24, 0x5E	; 94
    2de0:	93 e0       	ldi	r25, 0x03	; 3
    2de2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
			if (stikalo.fallingEdge())
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	93 e0       	ldi	r25, 0x03	; 3
    2dea:	95 d4       	rcall	.+2346   	; 0x3716 <_ZN4VHOD11fallingEdgeEv>
    2dec:	88 23       	and	r24, r24
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <_Z4corePv+0x92>
    2df0:	c1 cf       	rjmp	.-126    	; 0x2d74 <_Z4corePv+0x14>
			{
				Hardware.AMP_oheat = false;
    2df2:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <Hardware+0xc>
    2df6:	be cf       	rjmp	.-132    	; 0x2d74 <_Z4corePv+0x14>
		}

		//----------------------------------------------------------------------------------------------------------------------------------
		//                                               Power UP
		//----------------------------------------------------------------------------------------------------------------------------------
		if (Timers.stikaloCAS.vrednost() >= 2000 && !Hardware.AMP_oheat && (Hardware.napetost > sleep_voltage + 50 || Hardware.PSW) && !Hardware.is_Powered_UP)
    2df8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Hardware+0x12>
    2dfc:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <Hardware+0x13>
    2e00:	87 31       	cpi	r24, 0x17	; 23
    2e02:	2d e0       	ldi	r18, 0x0D	; 13
    2e04:	92 07       	cpc	r25, r18
    2e06:	d0 f0       	brcs	.+52     	; 0x2e3c <_Z4corePv+0xdc>
    2e08:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <Hardware+0x8>
    2e0c:	21 11       	cpse	r18, r1
		{ // Elapsed 2000 ms, not overheated, enough power or (already switched to)external power and not already powered up
			Power_UP();
    2e0e:	ce cf       	rjmp	.-100    	; 0x2dac <_Z4corePv+0x4c>
    2e10:	9b df       	rcall	.-202    	; 0x2d48 <_Z8Power_UPv>
		}
		if (Hardware.napetost <= sleep_voltage && napajalnik.vrednost() == 0 && Hardware.napetost != 0 && !Hardware.is_Powered_UP) //Če je napetost 0V, to pomeni da baterij še ni prebral ; V spanje gre pri 8% napolnjenosti
    2e12:	c8 cf       	rjmp	.-112    	; 0x2da4 <_Z4corePv+0x44>
    2e14:	8b e0       	ldi	r24, 0x0B	; 11
    2e16:	93 e0       	ldi	r25, 0x03	; 3
    2e18:	4d d4       	rcall	.+2202   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	ca cf       	rjmp	.-108    	; 0x2db2 <_Z4corePv+0x52>
    2e1e:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Hardware+0x12>
    2e22:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <Hardware+0x13>
    2e26:	89 2b       	or	r24, r25
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <_Z4corePv+0xcc>
    2e2a:	c3 cf       	rjmp	.-122    	; 0x2db2 <_Z4corePv+0x52>
    2e2c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Hardware+0x8>
		{
			Shutdown();
    2e30:	81 11       	cpse	r24, r1
    2e32:	bf cf       	rjmp	.-130    	; 0x2db2 <_Z4corePv+0x52>
    2e34:	78 df       	rcall	.-272    	; 0x2d26 <_Z8Shutdownv>
	{
		if (stikalo.vrednost() == 0 && Timers.stikaloOFFtime.vrednost() > 30)
		{
			if (Hardware.is_Powered_UP)
			{
				Shutdown();
    2e36:	bd cf       	rjmp	.-134    	; 0x2db2 <_Z4corePv+0x52>
    2e38:	76 df       	rcall	.-276    	; 0x2d26 <_Z8Shutdownv>
    2e3a:	d1 cf       	rjmp	.-94     	; 0x2dde <_Z4corePv+0x7e>
		}

		//----------------------------------------------------------------------------------------------------------------------------------
		//                                               Power UP
		//----------------------------------------------------------------------------------------------------------------------------------
		if (Timers.stikaloCAS.vrednost() >= 2000 && !Hardware.AMP_oheat && (Hardware.napetost > sleep_voltage + 50 || Hardware.PSW) && !Hardware.is_Powered_UP)
    2e3c:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <Hardware+0x9>
    2e40:	22 23       	and	r18, r18
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <_Z4corePv+0xe6>
    2e44:	b3 cf       	rjmp	.-154    	; 0x2dac <_Z4corePv+0x4c>
    2e46:	e0 cf       	rjmp	.-64     	; 0x2e08 <_Z4corePv+0xa8>
		***********************************************************************************************/

		if (xSemaphoreTake(voltage_SEM, portMAX_DELAY) == pdTRUE) // Vzame dostop do napetostnega semaforja -> ostali taski ne morajo brati napetosti
		{

			if (Timers.VOLT_timer.vrednost() > 500)
    2e48:	82 e7       	ldi	r24, 0x72	; 114
    2e4a:	93 e0       	ldi	r25, 0x03	; 3
    2e4c:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    2e50:	65 3f       	cpi	r22, 0xF5	; 245
    2e52:	71 40       	sbci	r23, 0x01	; 1
    2e54:	81 05       	cpc	r24, r1
    2e56:	91 05       	cpc	r25, r1
    2e58:	88 f4       	brcc	.+34     	; 0x2e7c <_Z4corePv+0x11c>
			{
				Timers.VOLT_timer.ponastavi();
				Hardware.napetost = readANALOG(vDIV_pin) * (float)Hardware.REF_mVOLT / 1023.00f;
			}

			xSemaphoreGive(voltage_SEM); // Da zeleno luc ostalim taskom
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltage_SEM>
    2e68:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <voltage_SEM+0x1>
    2e6c:	0e 94 12 04 	call	0x824	; 0x824 <xQueueGenericSend>
    2e70:	8c cf       	rjmp	.-232    	; 0x2d8a <_Z4corePv+0x2a>
				Hardware.AMP_oheat = false;
			}
		}
		else if (stikalo.vrednost() == 1)
		{
			Timers.stikaloOFFtime.ponastavi();
    2e72:	8d e6       	ldi	r24, 0x6D	; 109
    2e74:	93 e0       	ldi	r25, 0x03	; 3
    2e76:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
		if (xSemaphoreTake(voltage_SEM, portMAX_DELAY) == pdTRUE) // Vzame dostop do napetostnega semaforja -> ostali taski ne morajo brati napetosti
		{

			if (Timers.VOLT_timer.vrednost() > 500)
			{
				Timers.VOLT_timer.ponastavi();
    2e7a:	7c cf       	rjmp	.-264    	; 0x2d74 <_Z4corePv+0x14>
    2e7c:	82 e7       	ldi	r24, 0x72	; 114
    2e7e:	93 e0       	ldi	r25, 0x03	; 3
				Hardware.napetost = readANALOG(vDIV_pin) * (float)Hardware.REF_mVOLT / 1023.00f;
    2e80:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	70 d2       	rcall	.+1248   	; 0x3368 <_Z10readANALOGh>
    2e88:	bc 01       	movw	r22, r24
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	4e d5       	rcall	.+2716   	; 0x392c <__floatunsisf>
    2e90:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <Hardware>
    2e94:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <Hardware+0x1>
    2e98:	40 91 8d 03 	lds	r20, 0x038D	; 0x80038d <Hardware+0x2>
    2e9c:	50 91 8e 03 	lds	r21, 0x038E	; 0x80038e <Hardware+0x3>
    2ea0:	d7 d5       	rcall	.+2990   	; 0x3a50 <__mulsf3>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 ec       	ldi	r19, 0xC0	; 192
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	54 e4       	ldi	r21, 0x44	; 68
    2eaa:	ac d4       	rcall	.+2392   	; 0x3804 <__divsf3>
    2eac:	13 d5       	rcall	.+2598   	; 0x38d4 <__fixunssfsi>
    2eae:	70 93 9e 03 	sts	0x039E, r23	; 0x80039e <Hardware+0x13>
    2eb2:	60 93 9d 03 	sts	0x039D, r22	; 0x80039d <Hardware+0x12>
    2eb6:	d1 cf       	rjmp	.-94     	; 0x2e5a <_Z4corePv+0xfa>

00002eb8 <_GLOBAL__sub_I_napajalnik>:
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    2eb8:	eb e0       	ldi	r30, 0x0B	; 11
    2eba:	f3 e0       	ldi	r31, 0x03	; 3
    2ebc:	84 e4       	ldi	r24, 0x44	; 68
    2ebe:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    2ec0:	22 e0       	ldi	r18, 0x02	; 2
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	35 83       	std	Z+5, r19	; 0x05
    2ec6:	24 83       	std	Z+4, r18	; 0x04
        this->default_state = default_state;
    2ec8:	10 86       	std	Z+8, r1	; 0x08
    2eca:	17 82       	std	Z+7, r1	; 0x07
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    2ecc:	e2 e0       	ldi	r30, 0x02	; 2
    2ece:	f3 e0       	ldi	r31, 0x03	; 3
    2ed0:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    2ed2:	84 e0       	ldi	r24, 0x04	; 4
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	95 83       	std	Z+5, r25	; 0x05
    2ed8:	84 83       	std	Z+4, r24	; 0x04
        this->default_state = default_state;
    2eda:	10 86       	std	Z+8, r1	; 0x08
    2edc:	17 82       	std	Z+7, r1	; 0x07
    2ede:	08 95       	ret

00002ee0 <_Z4exitv>:
    colorSHIFT(&evnt_st.menu_seek);
// Prikaze element v seeku ce je scroll aktiven

void exit()
{
    evnt_st.state = unset;
    2ee0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <evnt_st>
    evnt_st.menu_seek = TOGGLE_LCD;
    2ee4:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <evnt_st+0x1>
    evnt_st.longPRESS = true;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <evnt_st+0xe>
    flash_strip();
    2eee:	bd dc       	rcall	.-1670   	; 0x286a <_Z11flash_stripv>
    evnt_st.state_exit_timer.ponastavi();
    2ef0:	8f e1       	ldi	r24, 0x1F	; 31
    2ef2:	93 e0       	ldi	r25, 0x03	; 3
    2ef4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    tr_bright = 255;
    2ef8:	8f ef       	ldi	r24, 0xFF	; 255
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <AUSYS_vars+0x9>
    2f00:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <AUSYS_vars+0x8>
    brightDOWN(15);
    2f04:	6f e0       	ldi	r22, 0x0F	; 15
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	04 de       	rcall	.-1016   	; 0x2b12 <_Z18svetlost_mod_functch>
    delay_FRTOS(500);
    2f0a:	8f e1       	ldi	r24, 0x1F	; 31
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    resumeTASK(audio_system_control);
    2f12:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    2f16:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    2f1a:	0e 94 bf 08 	call	0x117e	; 0x117e <eTaskGetState>
    2f1e:	83 30       	cpi	r24, 0x03	; 3
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <_Z4exitv+0x44>
    2f22:	08 95       	ret
    2f24:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    2f28:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	c9 f3       	breq	.-14     	; 0x2f22 <_Z4exitv+0x42>
    2f30:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <vTaskResume>

00002f34 <_Z24external_power_switch_evv>:
    }
}

void external_power_switch_ev()
{
    taskENTER_CRITICAL();
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	0f 92       	push	r0
    Shutdown();
    2f3a:	f5 de       	rcall	.-534    	; 0x2d26 <_Z8Shutdownv>
    2f3c:	2f ef       	ldi	r18, 0xFF	; 255
    2f3e:	89 ef       	ldi	r24, 0xF9	; 249
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	21 50       	subi	r18, 0x01	; 1
    2f44:	80 40       	sbci	r24, 0x00	; 0
    2f46:	90 40       	sbci	r25, 0x00	; 0
    2f48:	e1 f7       	brne	.-8      	; 0x2f42 <_Z24external_power_switch_evv+0xe>
    2f4a:	00 c0       	rjmp	.+0      	; 0x2f4c <_Z24external_power_switch_evv+0x18>
    2f4c:	00 00       	nop
    _delay_ms(20);
    PORTD |= (1 << 7);
    2f4e:	5f 9a       	sbi	0x0b, 7	; 11
    Timers.stikaloCAS.ponastavi();
    2f50:	8e e5       	ldi	r24, 0x5E	; 94
    2f52:	93 e0       	ldi	r25, 0x03	; 3
    2f54:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    2f58:	2f ef       	ldi	r18, 0xFF	; 255
    2f5a:	89 ef       	ldi	r24, 0xF9	; 249
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	21 50       	subi	r18, 0x01	; 1
    2f60:	80 40       	sbci	r24, 0x00	; 0
    2f62:	90 40       	sbci	r25, 0x00	; 0
    2f64:	e1 f7       	brne	.-8      	; 0x2f5e <_Z24external_power_switch_evv+0x2a>
    2f66:	00 c0       	rjmp	.+0      	; 0x2f68 <_Z24external_power_switch_evv+0x34>
    2f68:	00 00       	nop
    _delay_ms(20);
    Hardware.PSW = true;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <Hardware+0x9>
    taskEXIT_CRITICAL();
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	08 95       	ret

00002f76 <_Z24internal_power_switch_evv>:
}

void internal_power_switch_ev()
{
    taskENTER_CRITICAL();
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	0f 92       	push	r0
    Shutdown();
    2f7c:	d4 de       	rcall	.-600    	; 0x2d26 <_Z8Shutdownv>
    2f7e:	2f ef       	ldi	r18, 0xFF	; 255
    2f80:	89 ef       	ldi	r24, 0xF9	; 249
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	21 50       	subi	r18, 0x01	; 1
    2f86:	80 40       	sbci	r24, 0x00	; 0
    2f88:	90 40       	sbci	r25, 0x00	; 0
    2f8a:	e1 f7       	brne	.-8      	; 0x2f84 <_Z24internal_power_switch_evv+0xe>
    2f8c:	00 c0       	rjmp	.+0      	; 0x2f8e <_Z24internal_power_switch_evv+0x18>
    2f8e:	00 00       	nop
    _delay_ms(20);
    PORTD &= ~(1 << 7);
    2f90:	5f 98       	cbi	0x0b, 7	; 11
    Timers.stikaloCAS.ponastavi();
    2f92:	8e e5       	ldi	r24, 0x5E	; 94
    2f94:	93 e0       	ldi	r25, 0x03	; 3
    2f96:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    2f9a:	2f ef       	ldi	r18, 0xFF	; 255
    2f9c:	89 ef       	ldi	r24, 0xF9	; 249
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	21 50       	subi	r18, 0x01	; 1
    2fa2:	80 40       	sbci	r24, 0x00	; 0
    2fa4:	90 40       	sbci	r25, 0x00	; 0
    2fa6:	e1 f7       	brne	.-8      	; 0x2fa0 <_Z24internal_power_switch_evv+0x2a>
    2fa8:	00 c0       	rjmp	.+0      	; 0x2faa <_Z24internal_power_switch_evv+0x34>
    2faa:	00 00       	nop
    _delay_ms(20);
    Hardware.PSW = false;
    2fac:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <Hardware+0x9>
    taskEXIT_CRITICAL();
    2fb0:	0f 90       	pop	r0
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	08 95       	ret

00002fb6 <_Z6eventsPv>:
            {

            case unset:
                if (evnt_st.hold_timer.vrednost() > 1000)
                {
                    evnt_st.state = SCROLL;
    2fb6:	ff 24       	eor	r15, r15
    2fb8:	f3 94       	inc	r15
                    evnt_st.menu_seek = TOGGLE_LCD;
                    evnt_st.state_exit_timer.ponastavi();
                    evnt_st.hold_timer.ponastavi();
                    turnOFFstrip();
                    flash_strip();
                    show_scroll_Seek();
    2fba:	cf ef       	ldi	r28, 0xFF	; 255
    2fbc:	d0 e0       	ldi	r29, 0x00	; 0
                else if (evnt_st.hold_time > 0)
                {

                    if (evnt_st.hold_time < 500) //Kratek pritisk
                    {
                        evnt_st.menu_seek = (evnt_st.menu_seek + 1) % menu_seek_LEN;
    2fbe:	03 e0       	ldi	r16, 0x03	; 3
    2fc0:	10 e0       	ldi	r17, 0x00	; 0
    2fc2:	2d c0       	rjmp	.+90     	; 0x301e <_Z6eventsPv+0x68>

        /******************************************** SWITCH 2 EVENTS ****************************************/

        if (eventSW.vrednost())
        {
            Timers.SW2_off_timer.ponastavi(); // Filtrira lazne nepritiske
    2fc4:	87 e7       	ldi	r24, 0x77	; 119
    2fc6:	93 e0       	ldi	r25, 0x03	; 3
    2fc8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
        {
            evnt_st.longPRESS = false;
        }
        //
        //State machine
        if (Hardware.is_Powered_UP && !evnt_st.longPRESS)
    2fcc:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Hardware+0x8>
    2fd0:	88 23       	and	r24, r24
    2fd2:	21 f0       	breq	.+8      	; 0x2fdc <_Z6eventsPv+0x26>
    2fd4:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <evnt_st+0xe>
    2fd8:	88 23       	and	r24, r24
    2fda:	a9 f1       	breq	.+106    	; 0x3046 <_Z6eventsPv+0x90>
                break;
            }
        }

        /******************************** POWER SWITCH EVENTS ********************************/
        if (napajalnik.vrednost() && Hardware.PSW == false)
    2fdc:	8b e0       	ldi	r24, 0x0B	; 11
    2fde:	93 e0       	ldi	r25, 0x03	; 3
    2fe0:	69 d3       	rcall	.+1746   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    2fe2:	88 23       	and	r24, r24
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <_Z6eventsPv+0x32>
    2fe6:	6c c0       	rjmp	.+216    	; 0x30c0 <_Z6eventsPv+0x10a>
    2fe8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <Hardware+0x9>
    2fec:	81 11       	cpse	r24, r1
    2fee:	68 c0       	rjmp	.+208    	; 0x30c0 <_Z6eventsPv+0x10a>
    2ff0:	8f ef       	ldi	r24, 0xFF	; 255
    2ff2:	99 ef       	ldi	r25, 0xF9	; 249
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	81 50       	subi	r24, 0x01	; 1
    2ff8:	90 40       	sbci	r25, 0x00	; 0
    2ffa:	20 40       	sbci	r18, 0x00	; 0
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <_Z6eventsPv+0x40>
    2ffe:	00 c0       	rjmp	.+0      	; 0x3000 <_Z6eventsPv+0x4a>
        {
            _delay_ms(20);
            external_power_switch_ev();
    3000:	00 00       	nop
    3002:	98 df       	rcall	.-208    	; 0x2f34 <_Z24external_power_switch_evv>
    3004:	8f ef       	ldi	r24, 0xFF	; 255
    3006:	99 ef       	ldi	r25, 0xF9	; 249
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	81 50       	subi	r24, 0x01	; 1
    300c:	90 40       	sbci	r25, 0x00	; 0
    300e:	20 40       	sbci	r18, 0x00	; 0
    3010:	e1 f7       	brne	.-8      	; 0x300a <_Z6eventsPv+0x54>
    3012:	00 c0       	rjmp	.+0      	; 0x3014 <_Z6eventsPv+0x5e>
    3014:	00 00       	nop
        {
            _delay_ms(20);
            internal_power_switch_ev();
            _delay_ms(20);
        }
        delay_FRTOS(30);
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
    while (true)
    {

        /******************************************** SWITCH 2 EVENTS ****************************************/

        if (eventSW.vrednost())
    301e:	84 e1       	ldi	r24, 0x14	; 20
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	48 d3       	rcall	.+1680   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    3024:	81 11       	cpse	r24, r1
    3026:	ce cf       	rjmp	.-100    	; 0x2fc4 <_Z6eventsPv+0xe>
        {
            Timers.SW2_off_timer.ponastavi(); // Filtrira lazne nepritiske
        }
        else if (Timers.SW2_off_timer.vrednost() > 50)
    3028:	87 e7       	ldi	r24, 0x77	; 119
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    3030:	63 33       	cpi	r22, 0x33	; 51
    3032:	71 05       	cpc	r23, r1
    3034:	81 05       	cpc	r24, r1
    3036:	91 05       	cpc	r25, r1
    3038:	48 f2       	brcs	.-110    	; 0x2fcc <_Z6eventsPv+0x16>
        {
            evnt_st.longPRESS = false;
    303a:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <evnt_st+0xe>
        }
        //
        //State machine
        if (Hardware.is_Powered_UP && !evnt_st.longPRESS)
    303e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Hardware+0x8>
    3042:	88 23       	and	r24, r24
    3044:	59 f2       	breq	.-106    	; 0x2fdc <_Z6eventsPv+0x26>
        {
            switch (evnt_st.state)
    3046:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <evnt_st>
    304a:	88 23       	and	r24, r24
    304c:	09 f4       	brne	.+2      	; 0x3050 <_Z6eventsPv+0x9a>
    304e:	56 c0       	rjmp	.+172    	; 0x30fc <_Z6eventsPv+0x146>
    3050:	81 30       	cpi	r24, 0x01	; 1
    3052:	09 f0       	breq	.+2      	; 0x3056 <_Z6eventsPv+0xa0>
    3054:	c3 cf       	rjmp	.-122    	; 0x2fdc <_Z6eventsPv+0x26>
                    evnt_st.hold_timer.ponastavi();
                }
                break;

            case SCROLL:
                check_auto_exit(); //Macro to auto exit timer
    3056:	8f e1       	ldi	r24, 0x1F	; 31
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    305e:	61 37       	cpi	r22, 0x71	; 113
    3060:	77 41       	sbci	r23, 0x17	; 23
    3062:	81 05       	cpc	r24, r1
    3064:	91 05       	cpc	r25, r1
    3066:	08 f0       	brcs	.+2      	; 0x306a <_Z6eventsPv+0xb4>
                if (eventSW.vrednost())
    3068:	b1 c0       	rjmp	.+354    	; 0x31cc <_Z6eventsPv+0x216>
    306a:	84 e1       	ldi	r24, 0x14	; 20
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	22 d3       	rcall	.+1604   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    3070:	81 11       	cpse	r24, r1
    3072:	86 c0       	rjmp	.+268    	; 0x3180 <_Z6eventsPv+0x1ca>
                        }
                        evnt_st.hold_timer.ponastavi();
                    }
                }

                else if (evnt_st.hold_time > 0)
    3074:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <evnt_st+0xc>
    3078:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <evnt_st+0xd>
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	09 f4       	brne	.+2      	; 0x3082 <_Z6eventsPv+0xcc>
    3080:	ad cf       	rjmp	.-166    	; 0x2fdc <_Z6eventsPv+0x26>
                {

                    if (evnt_st.hold_time < 500) //Kratek pritisk
    3082:	84 3f       	cpi	r24, 0xF4	; 244
    3084:	91 40       	sbci	r25, 0x01	; 1
    3086:	40 f4       	brcc	.+16     	; 0x3098 <_Z6eventsPv+0xe2>
                    {
                        evnt_st.menu_seek = (evnt_st.menu_seek + 1) % menu_seek_LEN;
    3088:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <evnt_st+0x1>
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	b8 01       	movw	r22, r16
    3092:	65 d5       	rcall	.+2762   	; 0x3b5e <__divmodhi4>
    3094:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <evnt_st+0x1>
                    }
                    show_scroll_Seek();
    3098:	d0 93 5d 03 	sts	0x035D, r29	; 0x80035d <AUSYS_vars+0x9>
    309c:	c0 93 5c 03 	sts	0x035C, r28	; 0x80035c <AUSYS_vars+0x8>
    30a0:	8e e1       	ldi	r24, 0x1E	; 30
    30a2:	93 e0       	ldi	r25, 0x03	; 3
    30a4:	19 dc       	rcall	.-1998   	; 0x28d8 <_Z16color_fade_functPh>
                    evnt_st.hold_timer.ponastavi();
    30a6:	84 e2       	ldi	r24, 0x24	; 36
    30a8:	93 e0       	ldi	r25, 0x03	; 3
    30aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
                    evnt_st.hold_time = 0;
    30ae:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <evnt_st+0xd>
    30b2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <evnt_st+0xc>
                break;
            }
        }

        /******************************** POWER SWITCH EVENTS ********************************/
        if (napajalnik.vrednost() && Hardware.PSW == false)
    30b6:	8b e0       	ldi	r24, 0x0B	; 11
    30b8:	93 e0       	ldi	r25, 0x03	; 3
    30ba:	fc d2       	rcall	.+1528   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    30bc:	81 11       	cpse	r24, r1
            _delay_ms(20);
            external_power_switch_ev();
            _delay_ms(20);
        }

        else if (napajalnik.vrednost() == 0 && Hardware.PSW)
    30be:	94 cf       	rjmp	.-216    	; 0x2fe8 <_Z6eventsPv+0x32>
    30c0:	8b e0       	ldi	r24, 0x0B	; 11
    30c2:	93 e0       	ldi	r25, 0x03	; 3
    30c4:	f7 d2       	rcall	.+1518   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    30c6:	81 11       	cpse	r24, r1
    30c8:	a6 cf       	rjmp	.-180    	; 0x3016 <_Z6eventsPv+0x60>
    30ca:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <Hardware+0x9>
    30ce:	88 23       	and	r24, r24
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <_Z6eventsPv+0x11e>
    30d2:	a1 cf       	rjmp	.-190    	; 0x3016 <_Z6eventsPv+0x60>
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	99 ef       	ldi	r25, 0xF9	; 249
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	81 50       	subi	r24, 0x01	; 1
    30dc:	90 40       	sbci	r25, 0x00	; 0
    30de:	20 40       	sbci	r18, 0x00	; 0
    30e0:	e1 f7       	brne	.-8      	; 0x30da <_Z6eventsPv+0x124>
    30e2:	00 c0       	rjmp	.+0      	; 0x30e4 <_Z6eventsPv+0x12e>
        {
            _delay_ms(20);
            internal_power_switch_ev();
    30e4:	00 00       	nop
    30e6:	47 df       	rcall	.-370    	; 0x2f76 <_Z24internal_power_switch_evv>
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	99 ef       	ldi	r25, 0xF9	; 249
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	81 50       	subi	r24, 0x01	; 1
    30f0:	90 40       	sbci	r25, 0x00	; 0
    30f2:	20 40       	sbci	r18, 0x00	; 0
    30f4:	e1 f7       	brne	.-8      	; 0x30ee <_Z6eventsPv+0x138>
    30f6:	00 c0       	rjmp	.+0      	; 0x30f8 <_Z6eventsPv+0x142>
    30f8:	00 00       	nop
    30fa:	8d cf       	rjmp	.-230    	; 0x3016 <_Z6eventsPv+0x60>
        {
            switch (evnt_st.state)
            {

            case unset:
                if (evnt_st.hold_timer.vrednost() > 1000)
    30fc:	84 e2       	ldi	r24, 0x24	; 36
    30fe:	93 e0       	ldi	r25, 0x03	; 3
    3100:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    3104:	69 3e       	cpi	r22, 0xE9	; 233
    3106:	73 40       	sbci	r23, 0x03	; 3
    3108:	81 05       	cpc	r24, r1
    310a:	91 05       	cpc	r25, r1
    310c:	78 f1       	brcs	.+94     	; 0x316c <_Z6eventsPv+0x1b6>
                {
                    evnt_st.state = SCROLL;
    310e:	f0 92 1d 03 	sts	0x031D, r15	; 0x80031d <evnt_st>
                    evnt_st.menu_seek = TOGGLE_LCD;
    3112:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <evnt_st+0x1>
                    evnt_st.state_exit_timer.ponastavi();
    3116:	8f e1       	ldi	r24, 0x1F	; 31
    3118:	93 e0       	ldi	r25, 0x03	; 3
    311a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
                    evnt_st.hold_timer.ponastavi();
    311e:	84 e2       	ldi	r24, 0x24	; 36
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
                    turnOFFstrip();
    3126:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    312a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    312e:	0e 94 bf 08 	call	0x117e	; 0x117e <eTaskGetState>
    3132:	83 30       	cpi	r24, 0x03	; 3
    3134:	41 f0       	breq	.+16     	; 0x3146 <_Z6eventsPv+0x190>
    3136:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <audio_system_control>
    313a:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <audio_system_control+0x1>
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	11 f0       	breq	.+4      	; 0x3146 <_Z6eventsPv+0x190>
    3142:	0e 94 18 0c 	call	0x1830	; 0x1830 <vTaskSuspend>
    3146:	e5 da       	rcall	.-2614   	; 0x2712 <_Z24deleteALL_subAUDIO_tasksv>
    3148:	6f e0       	ldi	r22, 0x0F	; 15
                    flash_strip();
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	e2 dc       	rcall	.-1596   	; 0x2b12 <_Z18svetlost_mod_functch>
                    show_scroll_Seek();
    314e:	8d db       	rcall	.-2278   	; 0x286a <_Z11flash_stripv>
    3150:	d0 93 5d 03 	sts	0x035D, r29	; 0x80035d <AUSYS_vars+0x9>
    3154:	c0 93 5c 03 	sts	0x035C, r28	; 0x80035c <AUSYS_vars+0x8>
    3158:	8e e1       	ldi	r24, 0x1E	; 30
    315a:	93 e0       	ldi	r25, 0x03	; 3
                    delay_FRTOS(200);
    315c:	bd db       	rcall	.-2182   	; 0x28d8 <_Z16color_fade_functPh>
    315e:	8c e0       	ldi	r24, 0x0C	; 12
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
                    evnt_st.longPRESS = true;
    3166:	f0 92 2b 03 	sts	0x032B, r15	; 0x80032b <evnt_st+0xe>
                }

                else if (!eventSW.vrednost())
    316a:	38 cf       	rjmp	.-400    	; 0x2fdc <_Z6eventsPv+0x26>
    316c:	84 e1       	ldi	r24, 0x14	; 20
    316e:	93 e0       	ldi	r25, 0x03	; 3
    3170:	a1 d2       	rcall	.+1346   	; 0x36b4 <_ZN4VHOD8vrednostEv>
    3172:	81 11       	cpse	r24, r1
    3174:	33 cf       	rjmp	.-410    	; 0x2fdc <_Z6eventsPv+0x26>
                        case STRIP_OFF:
                            strip_mode_chg("off");
                            exit();
                            break;
                        }
                        evnt_st.hold_timer.ponastavi();
    3176:	84 e2       	ldi	r24, 0x24	; 36
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    317e:	2e cf       	rjmp	.-420    	; 0x2fdc <_Z6eventsPv+0x26>

            case SCROLL:
                check_auto_exit(); //Macro to auto exit timer
                if (eventSW.vrednost())
                {
                    evnt_st.hold_time = evnt_st.hold_timer.vrednost(); //stopa cas pritiska
    3180:	84 e2       	ldi	r24, 0x24	; 36
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    3188:	70 93 2a 03 	sts	0x032A, r23	; 0x80032a <evnt_st+0xd>
    318c:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <evnt_st+0xc>
                    evnt_st.state_exit_timer.ponastavi();
    3190:	8f e1       	ldi	r24, 0x1F	; 31
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>

                    if (evnt_st.hold_time > 1000)
    3198:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <evnt_st+0xc>
    319c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <evnt_st+0xd>
    31a0:	89 3e       	cpi	r24, 0xE9	; 233
    31a2:	93 40       	sbci	r25, 0x03	; 3
                    {
                        evnt_st.longPRESS = true;
    31a4:	08 f4       	brcc	.+2      	; 0x31a8 <_Z6eventsPv+0x1f2>
    31a6:	1a cf       	rjmp	.-460    	; 0x2fdc <_Z6eventsPv+0x26>
                        switch (evnt_st.menu_seek) //Glede na trenutni menu seek nekaj izvede
    31a8:	f0 92 2b 03 	sts	0x032B, r15	; 0x80032b <evnt_st+0xe>
    31ac:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <evnt_st+0x1>
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	31 f1       	breq	.+76     	; 0x3200 <_Z6eventsPv+0x24a>
                        case STRIP_MD_CHG:
                            strip_mode_chg("");
                            exit();
                            break;
                        case STRIP_OFF:
                            strip_mode_chg("off");
    31b4:	68 f0       	brcs	.+26     	; 0x31d0 <_Z6eventsPv+0x21a>
    31b6:	82 30       	cpi	r24, 0x02	; 2
    31b8:	f1 f6       	brne	.-68     	; 0x3176 <_Z6eventsPv+0x1c0>
    31ba:	8d e5       	ldi	r24, 0x5D	; 93
                            exit();
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	e8 dc       	rcall	.-1584   	; 0x2b90 <_Z14strip_mode_chgPc>
                            break;
                        }
                        evnt_st.hold_timer.ponastavi();
    31c0:	8f de       	rcall	.-738    	; 0x2ee0 <_Z4exitv>
    31c2:	84 e2       	ldi	r24, 0x24	; 36
    31c4:	93 e0       	ldi	r25, 0x03	; 3
    31c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
                    evnt_st.hold_timer.ponastavi();
                }
                break;

            case SCROLL:
                check_auto_exit(); //Macro to auto exit timer
    31ca:	08 cf       	rjmp	.-496    	; 0x2fdc <_Z6eventsPv+0x26>
    31cc:	89 de       	rcall	.-750    	; 0x2ee0 <_Z4exitv>
    31ce:	4d cf       	rjmp	.-358    	; 0x306a <_Z6eventsPv+0xb4>
                    {
                        evnt_st.longPRESS = true;
                        switch (evnt_st.menu_seek) //Glede na trenutni menu seek nekaj izvede
                        {
                        case TOGGLE_LCD:
                            toggleLCD(); //Task Zaslon se blocka v zaslon tasku
    31d0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Hardware+0xd>
    31d4:	8f 25       	eor	r24, r15
    31d6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <Hardware+0xd>
    31da:	88 23       	and	r24, r24
    31dc:	89 f3       	breq	.-30     	; 0x31c0 <_Z6eventsPv+0x20a>
    31de:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <zaslon_control>
    31e2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <zaslon_control+0x1>
    31e6:	0e 94 bf 08 	call	0x117e	; 0x117e <eTaskGetState>
    31ea:	83 30       	cpi	r24, 0x03	; 3
    31ec:	49 f7       	brne	.-46     	; 0x31c0 <_Z6eventsPv+0x20a>
    31ee:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <zaslon_control>
    31f2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <zaslon_control+0x1>
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	19 f3       	breq	.-58     	; 0x31c0 <_Z6eventsPv+0x20a>
    31fa:	0e 94 0b 09 	call	0x1216	; 0x1216 <vTaskResume>
                            exit();
                            break;
                        case STRIP_MD_CHG:
                            strip_mode_chg("");
    31fe:	e0 cf       	rjmp	.-64     	; 0x31c0 <_Z6eventsPv+0x20a>
    3200:	8b e0       	ldi	r24, 0x0B	; 11
    3202:	92 e0       	ldi	r25, 0x02	; 2
                            exit();
    3204:	c5 dc       	rcall	.-1654   	; 0x2b90 <_Z14strip_mode_chgPc>
    3206:	6c de       	rcall	.-808    	; 0x2ee0 <_Z4exitv>
                        case STRIP_OFF:
                            strip_mode_chg("off");
                            exit();
                            break;
                        }
                        evnt_st.hold_timer.ponastavi();
    3208:	84 e2       	ldi	r24, 0x24	; 36
    320a:	93 e0       	ldi	r25, 0x03	; 3
    320c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
    3210:	e5 ce       	rjmp	.-566    	; 0x2fdc <_Z6eventsPv+0x26>

00003212 <_GLOBAL__sub_I_evnt_st>:
};

/******************************************************************************************/
/*                                  SPREMENLJIVKE EVENTOV                                 */
/******************************************************************************************/
struct sw2_state_machine_strct
    3212:	ed e1       	ldi	r30, 0x1D	; 29
    3214:	f3 e0       	ldi	r31, 0x03	; 3
    3216:	10 82       	st	Z, r1
    3218:	11 82       	std	Z+1, r1	; 0x01
    321a:	15 86       	std	Z+13, r1	; 0x0d
    321c:	14 86       	std	Z+12, r1	; 0x0c
    321e:	16 86       	std	Z+14, r1	; 0x0e
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    3220:	e4 e1       	ldi	r30, 0x14	; 20
    3222:	f3 e0       	ldi	r31, 0x03	; 3
    3224:	82 e4       	ldi	r24, 0x42	; 66
    3226:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	95 83       	std	Z+5, r25	; 0x05
    322e:	84 83       	std	Z+4, r24	; 0x04
        this->default_state = default_state;
    3230:	10 86       	std	Z+8, r1	; 0x08
    3232:	17 82       	std	Z+7, r1	; 0x07
    3234:	08 95       	ret

00003236 <__vector_47>:
#include <avr/interrupt.h>
#include "../includes/includes.h"
#include <avr/io.h>


ISR (TIMER5_COMPA_vect){
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	0b b6       	in	r0, 0x3b	; 59
    3242:	0f 92       	push	r0
    3244:	8f 93       	push	r24
    3246:	9f 93       	push	r25
    3248:	af 93       	push	r26
    324a:	bf 93       	push	r27
    324c:	ef 93       	push	r30
    324e:	ff 93       	push	r31

Hardware.timeFROMboot +=1; //Pristeje cas od zacetka programa za 1ms
    3250:	eb e8       	ldi	r30, 0x8B	; 139
    3252:	f3 e0       	ldi	r31, 0x03	; 3
    3254:	84 89       	ldd	r24, Z+20	; 0x14
    3256:	95 89       	ldd	r25, Z+21	; 0x15
    3258:	a6 89       	ldd	r26, Z+22	; 0x16
    325a:	b7 89       	ldd	r27, Z+23	; 0x17
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	a1 1d       	adc	r26, r1
    3260:	b1 1d       	adc	r27, r1
    3262:	84 8b       	std	Z+20, r24	; 0x14
    3264:	95 8b       	std	Z+21, r25	; 0x15
    3266:	a6 8b       	std	Z+22, r26	; 0x16
    3268:	b7 8b       	std	Z+23, r27	; 0x17
TCNT5 = 0;
    326a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
    326e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	0f 90       	pop	r0
    3280:	0b be       	out	0x3b, r0	; 59
    3282:	0f 90       	pop	r0
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	0f 90       	pop	r0
    3288:	1f 90       	pop	r1
    328a:	18 95       	reti

0000328c <_Z6pwmOFFhc>:
    }
}

void pwmOFF(uint8_t pin, char port)
{
    switch (port)
    328c:	62 34       	cpi	r22, 0x42	; 66
    328e:	31 f4       	brne	.+12     	; 0x329c <_Z6pwmOFFhc+0x10>
    {
    case 'B':
        switch (pin)
    3290:	85 30       	cpi	r24, 0x05	; 5
    3292:	29 f0       	breq	.+10     	; 0x329e <_Z6pwmOFFhc+0x12>
    3294:	86 30       	cpi	r24, 0x06	; 6
    3296:	79 f0       	breq	.+30     	; 0x32b6 <_Z6pwmOFFhc+0x2a>
    3298:	84 30       	cpi	r24, 0x04	; 4
    329a:	39 f0       	breq	.+14     	; 0x32aa <_Z6pwmOFFhc+0x1e>
    329c:	08 95       	ret
        {
        case 4:
            TCCR2A &= ~(1 << COM2A1) & ~(1 << COM2A0); //Izklop primerjalnika
            break;
        case 5:
            TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1A0);
    329e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    32a2:	8f 73       	andi	r24, 0x3F	; 63
    32a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
            break;
    32a8:	08 95       	ret
    {
    case 'B':
        switch (pin)
        {
        case 4:
            TCCR2A &= ~(1 << COM2A1) & ~(1 << COM2A0); //Izklop primerjalnika
    32aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    32ae:	8f 73       	andi	r24, 0x3F	; 63
    32b0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    32b4:	08 95       	ret
            break;
        case 5:
            TCCR1A &= ~(1 << COM1A1) & ~(1 << COM1A0);
            break;
        case 6:
            TCCR1A &= ~(1 << COM1B1) & ~(1 << COM1B0);
    32b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    32ba:	8f 7c       	andi	r24, 0xCF	; 207
    32bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    32c0:	08 95       	ret

000032c2 <_Z11writeOUTPUThcb>:
#include "avr/io.h"
#include "src/includes/includes.h"
#define ADSCSRA _SFR_MEM8(0xE0)

void writeOUTPUT(unsigned char pin, char port, bool vrednost)
{
    32c2:	1f 93       	push	r17
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	d8 2f       	mov	r29, r24
    32ca:	c6 2f       	mov	r28, r22
    32cc:	14 2f       	mov	r17, r20

    pwmOFF(pin, port); // izklopi pwm
    32ce:	de df       	rcall	.-68     	; 0x328c <_Z6pwmOFFhc>
    switch (port)
    32d0:	c4 34       	cpi	r28, 0x44	; 68
    32d2:	49 f1       	breq	.+82     	; 0x3326 <_Z11writeOUTPUThcb+0x64>
    32d4:	c8 34       	cpi	r28, 0x48	; 72
    32d6:	a9 f0       	breq	.+42     	; 0x3302 <_Z11writeOUTPUThcb+0x40>
    32d8:	c2 34       	cpi	r28, 0x42	; 66
    32da:	21 f0       	breq	.+8      	; 0x32e4 <_Z11writeOUTPUThcb+0x22>
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
        break;
    }
}
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	08 95       	ret
    pwmOFF(pin, port); // izklopi pwm
    switch (port)
    {

    case 'B':
        vrednost == 1 ? PORTB |= (1 << pin) : PORTB &= ~(1 << pin);
    32e4:	25 b1       	in	r18, 0x05	; 5
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	01 c0       	rjmp	.+2      	; 0x32ee <_Z11writeOUTPUThcb+0x2c>
    32ec:	88 0f       	add	r24, r24
    32ee:	da 95       	dec	r29
    32f0:	ea f7       	brpl	.-6      	; 0x32ec <_Z11writeOUTPUThcb+0x2a>
    32f2:	11 23       	and	r17, r17
    32f4:	39 f1       	breq	.+78     	; 0x3344 <_Z11writeOUTPUThcb+0x82>
    32f6:	82 2b       	or	r24, r18
    32f8:	85 b9       	out	0x05, r24	; 5
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
        break;
    }
}
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	08 95       	ret

    case 'D':
        vrednost == 1 ? PORTD |= (1 << pin) : PORTD &= ~(1 << pin);
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
    3302:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	01 c0       	rjmp	.+2      	; 0x330e <_Z11writeOUTPUThcb+0x4c>
    330c:	88 0f       	add	r24, r24
    330e:	da 95       	dec	r29
    3310:	ea f7       	brpl	.-6      	; 0x330c <_Z11writeOUTPUThcb+0x4a>
    3312:	11 11       	cpse	r17, r1
    3314:	25 c0       	rjmp	.+74     	; 0x3360 <_Z11writeOUTPUThcb+0x9e>
    3316:	80 95       	com	r24
    3318:	82 23       	and	r24, r18
    331a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
        break;
    }
}
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	08 95       	ret
    case 'B':
        vrednost == 1 ? PORTB |= (1 << pin) : PORTB &= ~(1 << pin);
        break;

    case 'D':
        vrednost == 1 ? PORTD |= (1 << pin) : PORTD &= ~(1 << pin);
    3326:	2b b1       	in	r18, 0x0b	; 11
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	01 c0       	rjmp	.+2      	; 0x3330 <_Z11writeOUTPUThcb+0x6e>
    332e:	88 0f       	add	r24, r24
    3330:	da 95       	dec	r29
    3332:	ea f7       	brpl	.-6      	; 0x332e <_Z11writeOUTPUThcb+0x6c>
    3334:	11 23       	and	r17, r17
    3336:	69 f0       	breq	.+26     	; 0x3352 <_Z11writeOUTPUThcb+0x90>
    3338:	82 2b       	or	r24, r18
    333a:	8b b9       	out	0x0b, r24	; 11
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
        break;
    }
}
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	08 95       	ret
    pwmOFF(pin, port); // izklopi pwm
    switch (port)
    {

    case 'B':
        vrednost == 1 ? PORTB |= (1 << pin) : PORTB &= ~(1 << pin);
    3344:	80 95       	com	r24
    3346:	82 23       	and	r24, r18
    3348:	85 b9       	out	0x05, r24	; 5
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
        break;
    }
}
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	08 95       	ret
    case 'B':
        vrednost == 1 ? PORTB |= (1 << pin) : PORTB &= ~(1 << pin);
        break;

    case 'D':
        vrednost == 1 ? PORTD |= (1 << pin) : PORTD &= ~(1 << pin);
    3352:	80 95       	com	r24
    3354:	82 23       	and	r24, r18
    3356:	8b b9       	out	0x0b, r24	; 11
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
        break;
    }
}
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	08 95       	ret

    case 'D':
        vrednost == 1 ? PORTD |= (1 << pin) : PORTD &= ~(1 << pin);
        break;
    case 'H':
        vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
    3360:	82 2b       	or	r24, r18
    3362:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    3366:	ba cf       	rjmp	.-140    	; 0x32dc <_Z11writeOUTPUThcb+0x1a>

00003368 <_Z10readANALOGh>:
    }
}

uint16_t readANALOG(uint8_t pin)
{
    taskENTER_CRITICAL(); //Dokler bere ta pin, ne sme brati ostalih
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	0f 92       	push	r0
    ADSCSRA |= (1 << ADSC); //Start konverzija
    336e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7c00e0>
    3372:	80 64       	ori	r24, 0x40	; 64
    3374:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7c00e0>
    while (ADCSRA & (1 << ADSC)); //Dokler se bit ne resetira
    3378:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    337c:	86 fd       	sbrc	r24, 6
    337e:	fc cf       	rjmp	.-8      	; 0x3378 <_Z10readANALOGh+0x10>
    taskEXIT_CRITICAL();
    3380:	0f 90       	pop	r0
    3382:	0f be       	out	0x3f, r0	; 63
    return ADCH;
    3384:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	08 95       	ret

0000338c <_Z8writePWMhch>:

void writePWM(uint8_t pin, char port, uint8_t vrednost)
{

    switch (port)
    338c:	62 34       	cpi	r22, 0x42	; 66
    338e:	81 f4       	brne	.+32     	; 0x33b0 <_Z8writePWMhch+0x24>
    {
    case 'B':
        DDRB = DDRB | (0b00000001 << pin); //Nastavi na output
    3390:	94 b1       	in	r25, 0x04	; 4
    3392:	21 e0       	ldi	r18, 0x01	; 1
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	08 2e       	mov	r0, r24
    3398:	01 c0       	rjmp	.+2      	; 0x339c <_Z8writePWMhch+0x10>
    339a:	22 0f       	add	r18, r18
    339c:	0a 94       	dec	r0
    339e:	ea f7       	brpl	.-6      	; 0x339a <_Z8writePWMhch+0xe>
    33a0:	29 2b       	or	r18, r25
    33a2:	24 b9       	out	0x04, r18	; 4
        switch (pin)
    33a4:	85 30       	cpi	r24, 0x05	; 5
    33a6:	29 f0       	breq	.+10     	; 0x33b2 <_Z8writePWMhch+0x26>
    33a8:	86 30       	cpi	r24, 0x06	; 6
    33aa:	b1 f0       	breq	.+44     	; 0x33d8 <_Z8writePWMhch+0x4c>
    33ac:	84 30       	cpi	r24, 0x04	; 4
    33ae:	61 f0       	breq	.+24     	; 0x33c8 <_Z8writePWMhch+0x3c>
    33b0:	08 95       	ret
            TCCR2A = 1 << WGM22 || 1 << WGM20 || 1 << COM2A1; //Fast PWM, izklopi izhod po komparatorju
            TCCR2B = (1 << CS20);                                       // Delilnik frekvence
            OCR2A = vrednost;                                 //Nastavi se primerjalnik
            break;
        case 5:
            TCCR1A = 1 << WGM12 || 1 << WGM10 || 1 << COM1A1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
            TCCR2B = (1 << CS20); 
    33b8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
            OCR1A = vrednost; //Nastavi se primerjalnik
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    33c2:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
            break;
    33c6:	08 95       	ret
    case 'B':
        DDRB = DDRB | (0b00000001 << pin); //Nastavi na output
        switch (pin)
        {
        case 4:
            TCCR2A = 1 << WGM22 || 1 << WGM20 || 1 << COM2A1; //Fast PWM, izklopi izhod po komparatorju
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
            TCCR2B = (1 << CS20);                                       // Delilnik frekvence
    33ce:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
            OCR2A = vrednost;                                 //Nastavi se primerjalnik
    33d2:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
            break;
    33d6:	08 95       	ret
            TCCR1A = 1 << WGM12 || 1 << WGM10 || 1 << COM1A1;
            TCCR2B = (1 << CS20); 
            OCR1A = vrednost; //Nastavi se primerjalnik
            break;
        case 6:
            TCCR1A = (1 << 0) | (1 << 3) | (1 << COM1B1);
    33d8:	89 e2       	ldi	r24, 0x29	; 41
    33da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
            TCCR2B = (1 << CS20); 
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
            OCR1B = vrednost;
    33e4:	50 e0       	ldi	r21, 0x00	; 0
    33e6:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    33ea:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    33ee:	08 95       	ret

000033f0 <_GLOBAL__sub_I_Hardware>:
extern TaskHandle_t chrg_control;
extern TaskHandle_t thermal_control;
extern TaskHandle_t meas_control;
extern SemaphoreHandle_t voltage_SEM;

struct Hardware_t
    33f0:	eb e8       	ldi	r30, 0x8B	; 139
    33f2:	f3 e0       	ldi	r31, 0x03	; 3
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e4       	ldi	r25, 0x40	; 64
    33f8:	ac e9       	ldi	r26, 0x9C	; 156
    33fa:	b5 e4       	ldi	r27, 0x45	; 69
    33fc:	80 83       	st	Z, r24
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	a2 83       	std	Z+2, r26	; 0x02
    3402:	b3 83       	std	Z+3, r27	; 0x03
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	a0 ea       	ldi	r26, 0xA0	; 160
    340a:	b0 e4       	ldi	r27, 0x40	; 64
    340c:	84 83       	std	Z+4, r24	; 0x04
    340e:	95 83       	std	Z+5, r25	; 0x05
    3410:	a6 83       	std	Z+6, r26	; 0x06
    3412:	b7 83       	std	Z+7, r27	; 0x07
    3414:	10 86       	std	Z+8, r1	; 0x08
    3416:	11 86       	std	Z+9, r1	; 0x09
    3418:	14 86       	std	Z+12, r1	; 0x0c
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	85 87       	std	Z+13, r24	; 0x0d
    341e:	16 86       	std	Z+14, r1	; 0x0e
    3420:	17 86       	std	Z+15, r1	; 0x0f
    3422:	10 8a       	std	Z+16, r1	; 0x10
    3424:	11 8a       	std	Z+17, r1	; 0x11
    3426:	13 8a       	std	Z+19, r1	; 0x13
    3428:	12 8a       	std	Z+18, r1	; 0x12
    342a:	14 8a       	std	Z+20, r1	; 0x14
    342c:	15 8a       	std	Z+21, r1	; 0x15
    342e:	16 8a       	std	Z+22, r1	; 0x16
    3430:	17 8a       	std	Z+23, r1	; 0x17
    Fade_Breathe,
    LENGTH_2,
    OFF_A
};

struct adsys_t
    3432:	e4 e5       	ldi	r30, 0x54	; 84
    3434:	f3 e0       	ldi	r31, 0x03	; 3
    3436:	11 82       	std	Z+1, r1	; 0x01
    3438:	10 82       	st	Z, r1
    343a:	13 82       	std	Z+3, r1	; 0x03
    343c:	12 82       	std	Z+2, r1	; 0x02
    343e:	15 82       	std	Z+5, r1	; 0x05
    3440:	14 82       	std	Z+4, r1	; 0x04
    3442:	17 82       	std	Z+7, r1	; 0x07
    3444:	16 82       	std	Z+6, r1	; 0x06
    3446:	11 86       	std	Z+9, r1	; 0x09
    3448:	10 86       	std	Z+8, r1	; 0x08
	VIJOLICNA,
	ROZA,
	LENGHT
};

struct mozne_barve_t
    344a:	ec e2       	ldi	r30, 0x2C	; 44
    344c:	f3 e0       	ldi	r31, 0x03	; 3
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	80 83       	st	Z, r24
    3452:	81 83       	std	Z+1, r24	; 0x01
    3454:	82 83       	std	Z+2, r24	; 0x02
    3456:	13 82       	std	Z+3, r1	; 0x03
    3458:	84 83       	std	Z+4, r24	; 0x04
    345a:	15 82       	std	Z+5, r1	; 0x05
    345c:	86 83       	std	Z+6, r24	; 0x06
    345e:	17 82       	std	Z+7, r1	; 0x07
    3460:	10 86       	std	Z+8, r1	; 0x08
    3462:	11 86       	std	Z+9, r1	; 0x09
    3464:	12 86       	std	Z+10, r1	; 0x0a
    3466:	83 87       	std	Z+11, r24	; 0x0b
    3468:	84 87       	std	Z+12, r24	; 0x0c
    346a:	85 87       	std	Z+13, r24	; 0x0d
    346c:	16 86       	std	Z+14, r1	; 0x0e
    346e:	17 86       	std	Z+15, r1	; 0x0f
    3470:	80 8b       	std	Z+16, r24	; 0x10
    3472:	81 8b       	std	Z+17, r24	; 0x11
    3474:	82 8b       	std	Z+18, r24	; 0x12
    3476:	13 8a       	std	Z+19, r1	; 0x13
    3478:	84 8b       	std	Z+20, r24	; 0x14
    347a:	85 8b       	std	Z+21, r24	; 0x15
    347c:	84 e1       	ldi	r24, 0x14	; 20
    347e:	86 8b       	std	Z+22, r24	; 0x16
    3480:	83 e9       	ldi	r24, 0x93	; 147
    3482:	87 8b       	std	Z+23, r24	; 0x17
    3484:	f1 8f       	std	Z+25, r31	; 0x19
    3486:	e0 8f       	std	Z+24, r30	; 0x18
    3488:	8f e2       	ldi	r24, 0x2F	; 47
    348a:	93 e0       	ldi	r25, 0x03	; 3
    348c:	93 8f       	std	Z+27, r25	; 0x1b
    348e:	82 8f       	std	Z+26, r24	; 0x1a
    3490:	82 e3       	ldi	r24, 0x32	; 50
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	95 8f       	std	Z+29, r25	; 0x1d
    3496:	84 8f       	std	Z+28, r24	; 0x1c
    3498:	85 e3       	ldi	r24, 0x35	; 53
    349a:	93 e0       	ldi	r25, 0x03	; 3
    349c:	97 8f       	std	Z+31, r25	; 0x1f
    349e:	86 8f       	std	Z+30, r24	; 0x1e
    34a0:	88 e3       	ldi	r24, 0x38	; 56
    34a2:	93 e0       	ldi	r25, 0x03	; 3
    34a4:	91 a3       	std	Z+33, r25	; 0x21
    34a6:	80 a3       	std	Z+32, r24	; 0x20
    34a8:	8b e3       	ldi	r24, 0x3B	; 59
    34aa:	93 e0       	ldi	r25, 0x03	; 3
    34ac:	93 a3       	std	Z+35, r25	; 0x23
    34ae:	82 a3       	std	Z+34, r24	; 0x22
    34b0:	8e e3       	ldi	r24, 0x3E	; 62
    34b2:	93 e0       	ldi	r25, 0x03	; 3
    34b4:	95 a3       	std	Z+37, r25	; 0x25
    34b6:	84 a3       	std	Z+36, r24	; 0x24
    34b8:	81 e4       	ldi	r24, 0x41	; 65
    34ba:	93 e0       	ldi	r25, 0x03	; 3
    34bc:	97 a3       	std	Z+39, r25	; 0x27
    34be:	86 a3       	std	Z+38, r24	; 0x26
    34c0:	08 95       	ret

000034c2 <_Z9polnjenjePv>:
	{
		xSemaphoreTake(voltage_SEM, portMAX_DELAY);

		if (Hardware.napetost >= 4150 && Hardware.POLKONC == 0)
		{
			Hardware.POLKONC = 1;
    34c2:	c1 e0       	ldi	r28, 0x01	; 1
    34c4:	27 c0       	rjmp	.+78     	; 0x3514 <_Z9polnjenjePv+0x52>

	while (true)
	{
		xSemaphoreTake(voltage_SEM, portMAX_DELAY);

		if (Hardware.napetost >= 4150 && Hardware.POLKONC == 0)
    34c6:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Hardware+0xa>
    34ca:	81 11       	cpse	r24, r1
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <_Z9polnjenjePv+0x10>
		{
			Hardware.POLKONC = 1;
    34ce:	c0 93 95 03 	sts	0x0395, r28	; 0x800395 <Hardware+0xa>
			Hardware.POLKONC = 0;

			//EEPROM.update(battery_eeprom_addr, Hardware.POLKONC);
		}

		xSemaphoreGive(voltage_SEM);
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltage_SEM>
    34e0:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <voltage_SEM+0x1>
    34e4:	0e 94 12 04 	call	0x824	; 0x824 <xQueueGenericSend>
		

		if ((Hardware.POLKONC == 1 || Hardware.AMP_oheat || napajalnik.vrednost() == 0) && Hardware.polnjenjeON)
    34e8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Hardware+0xa>
    34ec:	81 11       	cpse	r24, r1
    34ee:	2c c0       	rjmp	.+88     	; 0x3548 <_Z9polnjenjePv+0x86>
    34f0:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <Hardware+0xc>
    34f4:	88 23       	and	r24, r24
    34f6:	69 f1       	breq	.+90     	; 0x3552 <_Z9polnjenjePv+0x90>
    34f8:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Hardware+0xb>
    34fc:	88 23       	and	r24, r24
    34fe:	b1 f1       	breq	.+108    	; 0x356c <_Z9polnjenjePv+0xaa>
		{
			writeOUTPUT(PIN6,'D',0);
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	64 e4       	ldi	r22, 0x44	; 68
    3504:	86 e0       	ldi	r24, 0x06	; 6
    3506:	dd de       	rcall	.-582    	; 0x32c2 <_Z11writeOUTPUThcb>
			Hardware.polnjenjeON = false;
    3508:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <Hardware+0xb>
		{
			delay_FRTOS(1000);
			writeOUTPUT(PIN6,'D',1);
			Hardware.polnjenjeON = true;
		}
		delay_FRTOS(100);
    350c:	86 e0       	ldi	r24, 0x06	; 6
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
void polnjenje(void *paramOdTaska)
{

	while (true)
	{
		xSemaphoreTake(voltage_SEM, portMAX_DELAY);
    3514:	6f ef       	ldi	r22, 0xFF	; 255
    3516:	7f ef       	ldi	r23, 0xFF	; 255
    3518:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltage_SEM>
    351c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <voltage_SEM+0x1>
    3520:	0e 94 6e 05 	call	0xadc	; 0xadc <xQueueSemaphoreTake>

		if (Hardware.napetost >= 4150 && Hardware.POLKONC == 0)
    3524:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Hardware+0x12>
    3528:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <Hardware+0x13>
    352c:	86 33       	cpi	r24, 0x36	; 54
    352e:	20 e1       	ldi	r18, 0x10	; 16
    3530:	92 07       	cpc	r25, r18
    3532:	48 f6       	brcc	.-110    	; 0x34c6 <_Z9polnjenjePv+0x4>
			Hardware.POLKONC = 1;

			//EEPROM.update(battery_eeprom_addr, Hardware.POLKONC); //Posodobitev EEPROM-a na bajtu 1 z spremenljivko Hardware.POLKONC; Na vsake 5000 pisanj zamenja bajt na katerega piše
		}

		else if (Hardware.napetost <= 4000 && Hardware.POLKONC)
    3534:	81 3a       	cpi	r24, 0xA1	; 161
    3536:	9f 40       	sbci	r25, 0x0F	; 15
    3538:	60 f6       	brcc	.-104    	; 0x34d2 <_Z9polnjenjePv+0x10>
    353a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Hardware+0xa>
    353e:	88 23       	and	r24, r24
    3540:	41 f2       	breq	.-112    	; 0x34d2 <_Z9polnjenjePv+0x10>
		{ //Če se dokonca napolne, se bo polnjenje lahko nadaljevalo šele, ko se baterija izprazne za približno 10% (3V = 0%, 4.2V = 100%, 4.1V = 90% . 3.95V = 80% oz. 10% manj ;  napetost = 0.012 * procent + 3);
			Hardware.POLKONC = 0;
    3542:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <Hardware+0xa>
    3546:	c5 cf       	rjmp	.-118    	; 0x34d2 <_Z9polnjenjePv+0x10>
		}

		xSemaphoreGive(voltage_SEM);
		

		if ((Hardware.POLKONC == 1 || Hardware.AMP_oheat || napajalnik.vrednost() == 0) && Hardware.polnjenjeON)
    3548:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Hardware+0xb>
    354c:	88 23       	and	r24, r24
    354e:	f1 f2       	breq	.-68     	; 0x350c <_Z9polnjenjePv+0x4a>
    3550:	d7 cf       	rjmp	.-82     	; 0x3500 <_Z9polnjenjePv+0x3e>
    3552:	8b e0       	ldi	r24, 0x0B	; 11
    3554:	93 e0       	ldi	r25, 0x03	; 3
    3556:	ae d0       	rcall	.+348    	; 0x36b4 <_ZN4VHOD8vrednostEv>
    3558:	81 11       	cpse	r24, r1
    355a:	04 c0       	rjmp	.+8      	; 0x3564 <_Z9polnjenjePv+0xa2>
    355c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Hardware+0xb>
    3560:	81 11       	cpse	r24, r1
    3562:	ce cf       	rjmp	.-100    	; 0x3500 <_Z9polnjenjePv+0x3e>
		{
			writeOUTPUT(PIN6,'D',0);
			Hardware.polnjenjeON = false;
		}

		else if (Hardware.POLKONC == 0 && napajalnik.vrednost() && Hardware.AMP_oheat == false && !Hardware.polnjenjeON)
    3564:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <Hardware+0xa>
    3568:	81 11       	cpse	r24, r1
    356a:	d0 cf       	rjmp	.-96     	; 0x350c <_Z9polnjenjePv+0x4a>
    356c:	8b e0       	ldi	r24, 0x0B	; 11
    356e:	93 e0       	ldi	r25, 0x03	; 3
    3570:	a1 d0       	rcall	.+322    	; 0x36b4 <_ZN4VHOD8vrednostEv>
    3572:	88 23       	and	r24, r24
    3574:	59 f2       	breq	.-106    	; 0x350c <_Z9polnjenjePv+0x4a>
    3576:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <Hardware+0xc>
    357a:	81 11       	cpse	r24, r1
    357c:	c7 cf       	rjmp	.-114    	; 0x350c <_Z9polnjenjePv+0x4a>
    357e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Hardware+0xb>
    3582:	81 11       	cpse	r24, r1
    3584:	c3 cf       	rjmp	.-122    	; 0x350c <_Z9polnjenjePv+0x4a>
		{
			delay_FRTOS(1000);
    3586:	8e e3       	ldi	r24, 0x3E	; 62
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
			writeOUTPUT(PIN6,'D',1);
    358e:	41 e0       	ldi	r20, 0x01	; 1
    3590:	64 e4       	ldi	r22, 0x44	; 68
    3592:	86 e0       	ldi	r24, 0x06	; 6
    3594:	96 de       	rcall	.-724    	; 0x32c2 <_Z11writeOUTPUThcb>
			Hardware.polnjenjeON = true;
    3596:	c0 93 96 03 	sts	0x0396, r28	; 0x800396 <Hardware+0xb>
    359a:	b8 cf       	rjmp	.-144    	; 0x350c <_Z9polnjenjePv+0x4a>

0000359c <_Z6zaslonPv>:
            }

            else if (Hardware.polnjenjeON)
            {                     //Če je zunanje napajanje priključeno in baterije niso napolnjene, zaslon utripa
                delay_FRTOS(500); //1Hz utripanje
                PORTB = PORTB ^ 0b00000100;
    359c:	c4 e0       	ldi	r28, 0x04	; 4
    359e:	18 c0       	rjmp	.+48     	; 0x35d0 <_Z6zaslonPv+0x34>

    while (1)
    {
        if (Hardware.display_enabled)
        {
            if (napajalnik.vrednost() == 0)
    35a0:	8b e0       	ldi	r24, 0x0B	; 11
    35a2:	93 e0       	ldi	r25, 0x03	; 3
    35a4:	87 d0       	rcall	.+270    	; 0x36b4 <_ZN4VHOD8vrednostEv>
    35a6:	88 23       	and	r24, r24
    35a8:	89 f1       	breq	.+98     	; 0x360c <_Z6zaslonPv+0x70>
                { //Prižig vsakih 6s za 3s, če zunanje napajanje ni priključeno
                    PORTB |= (1 << lcd_pb_pin);
                }
            }

            else if (Hardware.polnjenjeON)
    35aa:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <Hardware+0xb>
    35ae:	88 23       	and	r24, r24
    35b0:	29 f1       	breq	.+74     	; 0x35fc <_Z6zaslonPv+0x60>
            {                     //Če je zunanje napajanje priključeno in baterije niso napolnjene, zaslon utripa
                delay_FRTOS(500); //1Hz utripanje
    35b2:	8f e1       	ldi	r24, 0x1F	; 31
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
                PORTB = PORTB ^ 0b00000100;
    35ba:	85 b1       	in	r24, 0x05	; 5
    35bc:	8c 27       	eor	r24, r28
    35be:	85 b9       	out	0x05, r24	; 5
                Timers.LCD_timer.ponastavi();
    35c0:	88 e6       	ldi	r24, 0x68	; 104
    35c2:	93 e0       	ldi	r25, 0x03	; 3
    35c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
        else
        {
            PORTB &= ~(1 << lcd_pb_pin);
            holdTASK(zaslon_control); //Resuma se v eventih
        }
        delay_FRTOS(200);
    35c8:	8c e0       	ldi	r24, 0x0C	; 12
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
void zaslon(void *paramOdTaska)
{

    while (1)
    {
        if (Hardware.display_enabled)
    35d0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Hardware+0xd>
    35d4:	81 11       	cpse	r24, r1
    35d6:	e4 cf       	rjmp	.-56     	; 0x35a0 <_Z6zaslonPv+0x4>
                Hardware.display_enabled = false;
            }
        }
        else
        {
            PORTB &= ~(1 << lcd_pb_pin);
    35d8:	2a 98       	cbi	0x05, 2	; 5
            holdTASK(zaslon_control); //Resuma se v eventih
    35da:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <zaslon_control>
    35de:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <zaslon_control+0x1>
    35e2:	0e 94 bf 08 	call	0x117e	; 0x117e <eTaskGetState>
    35e6:	83 30       	cpi	r24, 0x03	; 3
    35e8:	79 f3       	breq	.-34     	; 0x35c8 <_Z6zaslonPv+0x2c>
    35ea:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <zaslon_control>
    35ee:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <zaslon_control+0x1>
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	49 f3       	breq	.-46     	; 0x35c8 <_Z6zaslonPv+0x2c>
    35f6:	0e 94 18 0c 	call	0x1830	; 0x1830 <vTaskSuspend>
    35fa:	e6 cf       	rjmp	.-52     	; 0x35c8 <_Z6zaslonPv+0x2c>
                PORTB = PORTB ^ 0b00000100;
                Timers.LCD_timer.ponastavi();
            }
            else // Ce je napajalnik izkljucen in se ne polni, potem 3s gori
            {
                PORTB |= (1 << lcd_pb_pin);
    35fc:	2a 9a       	sbi	0x05, 2	; 5
                delay_FRTOS(3000);
    35fe:	8a eb       	ldi	r24, 0xBA	; 186
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>
                Hardware.display_enabled = false;
    3606:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <Hardware+0xd>
    360a:	de cf       	rjmp	.-68     	; 0x35c8 <_Z6zaslonPv+0x2c>
    {
        if (Hardware.display_enabled)
        {
            if (napajalnik.vrednost() == 0)
            {
                if (Timers.LCD_timer.vrednost() >= 9000 || !Hardware.is_Powered_UP)
    360c:	88 e6       	ldi	r24, 0x68	; 104
    360e:	93 e0       	ldi	r25, 0x03	; 3
    3610:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    3614:	68 32       	cpi	r22, 0x28	; 40
    3616:	73 42       	sbci	r23, 0x23	; 35
    3618:	81 05       	cpc	r24, r1
    361a:	91 05       	cpc	r25, r1
    361c:	78 f4       	brcc	.+30     	; 0x363c <_Z6zaslonPv+0xa0>
    361e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <Hardware+0x8>
    3622:	88 23       	and	r24, r24
    3624:	59 f0       	breq	.+22     	; 0x363c <_Z6zaslonPv+0xa0>
                {
                    Timers.LCD_timer.ponastavi();
                    PORTB &= ~(1 << lcd_pb_pin);
                }
                else if (Timers.LCD_timer.vrednost() > 6000)
    3626:	88 e6       	ldi	r24, 0x68	; 104
    3628:	93 e0       	ldi	r25, 0x03	; 3
    362a:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8castimer8vrednostEv>
    362e:	61 37       	cpi	r22, 0x71	; 113
    3630:	77 41       	sbci	r23, 0x17	; 23
    3632:	81 05       	cpc	r24, r1
    3634:	91 05       	cpc	r25, r1
    3636:	40 f2       	brcs	.-112    	; 0x35c8 <_Z6zaslonPv+0x2c>
                { //Prižig vsakih 6s za 3s, če zunanje napajanje ni priključeno
                    PORTB |= (1 << lcd_pb_pin);
    3638:	2a 9a       	sbi	0x05, 2	; 5
    363a:	c6 cf       	rjmp	.-116    	; 0x35c8 <_Z6zaslonPv+0x2c>
        {
            if (napajalnik.vrednost() == 0)
            {
                if (Timers.LCD_timer.vrednost() >= 9000 || !Hardware.is_Powered_UP)
                {
                    Timers.LCD_timer.ponastavi();
    363c:	88 e6       	ldi	r24, 0x68	; 104
    363e:	93 e0       	ldi	r25, 0x03	; 3
    3640:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN8castimer9ponastaviEv>
                    PORTB &= ~(1 << lcd_pb_pin);
    3644:	2a 98       	cbi	0x05, 2	; 5
    3646:	c0 cf       	rjmp	.-128    	; 0x35c8 <_Z6zaslonPv+0x2c>

00003648 <_Z7thermalPv>:

void thermal(void *paramOdTaska)
{
  while (true)
  {
    delay_FRTOS(6000);
    3648:	84 e7       	ldi	r24, 0x74	; 116
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskDelay>

    float AMP_Temp_S_Voltage = (float)readANALOG(1) * Hardware.REF_mVOLT / 1023.00f;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	8a de       	rcall	.-748    	; 0x3368 <_Z10readANALOGh>
    Hardware.Amplifier_temp = (float)(-0.073f) * (float)AMP_Temp_S_Voltage + 192.754f;
    3654:	bc 01       	movw	r22, r24
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	68 d1       	rcall	.+720    	; 0x392c <__floatunsisf>
    365c:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <Hardware>
    3660:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <Hardware+0x1>
    3664:	40 91 8d 03 	lds	r20, 0x038D	; 0x80038d <Hardware+0x2>
    3668:	50 91 8e 03 	lds	r21, 0x038E	; 0x80038e <Hardware+0x3>
    366c:	f1 d1       	rcall	.+994    	; 0x3a50 <__mulsf3>
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 ec       	ldi	r19, 0xC0	; 192
    3672:	4f e7       	ldi	r20, 0x7F	; 127
    3674:	54 e4       	ldi	r21, 0x44	; 68
    3676:	c6 d0       	rcall	.+396    	; 0x3804 <__divsf3>
    3678:	26 e0       	ldi	r18, 0x06	; 6
    367a:	31 e8       	ldi	r19, 0x81	; 129
    367c:	45 e9       	ldi	r20, 0x95	; 149
    367e:	5d eb       	ldi	r21, 0xBD	; 189
    3680:	e7 d1       	rcall	.+974    	; 0x3a50 <__mulsf3>
    3682:	26 e0       	ldi	r18, 0x06	; 6
    3684:	31 ec       	ldi	r19, 0xC1	; 193
    3686:	40 e4       	ldi	r20, 0x40	; 64
    3688:	53 e4       	ldi	r21, 0x43	; 67
    368a:	58 d0       	rcall	.+176    	; 0x373c <__addsf3>
    368c:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <Hardware+0xe>
    3690:	70 93 9a 03 	sts	0x039A, r23	; 0x80039a <Hardware+0xf>
    3694:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <Hardware+0x10>
    3698:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <Hardware+0x11>

    if (Hardware.Amplifier_temp > 60)
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e7       	ldi	r20, 0x70	; 112
    36a2:	52 e4       	ldi	r21, 0x42	; 66
    36a4:	d1 d1       	rcall	.+930    	; 0x3a48 <__gesf2>
    36a6:	18 16       	cp	r1, r24
    36a8:	7c f6       	brge	.-98     	; 0x3648 <_Z7thermalPv>
    {
      Hardware.AMP_oheat = true;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <Hardware+0xc>
      Shutdown();
    36b0:	3a db       	rcall	.-2444   	; 0x2d26 <_Z8Shutdownv>
    36b2:	ca cf       	rjmp	.-108    	; 0x3648 <_Z7thermalPv>

000036b4 <_ZN4VHOD8vrednostEv>:
    36b4:	fc 01       	movw	r30, r24
	{
		rs_edge = false;
		return true;
	}
	return false;
}
    36b6:	86 81       	ldd	r24, Z+6	; 0x06
    36b8:	82 34       	cpi	r24, 0x42	; 66
    36ba:	29 f1       	breq	.+74     	; 0x3706 <_ZN4VHOD8vrednostEv+0x52>
    36bc:	84 34       	cpi	r24, 0x44	; 68
    36be:	89 f0       	breq	.+34     	; 0x36e2 <_ZN4VHOD8vrednostEv+0x2e>
    36c0:	81 81       	ldd	r24, Z+1	; 0x01
    36c2:	27 81       	ldd	r18, Z+7	; 0x07
    36c4:	30 85       	ldd	r19, Z+8	; 0x08
    36c6:	23 2b       	or	r18, r19
    36c8:	19 f0       	breq	.+6      	; 0x36d0 <_ZN4VHOD8vrednostEv+0x1c>
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	89 27       	eor	r24, r25
    36ce:	81 83       	std	Z+1, r24	; 0x01
    36d0:	90 81       	ld	r25, Z
    36d2:	98 17       	cp	r25, r24
    36d4:	29 f0       	breq	.+10     	; 0x36e0 <_ZN4VHOD8vrednostEv+0x2c>
    36d6:	91 e0       	ldi	r25, 0x01	; 1
    36d8:	81 11       	cpse	r24, r1
    36da:	17 c0       	rjmp	.+46     	; 0x370a <_ZN4VHOD8vrednostEv+0x56>
    36dc:	93 83       	std	Z+3, r25	; 0x03
    36de:	10 82       	st	Z, r1
    36e0:	08 95       	ret
    36e2:	89 b1       	in	r24, 0x09	; 9
    36e4:	21 e0       	ldi	r18, 0x01	; 1
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	04 80       	ldd	r0, Z+4	; 0x04
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <_ZN4VHOD8vrednostEv+0x3c>
    36ec:	22 0f       	add	r18, r18
    36ee:	33 1f       	adc	r19, r19
    36f0:	0a 94       	dec	r0
    36f2:	e2 f7       	brpl	.-8      	; 0x36ec <_ZN4VHOD8vrednostEv+0x38>
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	28 23       	and	r18, r24
    36f8:	39 23       	and	r19, r25
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	12 16       	cp	r1, r18
    36fe:	13 06       	cpc	r1, r19
    3700:	3c f4       	brge	.+14     	; 0x3710 <_ZN4VHOD8vrednostEv+0x5c>
    3702:	81 83       	std	Z+1, r24	; 0x01
    3704:	de cf       	rjmp	.-68     	; 0x36c2 <_ZN4VHOD8vrednostEv+0xe>
    3706:	83 b1       	in	r24, 0x03	; 3
    3708:	ed cf       	rjmp	.-38     	; 0x36e4 <_ZN4VHOD8vrednostEv+0x30>
    370a:	92 83       	std	Z+2, r25	; 0x02
    370c:	90 83       	st	Z, r25
    370e:	08 95       	ret
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	81 83       	std	Z+1, r24	; 0x01
    3714:	d6 cf       	rjmp	.-84     	; 0x36c2 <_ZN4VHOD8vrednostEv+0xe>

00003716 <_ZN4VHOD11fallingEdgeEv>:

bool VHOD::fallingEdge()
{
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	ec 01       	movw	r28, r24
	vrednost();
    371c:	cb df       	rcall	.-106    	; 0x36b4 <_ZN4VHOD8vrednostEv>
	if (trenutno_stanje)
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	81 11       	cpse	r24, r1
    3722:	06 c0       	rjmp	.+12     	; 0x3730 <_ZN4VHOD11fallingEdgeEv+0x1a>
	{
		fl_edge = false;
	}
	else if (fl_edge)
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	81 11       	cpse	r24, r1
	{
		fl_edge = false;
    3728:	1b 82       	std	Y+3, r1	; 0x03
		return true;
	}
	return false;
}
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	08 95       	ret
bool VHOD::fallingEdge()
{
	vrednost();
	if (trenutno_stanje)
	{
		fl_edge = false;
    3730:	1b 82       	std	Y+3, r1	; 0x03
	else if (fl_edge)
	{
		fl_edge = false;
		return true;
	}
	return false;
    3732:	80 e0       	ldi	r24, 0x00	; 0
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

0000373a <__subsf3>:
    373a:	50 58       	subi	r21, 0x80	; 128

0000373c <__addsf3>:
    373c:	bb 27       	eor	r27, r27
    373e:	aa 27       	eor	r26, r26
    3740:	0e d0       	rcall	.+28     	; 0x375e <__addsf3x>
    3742:	48 c1       	rjmp	.+656    	; 0x39d4 <__fp_round>
    3744:	39 d1       	rcall	.+626    	; 0x39b8 <__fp_pscA>
    3746:	30 f0       	brcs	.+12     	; 0x3754 <__addsf3+0x18>
    3748:	3e d1       	rcall	.+636    	; 0x39c6 <__fp_pscB>
    374a:	20 f0       	brcs	.+8      	; 0x3754 <__addsf3+0x18>
    374c:	31 f4       	brne	.+12     	; 0x375a <__addsf3+0x1e>
    374e:	9f 3f       	cpi	r25, 0xFF	; 255
    3750:	11 f4       	brne	.+4      	; 0x3756 <__addsf3+0x1a>
    3752:	1e f4       	brtc	.+6      	; 0x375a <__addsf3+0x1e>
    3754:	2e c1       	rjmp	.+604    	; 0x39b2 <__fp_nan>
    3756:	0e f4       	brtc	.+2      	; 0x375a <__addsf3+0x1e>
    3758:	e0 95       	com	r30
    375a:	e7 fb       	bst	r30, 7
    375c:	24 c1       	rjmp	.+584    	; 0x39a6 <__fp_inf>

0000375e <__addsf3x>:
    375e:	e9 2f       	mov	r30, r25
    3760:	4a d1       	rcall	.+660    	; 0x39f6 <__fp_split3>
    3762:	80 f3       	brcs	.-32     	; 0x3744 <__addsf3+0x8>
    3764:	ba 17       	cp	r27, r26
    3766:	62 07       	cpc	r22, r18
    3768:	73 07       	cpc	r23, r19
    376a:	84 07       	cpc	r24, r20
    376c:	95 07       	cpc	r25, r21
    376e:	18 f0       	brcs	.+6      	; 0x3776 <__addsf3x+0x18>
    3770:	71 f4       	brne	.+28     	; 0x378e <__addsf3x+0x30>
    3772:	9e f5       	brtc	.+102    	; 0x37da <__addsf3x+0x7c>
    3774:	62 c1       	rjmp	.+708    	; 0x3a3a <__fp_zero>
    3776:	0e f4       	brtc	.+2      	; 0x377a <__addsf3x+0x1c>
    3778:	e0 95       	com	r30
    377a:	0b 2e       	mov	r0, r27
    377c:	ba 2f       	mov	r27, r26
    377e:	a0 2d       	mov	r26, r0
    3780:	0b 01       	movw	r0, r22
    3782:	b9 01       	movw	r22, r18
    3784:	90 01       	movw	r18, r0
    3786:	0c 01       	movw	r0, r24
    3788:	ca 01       	movw	r24, r20
    378a:	a0 01       	movw	r20, r0
    378c:	11 24       	eor	r1, r1
    378e:	ff 27       	eor	r31, r31
    3790:	59 1b       	sub	r21, r25
    3792:	99 f0       	breq	.+38     	; 0x37ba <__addsf3x+0x5c>
    3794:	59 3f       	cpi	r21, 0xF9	; 249
    3796:	50 f4       	brcc	.+20     	; 0x37ac <__addsf3x+0x4e>
    3798:	50 3e       	cpi	r21, 0xE0	; 224
    379a:	68 f1       	brcs	.+90     	; 0x37f6 <__addsf3x+0x98>
    379c:	1a 16       	cp	r1, r26
    379e:	f0 40       	sbci	r31, 0x00	; 0
    37a0:	a2 2f       	mov	r26, r18
    37a2:	23 2f       	mov	r18, r19
    37a4:	34 2f       	mov	r19, r20
    37a6:	44 27       	eor	r20, r20
    37a8:	58 5f       	subi	r21, 0xF8	; 248
    37aa:	f3 cf       	rjmp	.-26     	; 0x3792 <__addsf3x+0x34>
    37ac:	46 95       	lsr	r20
    37ae:	37 95       	ror	r19
    37b0:	27 95       	ror	r18
    37b2:	a7 95       	ror	r26
    37b4:	f0 40       	sbci	r31, 0x00	; 0
    37b6:	53 95       	inc	r21
    37b8:	c9 f7       	brne	.-14     	; 0x37ac <__addsf3x+0x4e>
    37ba:	7e f4       	brtc	.+30     	; 0x37da <__addsf3x+0x7c>
    37bc:	1f 16       	cp	r1, r31
    37be:	ba 0b       	sbc	r27, r26
    37c0:	62 0b       	sbc	r22, r18
    37c2:	73 0b       	sbc	r23, r19
    37c4:	84 0b       	sbc	r24, r20
    37c6:	ba f0       	brmi	.+46     	; 0x37f6 <__addsf3x+0x98>
    37c8:	91 50       	subi	r25, 0x01	; 1
    37ca:	a1 f0       	breq	.+40     	; 0x37f4 <__addsf3x+0x96>
    37cc:	ff 0f       	add	r31, r31
    37ce:	bb 1f       	adc	r27, r27
    37d0:	66 1f       	adc	r22, r22
    37d2:	77 1f       	adc	r23, r23
    37d4:	88 1f       	adc	r24, r24
    37d6:	c2 f7       	brpl	.-16     	; 0x37c8 <__addsf3x+0x6a>
    37d8:	0e c0       	rjmp	.+28     	; 0x37f6 <__addsf3x+0x98>
    37da:	ba 0f       	add	r27, r26
    37dc:	62 1f       	adc	r22, r18
    37de:	73 1f       	adc	r23, r19
    37e0:	84 1f       	adc	r24, r20
    37e2:	48 f4       	brcc	.+18     	; 0x37f6 <__addsf3x+0x98>
    37e4:	87 95       	ror	r24
    37e6:	77 95       	ror	r23
    37e8:	67 95       	ror	r22
    37ea:	b7 95       	ror	r27
    37ec:	f7 95       	ror	r31
    37ee:	9e 3f       	cpi	r25, 0xFE	; 254
    37f0:	08 f0       	brcs	.+2      	; 0x37f4 <__addsf3x+0x96>
    37f2:	b3 cf       	rjmp	.-154    	; 0x375a <__addsf3+0x1e>
    37f4:	93 95       	inc	r25
    37f6:	88 0f       	add	r24, r24
    37f8:	08 f0       	brcs	.+2      	; 0x37fc <__addsf3x+0x9e>
    37fa:	99 27       	eor	r25, r25
    37fc:	ee 0f       	add	r30, r30
    37fe:	97 95       	ror	r25
    3800:	87 95       	ror	r24
    3802:	08 95       	ret

00003804 <__divsf3>:
    3804:	0c d0       	rcall	.+24     	; 0x381e <__divsf3x>
    3806:	e6 c0       	rjmp	.+460    	; 0x39d4 <__fp_round>
    3808:	de d0       	rcall	.+444    	; 0x39c6 <__fp_pscB>
    380a:	40 f0       	brcs	.+16     	; 0x381c <__divsf3+0x18>
    380c:	d5 d0       	rcall	.+426    	; 0x39b8 <__fp_pscA>
    380e:	30 f0       	brcs	.+12     	; 0x381c <__divsf3+0x18>
    3810:	21 f4       	brne	.+8      	; 0x381a <__divsf3+0x16>
    3812:	5f 3f       	cpi	r21, 0xFF	; 255
    3814:	19 f0       	breq	.+6      	; 0x381c <__divsf3+0x18>
    3816:	c7 c0       	rjmp	.+398    	; 0x39a6 <__fp_inf>
    3818:	51 11       	cpse	r21, r1
    381a:	10 c1       	rjmp	.+544    	; 0x3a3c <__fp_szero>
    381c:	ca c0       	rjmp	.+404    	; 0x39b2 <__fp_nan>

0000381e <__divsf3x>:
    381e:	eb d0       	rcall	.+470    	; 0x39f6 <__fp_split3>
    3820:	98 f3       	brcs	.-26     	; 0x3808 <__divsf3+0x4>

00003822 <__divsf3_pse>:
    3822:	99 23       	and	r25, r25
    3824:	c9 f3       	breq	.-14     	; 0x3818 <__divsf3+0x14>
    3826:	55 23       	and	r21, r21
    3828:	b1 f3       	breq	.-20     	; 0x3816 <__divsf3+0x12>
    382a:	95 1b       	sub	r25, r21
    382c:	55 0b       	sbc	r21, r21
    382e:	bb 27       	eor	r27, r27
    3830:	aa 27       	eor	r26, r26
    3832:	62 17       	cp	r22, r18
    3834:	73 07       	cpc	r23, r19
    3836:	84 07       	cpc	r24, r20
    3838:	38 f0       	brcs	.+14     	; 0x3848 <__divsf3_pse+0x26>
    383a:	9f 5f       	subi	r25, 0xFF	; 255
    383c:	5f 4f       	sbci	r21, 0xFF	; 255
    383e:	22 0f       	add	r18, r18
    3840:	33 1f       	adc	r19, r19
    3842:	44 1f       	adc	r20, r20
    3844:	aa 1f       	adc	r26, r26
    3846:	a9 f3       	breq	.-22     	; 0x3832 <__divsf3_pse+0x10>
    3848:	33 d0       	rcall	.+102    	; 0x38b0 <__divsf3_pse+0x8e>
    384a:	0e 2e       	mov	r0, r30
    384c:	3a f0       	brmi	.+14     	; 0x385c <__divsf3_pse+0x3a>
    384e:	e0 e8       	ldi	r30, 0x80	; 128
    3850:	30 d0       	rcall	.+96     	; 0x38b2 <__divsf3_pse+0x90>
    3852:	91 50       	subi	r25, 0x01	; 1
    3854:	50 40       	sbci	r21, 0x00	; 0
    3856:	e6 95       	lsr	r30
    3858:	00 1c       	adc	r0, r0
    385a:	ca f7       	brpl	.-14     	; 0x384e <__divsf3_pse+0x2c>
    385c:	29 d0       	rcall	.+82     	; 0x38b0 <__divsf3_pse+0x8e>
    385e:	fe 2f       	mov	r31, r30
    3860:	27 d0       	rcall	.+78     	; 0x38b0 <__divsf3_pse+0x8e>
    3862:	66 0f       	add	r22, r22
    3864:	77 1f       	adc	r23, r23
    3866:	88 1f       	adc	r24, r24
    3868:	bb 1f       	adc	r27, r27
    386a:	26 17       	cp	r18, r22
    386c:	37 07       	cpc	r19, r23
    386e:	48 07       	cpc	r20, r24
    3870:	ab 07       	cpc	r26, r27
    3872:	b0 e8       	ldi	r27, 0x80	; 128
    3874:	09 f0       	breq	.+2      	; 0x3878 <__divsf3_pse+0x56>
    3876:	bb 0b       	sbc	r27, r27
    3878:	80 2d       	mov	r24, r0
    387a:	bf 01       	movw	r22, r30
    387c:	ff 27       	eor	r31, r31
    387e:	93 58       	subi	r25, 0x83	; 131
    3880:	5f 4f       	sbci	r21, 0xFF	; 255
    3882:	2a f0       	brmi	.+10     	; 0x388e <__divsf3_pse+0x6c>
    3884:	9e 3f       	cpi	r25, 0xFE	; 254
    3886:	51 05       	cpc	r21, r1
    3888:	68 f0       	brcs	.+26     	; 0x38a4 <__divsf3_pse+0x82>
    388a:	8d c0       	rjmp	.+282    	; 0x39a6 <__fp_inf>
    388c:	d7 c0       	rjmp	.+430    	; 0x3a3c <__fp_szero>
    388e:	5f 3f       	cpi	r21, 0xFF	; 255
    3890:	ec f3       	brlt	.-6      	; 0x388c <__divsf3_pse+0x6a>
    3892:	98 3e       	cpi	r25, 0xE8	; 232
    3894:	dc f3       	brlt	.-10     	; 0x388c <__divsf3_pse+0x6a>
    3896:	86 95       	lsr	r24
    3898:	77 95       	ror	r23
    389a:	67 95       	ror	r22
    389c:	b7 95       	ror	r27
    389e:	f7 95       	ror	r31
    38a0:	9f 5f       	subi	r25, 0xFF	; 255
    38a2:	c9 f7       	brne	.-14     	; 0x3896 <__divsf3_pse+0x74>
    38a4:	88 0f       	add	r24, r24
    38a6:	91 1d       	adc	r25, r1
    38a8:	96 95       	lsr	r25
    38aa:	87 95       	ror	r24
    38ac:	97 f9       	bld	r25, 7
    38ae:	08 95       	ret
    38b0:	e1 e0       	ldi	r30, 0x01	; 1
    38b2:	66 0f       	add	r22, r22
    38b4:	77 1f       	adc	r23, r23
    38b6:	88 1f       	adc	r24, r24
    38b8:	bb 1f       	adc	r27, r27
    38ba:	62 17       	cp	r22, r18
    38bc:	73 07       	cpc	r23, r19
    38be:	84 07       	cpc	r24, r20
    38c0:	ba 07       	cpc	r27, r26
    38c2:	20 f0       	brcs	.+8      	; 0x38cc <__divsf3_pse+0xaa>
    38c4:	62 1b       	sub	r22, r18
    38c6:	73 0b       	sbc	r23, r19
    38c8:	84 0b       	sbc	r24, r20
    38ca:	ba 0b       	sbc	r27, r26
    38cc:	ee 1f       	adc	r30, r30
    38ce:	88 f7       	brcc	.-30     	; 0x38b2 <__divsf3_pse+0x90>
    38d0:	e0 95       	com	r30
    38d2:	08 95       	ret

000038d4 <__fixunssfsi>:
    38d4:	98 d0       	rcall	.+304    	; 0x3a06 <__fp_splitA>
    38d6:	88 f0       	brcs	.+34     	; 0x38fa <__fixunssfsi+0x26>
    38d8:	9f 57       	subi	r25, 0x7F	; 127
    38da:	90 f0       	brcs	.+36     	; 0x3900 <__fixunssfsi+0x2c>
    38dc:	b9 2f       	mov	r27, r25
    38de:	99 27       	eor	r25, r25
    38e0:	b7 51       	subi	r27, 0x17	; 23
    38e2:	a0 f0       	brcs	.+40     	; 0x390c <__fixunssfsi+0x38>
    38e4:	d1 f0       	breq	.+52     	; 0x391a <__fixunssfsi+0x46>
    38e6:	66 0f       	add	r22, r22
    38e8:	77 1f       	adc	r23, r23
    38ea:	88 1f       	adc	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	1a f0       	brmi	.+6      	; 0x38f6 <__fixunssfsi+0x22>
    38f0:	ba 95       	dec	r27
    38f2:	c9 f7       	brne	.-14     	; 0x38e6 <__fixunssfsi+0x12>
    38f4:	12 c0       	rjmp	.+36     	; 0x391a <__fixunssfsi+0x46>
    38f6:	b1 30       	cpi	r27, 0x01	; 1
    38f8:	81 f0       	breq	.+32     	; 0x391a <__fixunssfsi+0x46>
    38fa:	9f d0       	rcall	.+318    	; 0x3a3a <__fp_zero>
    38fc:	b1 e0       	ldi	r27, 0x01	; 1
    38fe:	08 95       	ret
    3900:	9c c0       	rjmp	.+312    	; 0x3a3a <__fp_zero>
    3902:	67 2f       	mov	r22, r23
    3904:	78 2f       	mov	r23, r24
    3906:	88 27       	eor	r24, r24
    3908:	b8 5f       	subi	r27, 0xF8	; 248
    390a:	39 f0       	breq	.+14     	; 0x391a <__fixunssfsi+0x46>
    390c:	b9 3f       	cpi	r27, 0xF9	; 249
    390e:	cc f3       	brlt	.-14     	; 0x3902 <__fixunssfsi+0x2e>
    3910:	86 95       	lsr	r24
    3912:	77 95       	ror	r23
    3914:	67 95       	ror	r22
    3916:	b3 95       	inc	r27
    3918:	d9 f7       	brne	.-10     	; 0x3910 <__fixunssfsi+0x3c>
    391a:	3e f4       	brtc	.+14     	; 0x392a <__fixunssfsi+0x56>
    391c:	90 95       	com	r25
    391e:	80 95       	com	r24
    3920:	70 95       	com	r23
    3922:	61 95       	neg	r22
    3924:	7f 4f       	sbci	r23, 0xFF	; 255
    3926:	8f 4f       	sbci	r24, 0xFF	; 255
    3928:	9f 4f       	sbci	r25, 0xFF	; 255
    392a:	08 95       	ret

0000392c <__floatunsisf>:
    392c:	e8 94       	clt
    392e:	09 c0       	rjmp	.+18     	; 0x3942 <__floatsisf+0x12>

00003930 <__floatsisf>:
    3930:	97 fb       	bst	r25, 7
    3932:	3e f4       	brtc	.+14     	; 0x3942 <__floatsisf+0x12>
    3934:	90 95       	com	r25
    3936:	80 95       	com	r24
    3938:	70 95       	com	r23
    393a:	61 95       	neg	r22
    393c:	7f 4f       	sbci	r23, 0xFF	; 255
    393e:	8f 4f       	sbci	r24, 0xFF	; 255
    3940:	9f 4f       	sbci	r25, 0xFF	; 255
    3942:	99 23       	and	r25, r25
    3944:	a9 f0       	breq	.+42     	; 0x3970 <__floatsisf+0x40>
    3946:	f9 2f       	mov	r31, r25
    3948:	96 e9       	ldi	r25, 0x96	; 150
    394a:	bb 27       	eor	r27, r27
    394c:	93 95       	inc	r25
    394e:	f6 95       	lsr	r31
    3950:	87 95       	ror	r24
    3952:	77 95       	ror	r23
    3954:	67 95       	ror	r22
    3956:	b7 95       	ror	r27
    3958:	f1 11       	cpse	r31, r1
    395a:	f8 cf       	rjmp	.-16     	; 0x394c <__floatsisf+0x1c>
    395c:	fa f4       	brpl	.+62     	; 0x399c <__floatsisf+0x6c>
    395e:	bb 0f       	add	r27, r27
    3960:	11 f4       	brne	.+4      	; 0x3966 <__floatsisf+0x36>
    3962:	60 ff       	sbrs	r22, 0
    3964:	1b c0       	rjmp	.+54     	; 0x399c <__floatsisf+0x6c>
    3966:	6f 5f       	subi	r22, 0xFF	; 255
    3968:	7f 4f       	sbci	r23, 0xFF	; 255
    396a:	8f 4f       	sbci	r24, 0xFF	; 255
    396c:	9f 4f       	sbci	r25, 0xFF	; 255
    396e:	16 c0       	rjmp	.+44     	; 0x399c <__floatsisf+0x6c>
    3970:	88 23       	and	r24, r24
    3972:	11 f0       	breq	.+4      	; 0x3978 <__floatsisf+0x48>
    3974:	96 e9       	ldi	r25, 0x96	; 150
    3976:	11 c0       	rjmp	.+34     	; 0x399a <__floatsisf+0x6a>
    3978:	77 23       	and	r23, r23
    397a:	21 f0       	breq	.+8      	; 0x3984 <__floatsisf+0x54>
    397c:	9e e8       	ldi	r25, 0x8E	; 142
    397e:	87 2f       	mov	r24, r23
    3980:	76 2f       	mov	r23, r22
    3982:	05 c0       	rjmp	.+10     	; 0x398e <__floatsisf+0x5e>
    3984:	66 23       	and	r22, r22
    3986:	71 f0       	breq	.+28     	; 0x39a4 <__floatsisf+0x74>
    3988:	96 e8       	ldi	r25, 0x86	; 134
    398a:	86 2f       	mov	r24, r22
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	2a f0       	brmi	.+10     	; 0x399c <__floatsisf+0x6c>
    3992:	9a 95       	dec	r25
    3994:	66 0f       	add	r22, r22
    3996:	77 1f       	adc	r23, r23
    3998:	88 1f       	adc	r24, r24
    399a:	da f7       	brpl	.-10     	; 0x3992 <__floatsisf+0x62>
    399c:	88 0f       	add	r24, r24
    399e:	96 95       	lsr	r25
    39a0:	87 95       	ror	r24
    39a2:	97 f9       	bld	r25, 7
    39a4:	08 95       	ret

000039a6 <__fp_inf>:
    39a6:	97 f9       	bld	r25, 7
    39a8:	9f 67       	ori	r25, 0x7F	; 127
    39aa:	80 e8       	ldi	r24, 0x80	; 128
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	08 95       	ret

000039b2 <__fp_nan>:
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	80 ec       	ldi	r24, 0xC0	; 192
    39b6:	08 95       	ret

000039b8 <__fp_pscA>:
    39b8:	00 24       	eor	r0, r0
    39ba:	0a 94       	dec	r0
    39bc:	16 16       	cp	r1, r22
    39be:	17 06       	cpc	r1, r23
    39c0:	18 06       	cpc	r1, r24
    39c2:	09 06       	cpc	r0, r25
    39c4:	08 95       	ret

000039c6 <__fp_pscB>:
    39c6:	00 24       	eor	r0, r0
    39c8:	0a 94       	dec	r0
    39ca:	12 16       	cp	r1, r18
    39cc:	13 06       	cpc	r1, r19
    39ce:	14 06       	cpc	r1, r20
    39d0:	05 06       	cpc	r0, r21
    39d2:	08 95       	ret

000039d4 <__fp_round>:
    39d4:	09 2e       	mov	r0, r25
    39d6:	03 94       	inc	r0
    39d8:	00 0c       	add	r0, r0
    39da:	11 f4       	brne	.+4      	; 0x39e0 <__fp_round+0xc>
    39dc:	88 23       	and	r24, r24
    39de:	52 f0       	brmi	.+20     	; 0x39f4 <__fp_round+0x20>
    39e0:	bb 0f       	add	r27, r27
    39e2:	40 f4       	brcc	.+16     	; 0x39f4 <__fp_round+0x20>
    39e4:	bf 2b       	or	r27, r31
    39e6:	11 f4       	brne	.+4      	; 0x39ec <__fp_round+0x18>
    39e8:	60 ff       	sbrs	r22, 0
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <__fp_round+0x20>
    39ec:	6f 5f       	subi	r22, 0xFF	; 255
    39ee:	7f 4f       	sbci	r23, 0xFF	; 255
    39f0:	8f 4f       	sbci	r24, 0xFF	; 255
    39f2:	9f 4f       	sbci	r25, 0xFF	; 255
    39f4:	08 95       	ret

000039f6 <__fp_split3>:
    39f6:	57 fd       	sbrc	r21, 7
    39f8:	90 58       	subi	r25, 0x80	; 128
    39fa:	44 0f       	add	r20, r20
    39fc:	55 1f       	adc	r21, r21
    39fe:	59 f0       	breq	.+22     	; 0x3a16 <__fp_splitA+0x10>
    3a00:	5f 3f       	cpi	r21, 0xFF	; 255
    3a02:	71 f0       	breq	.+28     	; 0x3a20 <__fp_splitA+0x1a>
    3a04:	47 95       	ror	r20

00003a06 <__fp_splitA>:
    3a06:	88 0f       	add	r24, r24
    3a08:	97 fb       	bst	r25, 7
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	61 f0       	breq	.+24     	; 0x3a26 <__fp_splitA+0x20>
    3a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    3a10:	79 f0       	breq	.+30     	; 0x3a30 <__fp_splitA+0x2a>
    3a12:	87 95       	ror	r24
    3a14:	08 95       	ret
    3a16:	12 16       	cp	r1, r18
    3a18:	13 06       	cpc	r1, r19
    3a1a:	14 06       	cpc	r1, r20
    3a1c:	55 1f       	adc	r21, r21
    3a1e:	f2 cf       	rjmp	.-28     	; 0x3a04 <__fp_split3+0xe>
    3a20:	46 95       	lsr	r20
    3a22:	f1 df       	rcall	.-30     	; 0x3a06 <__fp_splitA>
    3a24:	08 c0       	rjmp	.+16     	; 0x3a36 <__fp_splitA+0x30>
    3a26:	16 16       	cp	r1, r22
    3a28:	17 06       	cpc	r1, r23
    3a2a:	18 06       	cpc	r1, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	f1 cf       	rjmp	.-30     	; 0x3a12 <__fp_splitA+0xc>
    3a30:	86 95       	lsr	r24
    3a32:	71 05       	cpc	r23, r1
    3a34:	61 05       	cpc	r22, r1
    3a36:	08 94       	sec
    3a38:	08 95       	ret

00003a3a <__fp_zero>:
    3a3a:	e8 94       	clt

00003a3c <__fp_szero>:
    3a3c:	bb 27       	eor	r27, r27
    3a3e:	66 27       	eor	r22, r22
    3a40:	77 27       	eor	r23, r23
    3a42:	cb 01       	movw	r24, r22
    3a44:	97 f9       	bld	r25, 7
    3a46:	08 95       	ret

00003a48 <__gesf2>:
    3a48:	66 d0       	rcall	.+204    	; 0x3b16 <__fp_cmp>
    3a4a:	08 f4       	brcc	.+2      	; 0x3a4e <__gesf2+0x6>
    3a4c:	8f ef       	ldi	r24, 0xFF	; 255
    3a4e:	08 95       	ret

00003a50 <__mulsf3>:
    3a50:	0b d0       	rcall	.+22     	; 0x3a68 <__mulsf3x>
    3a52:	c0 cf       	rjmp	.-128    	; 0x39d4 <__fp_round>
    3a54:	b1 df       	rcall	.-158    	; 0x39b8 <__fp_pscA>
    3a56:	28 f0       	brcs	.+10     	; 0x3a62 <__mulsf3+0x12>
    3a58:	b6 df       	rcall	.-148    	; 0x39c6 <__fp_pscB>
    3a5a:	18 f0       	brcs	.+6      	; 0x3a62 <__mulsf3+0x12>
    3a5c:	95 23       	and	r25, r21
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <__mulsf3+0x12>
    3a60:	a2 cf       	rjmp	.-188    	; 0x39a6 <__fp_inf>
    3a62:	a7 cf       	rjmp	.-178    	; 0x39b2 <__fp_nan>
    3a64:	11 24       	eor	r1, r1
    3a66:	ea cf       	rjmp	.-44     	; 0x3a3c <__fp_szero>

00003a68 <__mulsf3x>:
    3a68:	c6 df       	rcall	.-116    	; 0x39f6 <__fp_split3>
    3a6a:	a0 f3       	brcs	.-24     	; 0x3a54 <__mulsf3+0x4>

00003a6c <__mulsf3_pse>:
    3a6c:	95 9f       	mul	r25, r21
    3a6e:	d1 f3       	breq	.-12     	; 0x3a64 <__mulsf3+0x14>
    3a70:	95 0f       	add	r25, r21
    3a72:	50 e0       	ldi	r21, 0x00	; 0
    3a74:	55 1f       	adc	r21, r21
    3a76:	62 9f       	mul	r22, r18
    3a78:	f0 01       	movw	r30, r0
    3a7a:	72 9f       	mul	r23, r18
    3a7c:	bb 27       	eor	r27, r27
    3a7e:	f0 0d       	add	r31, r0
    3a80:	b1 1d       	adc	r27, r1
    3a82:	63 9f       	mul	r22, r19
    3a84:	aa 27       	eor	r26, r26
    3a86:	f0 0d       	add	r31, r0
    3a88:	b1 1d       	adc	r27, r1
    3a8a:	aa 1f       	adc	r26, r26
    3a8c:	64 9f       	mul	r22, r20
    3a8e:	66 27       	eor	r22, r22
    3a90:	b0 0d       	add	r27, r0
    3a92:	a1 1d       	adc	r26, r1
    3a94:	66 1f       	adc	r22, r22
    3a96:	82 9f       	mul	r24, r18
    3a98:	22 27       	eor	r18, r18
    3a9a:	b0 0d       	add	r27, r0
    3a9c:	a1 1d       	adc	r26, r1
    3a9e:	62 1f       	adc	r22, r18
    3aa0:	73 9f       	mul	r23, r19
    3aa2:	b0 0d       	add	r27, r0
    3aa4:	a1 1d       	adc	r26, r1
    3aa6:	62 1f       	adc	r22, r18
    3aa8:	83 9f       	mul	r24, r19
    3aaa:	a0 0d       	add	r26, r0
    3aac:	61 1d       	adc	r22, r1
    3aae:	22 1f       	adc	r18, r18
    3ab0:	74 9f       	mul	r23, r20
    3ab2:	33 27       	eor	r19, r19
    3ab4:	a0 0d       	add	r26, r0
    3ab6:	61 1d       	adc	r22, r1
    3ab8:	23 1f       	adc	r18, r19
    3aba:	84 9f       	mul	r24, r20
    3abc:	60 0d       	add	r22, r0
    3abe:	21 1d       	adc	r18, r1
    3ac0:	82 2f       	mov	r24, r18
    3ac2:	76 2f       	mov	r23, r22
    3ac4:	6a 2f       	mov	r22, r26
    3ac6:	11 24       	eor	r1, r1
    3ac8:	9f 57       	subi	r25, 0x7F	; 127
    3aca:	50 40       	sbci	r21, 0x00	; 0
    3acc:	8a f0       	brmi	.+34     	; 0x3af0 <__mulsf3_pse+0x84>
    3ace:	e1 f0       	breq	.+56     	; 0x3b08 <__mulsf3_pse+0x9c>
    3ad0:	88 23       	and	r24, r24
    3ad2:	4a f0       	brmi	.+18     	; 0x3ae6 <__mulsf3_pse+0x7a>
    3ad4:	ee 0f       	add	r30, r30
    3ad6:	ff 1f       	adc	r31, r31
    3ad8:	bb 1f       	adc	r27, r27
    3ada:	66 1f       	adc	r22, r22
    3adc:	77 1f       	adc	r23, r23
    3ade:	88 1f       	adc	r24, r24
    3ae0:	91 50       	subi	r25, 0x01	; 1
    3ae2:	50 40       	sbci	r21, 0x00	; 0
    3ae4:	a9 f7       	brne	.-22     	; 0x3ad0 <__mulsf3_pse+0x64>
    3ae6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ae8:	51 05       	cpc	r21, r1
    3aea:	70 f0       	brcs	.+28     	; 0x3b08 <__mulsf3_pse+0x9c>
    3aec:	5c cf       	rjmp	.-328    	; 0x39a6 <__fp_inf>
    3aee:	a6 cf       	rjmp	.-180    	; 0x3a3c <__fp_szero>
    3af0:	5f 3f       	cpi	r21, 0xFF	; 255
    3af2:	ec f3       	brlt	.-6      	; 0x3aee <__mulsf3_pse+0x82>
    3af4:	98 3e       	cpi	r25, 0xE8	; 232
    3af6:	dc f3       	brlt	.-10     	; 0x3aee <__mulsf3_pse+0x82>
    3af8:	86 95       	lsr	r24
    3afa:	77 95       	ror	r23
    3afc:	67 95       	ror	r22
    3afe:	b7 95       	ror	r27
    3b00:	f7 95       	ror	r31
    3b02:	e7 95       	ror	r30
    3b04:	9f 5f       	subi	r25, 0xFF	; 255
    3b06:	c1 f7       	brne	.-16     	; 0x3af8 <__mulsf3_pse+0x8c>
    3b08:	fe 2b       	or	r31, r30
    3b0a:	88 0f       	add	r24, r24
    3b0c:	91 1d       	adc	r25, r1
    3b0e:	96 95       	lsr	r25
    3b10:	87 95       	ror	r24
    3b12:	97 f9       	bld	r25, 7
    3b14:	08 95       	ret

00003b16 <__fp_cmp>:
    3b16:	99 0f       	add	r25, r25
    3b18:	00 08       	sbc	r0, r0
    3b1a:	55 0f       	add	r21, r21
    3b1c:	aa 0b       	sbc	r26, r26
    3b1e:	e0 e8       	ldi	r30, 0x80	; 128
    3b20:	fe ef       	ldi	r31, 0xFE	; 254
    3b22:	16 16       	cp	r1, r22
    3b24:	17 06       	cpc	r1, r23
    3b26:	e8 07       	cpc	r30, r24
    3b28:	f9 07       	cpc	r31, r25
    3b2a:	c0 f0       	brcs	.+48     	; 0x3b5c <__fp_cmp+0x46>
    3b2c:	12 16       	cp	r1, r18
    3b2e:	13 06       	cpc	r1, r19
    3b30:	e4 07       	cpc	r30, r20
    3b32:	f5 07       	cpc	r31, r21
    3b34:	98 f0       	brcs	.+38     	; 0x3b5c <__fp_cmp+0x46>
    3b36:	62 1b       	sub	r22, r18
    3b38:	73 0b       	sbc	r23, r19
    3b3a:	84 0b       	sbc	r24, r20
    3b3c:	95 0b       	sbc	r25, r21
    3b3e:	39 f4       	brne	.+14     	; 0x3b4e <__fp_cmp+0x38>
    3b40:	0a 26       	eor	r0, r26
    3b42:	61 f0       	breq	.+24     	; 0x3b5c <__fp_cmp+0x46>
    3b44:	23 2b       	or	r18, r19
    3b46:	24 2b       	or	r18, r20
    3b48:	25 2b       	or	r18, r21
    3b4a:	21 f4       	brne	.+8      	; 0x3b54 <__fp_cmp+0x3e>
    3b4c:	08 95       	ret
    3b4e:	0a 26       	eor	r0, r26
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <__fp_cmp+0x3e>
    3b52:	a1 40       	sbci	r26, 0x01	; 1
    3b54:	a6 95       	lsr	r26
    3b56:	8f ef       	ldi	r24, 0xFF	; 255
    3b58:	81 1d       	adc	r24, r1
    3b5a:	81 1d       	adc	r24, r1
    3b5c:	08 95       	ret

00003b5e <__divmodhi4>:
    3b5e:	97 fb       	bst	r25, 7
    3b60:	07 2e       	mov	r0, r23
    3b62:	16 f4       	brtc	.+4      	; 0x3b68 <__divmodhi4+0xa>
    3b64:	00 94       	com	r0
    3b66:	06 d0       	rcall	.+12     	; 0x3b74 <__divmodhi4_neg1>
    3b68:	77 fd       	sbrc	r23, 7
    3b6a:	08 d0       	rcall	.+16     	; 0x3b7c <__divmodhi4_neg2>
    3b6c:	44 d0       	rcall	.+136    	; 0x3bf6 <__udivmodhi4>
    3b6e:	07 fc       	sbrc	r0, 7
    3b70:	05 d0       	rcall	.+10     	; 0x3b7c <__divmodhi4_neg2>
    3b72:	3e f4       	brtc	.+14     	; 0x3b82 <__divmodhi4_exit>

00003b74 <__divmodhi4_neg1>:
    3b74:	90 95       	com	r25
    3b76:	81 95       	neg	r24
    3b78:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7a:	08 95       	ret

00003b7c <__divmodhi4_neg2>:
    3b7c:	70 95       	com	r23
    3b7e:	61 95       	neg	r22
    3b80:	7f 4f       	sbci	r23, 0xFF	; 255

00003b82 <__divmodhi4_exit>:
    3b82:	08 95       	ret

00003b84 <__udivmodsi4>:
    3b84:	a1 e2       	ldi	r26, 0x21	; 33
    3b86:	1a 2e       	mov	r1, r26
    3b88:	aa 1b       	sub	r26, r26
    3b8a:	bb 1b       	sub	r27, r27
    3b8c:	fd 01       	movw	r30, r26
    3b8e:	0d c0       	rjmp	.+26     	; 0x3baa <__udivmodsi4_ep>

00003b90 <__udivmodsi4_loop>:
    3b90:	aa 1f       	adc	r26, r26
    3b92:	bb 1f       	adc	r27, r27
    3b94:	ee 1f       	adc	r30, r30
    3b96:	ff 1f       	adc	r31, r31
    3b98:	a2 17       	cp	r26, r18
    3b9a:	b3 07       	cpc	r27, r19
    3b9c:	e4 07       	cpc	r30, r20
    3b9e:	f5 07       	cpc	r31, r21
    3ba0:	20 f0       	brcs	.+8      	; 0x3baa <__udivmodsi4_ep>
    3ba2:	a2 1b       	sub	r26, r18
    3ba4:	b3 0b       	sbc	r27, r19
    3ba6:	e4 0b       	sbc	r30, r20
    3ba8:	f5 0b       	sbc	r31, r21

00003baa <__udivmodsi4_ep>:
    3baa:	66 1f       	adc	r22, r22
    3bac:	77 1f       	adc	r23, r23
    3bae:	88 1f       	adc	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	1a 94       	dec	r1
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <__udivmodsi4_loop>
    3bb6:	60 95       	com	r22
    3bb8:	70 95       	com	r23
    3bba:	80 95       	com	r24
    3bbc:	90 95       	com	r25
    3bbe:	9b 01       	movw	r18, r22
    3bc0:	ac 01       	movw	r20, r24
    3bc2:	bd 01       	movw	r22, r26
    3bc4:	cf 01       	movw	r24, r30
    3bc6:	08 95       	ret

00003bc8 <__tablejump2__>:
    3bc8:	ee 0f       	add	r30, r30
    3bca:	ff 1f       	adc	r31, r31
    3bcc:	88 1f       	adc	r24, r24
    3bce:	8b bf       	out	0x3b, r24	; 59
    3bd0:	07 90       	elpm	r0, Z+
    3bd2:	f6 91       	elpm	r31, Z
    3bd4:	e0 2d       	mov	r30, r0
    3bd6:	19 94       	eijmp

00003bd8 <__umulhisi3>:
    3bd8:	a2 9f       	mul	r26, r18
    3bda:	b0 01       	movw	r22, r0
    3bdc:	b3 9f       	mul	r27, r19
    3bde:	c0 01       	movw	r24, r0
    3be0:	a3 9f       	mul	r26, r19
    3be2:	70 0d       	add	r23, r0
    3be4:	81 1d       	adc	r24, r1
    3be6:	11 24       	eor	r1, r1
    3be8:	91 1d       	adc	r25, r1
    3bea:	b2 9f       	mul	r27, r18
    3bec:	70 0d       	add	r23, r0
    3bee:	81 1d       	adc	r24, r1
    3bf0:	11 24       	eor	r1, r1
    3bf2:	91 1d       	adc	r25, r1
    3bf4:	08 95       	ret

00003bf6 <__udivmodhi4>:
    3bf6:	aa 1b       	sub	r26, r26
    3bf8:	bb 1b       	sub	r27, r27
    3bfa:	51 e1       	ldi	r21, 0x11	; 17
    3bfc:	07 c0       	rjmp	.+14     	; 0x3c0c <__udivmodhi4_ep>

00003bfe <__udivmodhi4_loop>:
    3bfe:	aa 1f       	adc	r26, r26
    3c00:	bb 1f       	adc	r27, r27
    3c02:	a6 17       	cp	r26, r22
    3c04:	b7 07       	cpc	r27, r23
    3c06:	10 f0       	brcs	.+4      	; 0x3c0c <__udivmodhi4_ep>
    3c08:	a6 1b       	sub	r26, r22
    3c0a:	b7 0b       	sbc	r27, r23

00003c0c <__udivmodhi4_ep>:
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	5a 95       	dec	r21
    3c12:	a9 f7       	brne	.-22     	; 0x3bfe <__udivmodhi4_loop>
    3c14:	80 95       	com	r24
    3c16:	90 95       	com	r25
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	08 95       	ret

00003c1e <malloc>:
    3c1e:	0f 93       	push	r16
    3c20:	1f 93       	push	r17
    3c22:	cf 93       	push	r28
    3c24:	df 93       	push	r29
    3c26:	82 30       	cpi	r24, 0x02	; 2
    3c28:	91 05       	cpc	r25, r1
    3c2a:	10 f4       	brcc	.+4      	; 0x3c30 <malloc+0x12>
    3c2c:	82 e0       	ldi	r24, 0x02	; 2
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <__flp>
    3c34:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <__flp+0x1>
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	a0 e0       	ldi	r26, 0x00	; 0
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	30 97       	sbiw	r30, 0x00	; 0
    3c42:	19 f1       	breq	.+70     	; 0x3c8a <malloc+0x6c>
    3c44:	40 81       	ld	r20, Z
    3c46:	51 81       	ldd	r21, Z+1	; 0x01
    3c48:	02 81       	ldd	r16, Z+2	; 0x02
    3c4a:	13 81       	ldd	r17, Z+3	; 0x03
    3c4c:	48 17       	cp	r20, r24
    3c4e:	59 07       	cpc	r21, r25
    3c50:	c8 f0       	brcs	.+50     	; 0x3c84 <malloc+0x66>
    3c52:	84 17       	cp	r24, r20
    3c54:	95 07       	cpc	r25, r21
    3c56:	69 f4       	brne	.+26     	; 0x3c72 <malloc+0x54>
    3c58:	10 97       	sbiw	r26, 0x00	; 0
    3c5a:	31 f0       	breq	.+12     	; 0x3c68 <malloc+0x4a>
    3c5c:	12 96       	adiw	r26, 0x02	; 2
    3c5e:	0c 93       	st	X, r16
    3c60:	12 97       	sbiw	r26, 0x02	; 2
    3c62:	13 96       	adiw	r26, 0x03	; 3
    3c64:	1c 93       	st	X, r17
    3c66:	27 c0       	rjmp	.+78     	; 0x3cb6 <malloc+0x98>
    3c68:	00 93 a5 03 	sts	0x03A5, r16	; 0x8003a5 <__flp>
    3c6c:	10 93 a6 03 	sts	0x03A6, r17	; 0x8003a6 <__flp+0x1>
    3c70:	22 c0       	rjmp	.+68     	; 0x3cb6 <malloc+0x98>
    3c72:	21 15       	cp	r18, r1
    3c74:	31 05       	cpc	r19, r1
    3c76:	19 f0       	breq	.+6      	; 0x3c7e <malloc+0x60>
    3c78:	42 17       	cp	r20, r18
    3c7a:	53 07       	cpc	r21, r19
    3c7c:	18 f4       	brcc	.+6      	; 0x3c84 <malloc+0x66>
    3c7e:	9a 01       	movw	r18, r20
    3c80:	bd 01       	movw	r22, r26
    3c82:	ef 01       	movw	r28, r30
    3c84:	df 01       	movw	r26, r30
    3c86:	f8 01       	movw	r30, r16
    3c88:	db cf       	rjmp	.-74     	; 0x3c40 <malloc+0x22>
    3c8a:	21 15       	cp	r18, r1
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	f9 f0       	breq	.+62     	; 0x3cce <malloc+0xb0>
    3c90:	28 1b       	sub	r18, r24
    3c92:	39 0b       	sbc	r19, r25
    3c94:	24 30       	cpi	r18, 0x04	; 4
    3c96:	31 05       	cpc	r19, r1
    3c98:	80 f4       	brcc	.+32     	; 0x3cba <malloc+0x9c>
    3c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9e:	61 15       	cp	r22, r1
    3ca0:	71 05       	cpc	r23, r1
    3ca2:	21 f0       	breq	.+8      	; 0x3cac <malloc+0x8e>
    3ca4:	fb 01       	movw	r30, r22
    3ca6:	93 83       	std	Z+3, r25	; 0x03
    3ca8:	82 83       	std	Z+2, r24	; 0x02
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <malloc+0x96>
    3cac:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <__flp+0x1>
    3cb0:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <__flp>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	32 96       	adiw	r30, 0x02	; 2
    3cb8:	44 c0       	rjmp	.+136    	; 0x3d42 <malloc+0x124>
    3cba:	fe 01       	movw	r30, r28
    3cbc:	e2 0f       	add	r30, r18
    3cbe:	f3 1f       	adc	r31, r19
    3cc0:	81 93       	st	Z+, r24
    3cc2:	91 93       	st	Z+, r25
    3cc4:	22 50       	subi	r18, 0x02	; 2
    3cc6:	31 09       	sbc	r19, r1
    3cc8:	39 83       	std	Y+1, r19	; 0x01
    3cca:	28 83       	st	Y, r18
    3ccc:	3a c0       	rjmp	.+116    	; 0x3d42 <malloc+0x124>
    3cce:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <__brkval>
    3cd2:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <__brkval+0x1>
    3cd6:	23 2b       	or	r18, r19
    3cd8:	41 f4       	brne	.+16     	; 0x3cea <malloc+0xcc>
    3cda:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3cde:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3ce2:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <__brkval+0x1>
    3ce6:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <__brkval>
    3cea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3cee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3cf2:	21 15       	cp	r18, r1
    3cf4:	31 05       	cpc	r19, r1
    3cf6:	41 f4       	brne	.+16     	; 0x3d08 <malloc+0xea>
    3cf8:	2d b7       	in	r18, 0x3d	; 61
    3cfa:	3e b7       	in	r19, 0x3e	; 62
    3cfc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3d00:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3d04:	24 1b       	sub	r18, r20
    3d06:	35 0b       	sbc	r19, r21
    3d08:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <__brkval>
    3d0c:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <__brkval+0x1>
    3d10:	e2 17       	cp	r30, r18
    3d12:	f3 07       	cpc	r31, r19
    3d14:	a0 f4       	brcc	.+40     	; 0x3d3e <malloc+0x120>
    3d16:	2e 1b       	sub	r18, r30
    3d18:	3f 0b       	sbc	r19, r31
    3d1a:	28 17       	cp	r18, r24
    3d1c:	39 07       	cpc	r19, r25
    3d1e:	78 f0       	brcs	.+30     	; 0x3d3e <malloc+0x120>
    3d20:	ac 01       	movw	r20, r24
    3d22:	4e 5f       	subi	r20, 0xFE	; 254
    3d24:	5f 4f       	sbci	r21, 0xFF	; 255
    3d26:	24 17       	cp	r18, r20
    3d28:	35 07       	cpc	r19, r21
    3d2a:	48 f0       	brcs	.+18     	; 0x3d3e <malloc+0x120>
    3d2c:	4e 0f       	add	r20, r30
    3d2e:	5f 1f       	adc	r21, r31
    3d30:	50 93 a4 03 	sts	0x03A4, r21	; 0x8003a4 <__brkval+0x1>
    3d34:	40 93 a3 03 	sts	0x03A3, r20	; 0x8003a3 <__brkval>
    3d38:	81 93       	st	Z+, r24
    3d3a:	91 93       	st	Z+, r25
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <malloc+0x124>
    3d3e:	e0 e0       	ldi	r30, 0x00	; 0
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	cf 01       	movw	r24, r30
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	08 95       	ret

00003d4e <free>:
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <free+0xa>
    3d56:	81 c0       	rjmp	.+258    	; 0x3e5a <free+0x10c>
    3d58:	fc 01       	movw	r30, r24
    3d5a:	32 97       	sbiw	r30, 0x02	; 2
    3d5c:	13 82       	std	Z+3, r1	; 0x03
    3d5e:	12 82       	std	Z+2, r1	; 0x02
    3d60:	a0 91 a5 03 	lds	r26, 0x03A5	; 0x8003a5 <__flp>
    3d64:	b0 91 a6 03 	lds	r27, 0x03A6	; 0x8003a6 <__flp+0x1>
    3d68:	10 97       	sbiw	r26, 0x00	; 0
    3d6a:	81 f4       	brne	.+32     	; 0x3d8c <free+0x3e>
    3d6c:	20 81       	ld	r18, Z
    3d6e:	31 81       	ldd	r19, Z+1	; 0x01
    3d70:	82 0f       	add	r24, r18
    3d72:	93 1f       	adc	r25, r19
    3d74:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <__brkval>
    3d78:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <__brkval+0x1>
    3d7c:	28 17       	cp	r18, r24
    3d7e:	39 07       	cpc	r19, r25
    3d80:	51 f5       	brne	.+84     	; 0x3dd6 <free+0x88>
    3d82:	f0 93 a4 03 	sts	0x03A4, r31	; 0x8003a4 <__brkval+0x1>
    3d86:	e0 93 a3 03 	sts	0x03A3, r30	; 0x8003a3 <__brkval>
    3d8a:	67 c0       	rjmp	.+206    	; 0x3e5a <free+0x10c>
    3d8c:	ed 01       	movw	r28, r26
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	ce 17       	cp	r28, r30
    3d94:	df 07       	cpc	r29, r31
    3d96:	40 f4       	brcc	.+16     	; 0x3da8 <free+0x5a>
    3d98:	4a 81       	ldd	r20, Y+2	; 0x02
    3d9a:	5b 81       	ldd	r21, Y+3	; 0x03
    3d9c:	9e 01       	movw	r18, r28
    3d9e:	41 15       	cp	r20, r1
    3da0:	51 05       	cpc	r21, r1
    3da2:	f1 f0       	breq	.+60     	; 0x3de0 <free+0x92>
    3da4:	ea 01       	movw	r28, r20
    3da6:	f5 cf       	rjmp	.-22     	; 0x3d92 <free+0x44>
    3da8:	d3 83       	std	Z+3, r29	; 0x03
    3daa:	c2 83       	std	Z+2, r28	; 0x02
    3dac:	40 81       	ld	r20, Z
    3dae:	51 81       	ldd	r21, Z+1	; 0x01
    3db0:	84 0f       	add	r24, r20
    3db2:	95 1f       	adc	r25, r21
    3db4:	c8 17       	cp	r28, r24
    3db6:	d9 07       	cpc	r29, r25
    3db8:	59 f4       	brne	.+22     	; 0x3dd0 <free+0x82>
    3dba:	88 81       	ld	r24, Y
    3dbc:	99 81       	ldd	r25, Y+1	; 0x01
    3dbe:	84 0f       	add	r24, r20
    3dc0:	95 1f       	adc	r25, r21
    3dc2:	02 96       	adiw	r24, 0x02	; 2
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	80 83       	st	Z, r24
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	93 83       	std	Z+3, r25	; 0x03
    3dce:	82 83       	std	Z+2, r24	; 0x02
    3dd0:	21 15       	cp	r18, r1
    3dd2:	31 05       	cpc	r19, r1
    3dd4:	29 f4       	brne	.+10     	; 0x3de0 <free+0x92>
    3dd6:	f0 93 a6 03 	sts	0x03A6, r31	; 0x8003a6 <__flp+0x1>
    3dda:	e0 93 a5 03 	sts	0x03A5, r30	; 0x8003a5 <__flp>
    3dde:	3d c0       	rjmp	.+122    	; 0x3e5a <free+0x10c>
    3de0:	e9 01       	movw	r28, r18
    3de2:	fb 83       	std	Y+3, r31	; 0x03
    3de4:	ea 83       	std	Y+2, r30	; 0x02
    3de6:	49 91       	ld	r20, Y+
    3de8:	59 91       	ld	r21, Y+
    3dea:	c4 0f       	add	r28, r20
    3dec:	d5 1f       	adc	r29, r21
    3dee:	ec 17       	cp	r30, r28
    3df0:	fd 07       	cpc	r31, r29
    3df2:	61 f4       	brne	.+24     	; 0x3e0c <free+0xbe>
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	84 0f       	add	r24, r20
    3dfa:	95 1f       	adc	r25, r21
    3dfc:	02 96       	adiw	r24, 0x02	; 2
    3dfe:	e9 01       	movw	r28, r18
    3e00:	99 83       	std	Y+1, r25	; 0x01
    3e02:	88 83       	st	Y, r24
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	9b 83       	std	Y+3, r25	; 0x03
    3e0a:	8a 83       	std	Y+2, r24	; 0x02
    3e0c:	e0 e0       	ldi	r30, 0x00	; 0
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	12 96       	adiw	r26, 0x02	; 2
    3e12:	8d 91       	ld	r24, X+
    3e14:	9c 91       	ld	r25, X
    3e16:	13 97       	sbiw	r26, 0x03	; 3
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	19 f0       	breq	.+6      	; 0x3e22 <free+0xd4>
    3e1c:	fd 01       	movw	r30, r26
    3e1e:	dc 01       	movw	r26, r24
    3e20:	f7 cf       	rjmp	.-18     	; 0x3e10 <free+0xc2>
    3e22:	8d 91       	ld	r24, X+
    3e24:	9c 91       	ld	r25, X
    3e26:	11 97       	sbiw	r26, 0x01	; 1
    3e28:	9d 01       	movw	r18, r26
    3e2a:	2e 5f       	subi	r18, 0xFE	; 254
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	82 0f       	add	r24, r18
    3e30:	93 1f       	adc	r25, r19
    3e32:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <__brkval>
    3e36:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <__brkval+0x1>
    3e3a:	28 17       	cp	r18, r24
    3e3c:	39 07       	cpc	r19, r25
    3e3e:	69 f4       	brne	.+26     	; 0x3e5a <free+0x10c>
    3e40:	30 97       	sbiw	r30, 0x00	; 0
    3e42:	29 f4       	brne	.+10     	; 0x3e4e <free+0x100>
    3e44:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <__flp+0x1>
    3e48:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__flp>
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <free+0x104>
    3e4e:	13 82       	std	Z+3, r1	; 0x03
    3e50:	12 82       	std	Z+2, r1	; 0x02
    3e52:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <__brkval+0x1>
    3e56:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <__brkval>
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	08 95       	ret

00003e60 <memcpy>:
    3e60:	fb 01       	movw	r30, r22
    3e62:	dc 01       	movw	r26, r24
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <memcpy+0xa>
    3e66:	01 90       	ld	r0, Z+
    3e68:	0d 92       	st	X+, r0
    3e6a:	41 50       	subi	r20, 0x01	; 1
    3e6c:	50 40       	sbci	r21, 0x00	; 0
    3e6e:	d8 f7       	brcc	.-10     	; 0x3e66 <memcpy+0x6>
    3e70:	08 95       	ret

00003e72 <memset>:
    3e72:	dc 01       	movw	r26, r24
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <memset+0x6>
    3e76:	6d 93       	st	X+, r22
    3e78:	41 50       	subi	r20, 0x01	; 1
    3e7a:	50 40       	sbci	r21, 0x00	; 0
    3e7c:	e0 f7       	brcc	.-8      	; 0x3e76 <memset+0x4>
    3e7e:	08 95       	ret

00003e80 <_exit>:
    3e80:	f8 94       	cli

00003e82 <__stop_program>:
    3e82:	ff cf       	rjmp	.-2      	; 0x3e82 <__stop_program>
