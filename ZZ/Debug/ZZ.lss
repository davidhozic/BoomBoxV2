
ZZ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  00004300  00004394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001156  00800262  00800262  000043f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a9d3  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003013  00000000  00000000  0000f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000582c  00000000  00000000  000125d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000149c  00000000  00000000  00017e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d55  00000000  00000000  000192a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a3e  00000000  00000000  0001bff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00022a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
       6:	00 00       	nop
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	b2 c0       	rjmp	.+356    	; 0x18e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c3       	rjmp	.+1978   	; 0x7ec <__vector_12>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__vector_21>
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
      5e:	00 00       	nop
      60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
      62:	00 00       	nop
      64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
      96:	00 00       	nop
      98:	7a c0       	rjmp	.+244    	; 0x18e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	78 c0       	rjmp	.+240    	; 0x18e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	76 c0       	rjmp	.+236    	; 0x18e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	74 c0       	rjmp	.+232    	; 0x18e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	72 c0       	rjmp	.+228    	; 0x18e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	70 c0       	rjmp	.+224    	; 0x18e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	6e c0       	rjmp	.+220    	; 0x18e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6c c0       	rjmp	.+216    	; 0x18e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6a c0       	rjmp	.+212    	; 0x18e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	68 c0       	rjmp	.+208    	; 0x18e <__bad_interrupt>
      be:	00 00       	nop
      c0:	66 c0       	rjmp	.+204    	; 0x18e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	64 c0       	rjmp	.+200    	; 0x18e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	62 c0       	rjmp	.+196    	; 0x18e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	60 c0       	rjmp	.+192    	; 0x18e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	5e c0       	rjmp	.+188    	; 0x18e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5c c0       	rjmp	.+184    	; 0x18e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	5a c0       	rjmp	.+180    	; 0x18e <__bad_interrupt>
      da:	00 00       	nop
      dc:	58 c0       	rjmp	.+176    	; 0x18e <__bad_interrupt>
      de:	00 00       	nop
      e0:	56 c0       	rjmp	.+172    	; 0x18e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	87 12       	cpse	r8, r23
      e6:	87 12       	cpse	r8, r23
      e8:	87 12       	cpse	r8, r23
      ea:	ae 12       	cpse	r10, r30
      ec:	b6 12       	cpse	r11, r22
      ee:	c4 12       	cpse	r12, r20
      f0:	87 12       	cpse	r8, r23
      f2:	87 12       	cpse	r8, r23
      f4:	ae 12       	cpse	r10, r30
      f6:	b6 12       	cpse	r11, r22

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 bf 08 	call	0x117e	; 0x117e <prvCheckTasksWaitingTermination>
      fc:	80 91 b3 12 	lds	r24, 0x12B3	; 0x8012b3 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	d0 f3       	brcs	.-12     	; 0xf8 <prvIdleTask>
     104:	ae d2       	rcall	.+1372   	; 0x662 <vPortYield>
     106:	f8 cf       	rjmp	.-16     	; 0xf8 <prvIdleTask>

00000108 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	1f 92       	push	r1
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 9c 10 	call	0x2138	; 0x2138 <prvGetNextExpireTime>
     11a:	69 81       	ldd	r22, Y+1	; 0x01
     11c:	0e 94 17 12 	call	0x242e	; 0x242e <prvProcessTimerOrBlockTask>
     120:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvProcessReceivedCommands>
     124:	f6 cf       	rjmp	.-20     	; 0x112 <prvTimerTask+0xa>

00000126 <__ctors_start>:
     126:	42 19       	sub	r20, r2
     128:	fc 1a       	sub	r15, r28
     12a:	78 1c       	adc	r7, r8

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d1 e2       	ldi	r29, 0x21	; 33
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	0c bf       	out	0x3c, r16	; 60

0000013c <__do_copy_data>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a0 e0       	ldi	r26, 0x00	; 0
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	e0 e0       	ldi	r30, 0x00	; 0
     144:	f3 e4       	ldi	r31, 0x43	; 67
     146:	00 e0       	ldi	r16, 0x00	; 0
     148:	0b bf       	out	0x3b, r16	; 59
     14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x14>
     14c:	07 90       	elpm	r0, Z+
     14e:	0d 92       	st	X+, r0
     150:	a2 36       	cpi	r26, 0x62	; 98
     152:	b1 07       	cpc	r27, r17
     154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0x10>

00000156 <__do_clear_bss>:
     156:	23 e1       	ldi	r18, 0x13	; 19
     158:	a2 e6       	ldi	r26, 0x62	; 98
     15a:	b2 e0       	ldi	r27, 0x02	; 2
     15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
     15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
     160:	a8 3b       	cpi	r26, 0xB8	; 184
     162:	b2 07       	cpc	r27, r18
     164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>

00000166 <__do_global_ctors>:
     166:	10 e0       	ldi	r17, 0x00	; 0
     168:	c6 e9       	ldi	r28, 0x96	; 150
     16a:	d0 e0       	ldi	r29, 0x00	; 0
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	06 c0       	rjmp	.+12     	; 0x17c <__do_global_ctors+0x16>
     170:	21 97       	sbiw	r28, 0x01	; 1
     172:	01 09       	sbc	r16, r1
     174:	80 2f       	mov	r24, r16
     176:	fe 01       	movw	r30, r28
     178:	0e 94 22 20 	call	0x4044	; 0x4044 <__tablejump2__>
     17c:	c3 39       	cpi	r28, 0x93	; 147
     17e:	d1 07       	cpc	r29, r17
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	08 07       	cpc	r16, r24
     184:	a9 f7       	brne	.-22     	; 0x170 <__do_global_ctors+0xa>
     186:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <main>
     18a:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <_ZN8castimer8vrednostEv>:


#include "src/includes/includes.h"

unsigned long castimer::vrednost(void)
{
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	fc 01       	movw	r30, r24
  if (tr == false)
     196:	80 81       	ld	r24, Z
     198:	81 11       	cpse	r24, r1
     19a:	12 c0       	rjmp	.+36     	; 0x1c0 <_ZN8castimer8vrednostEv+0x30>
  {
    ts = Hardware.timeFROMboot;
     19c:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <Hardware+0x14>
     1a0:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <Hardware+0x15>
     1a4:	a0 91 b2 13 	lds	r26, 0x13B2	; 0x8013b2 <Hardware+0x16>
     1a8:	b0 91 b3 13 	lds	r27, 0x13B3	; 0x8013b3 <Hardware+0x17>
     1ac:	81 83       	std	Z+1, r24	; 0x01
     1ae:	92 83       	std	Z+2, r25	; 0x02
     1b0:	a3 83       	std	Z+3, r26	; 0x03
     1b2:	b4 83       	std	Z+4, r27	; 0x04
    tr = true;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 83       	st	Z, r24
    return 0;
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	cb 01       	movw	r24, r22
     1be:	12 c0       	rjmp	.+36     	; 0x1e4 <_ZN8castimer8vrednostEv+0x54>
  }
  return Hardware.timeFROMboot - ts;
     1c0:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <Hardware+0x14>
     1c4:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <Hardware+0x15>
     1c8:	a0 91 b2 13 	lds	r26, 0x13B2	; 0x8013b2 <Hardware+0x16>
     1cc:	b0 91 b3 13 	lds	r27, 0x13B3	; 0x8013b3 <Hardware+0x17>
     1d0:	01 81       	ldd	r16, Z+1	; 0x01
     1d2:	12 81       	ldd	r17, Z+2	; 0x02
     1d4:	23 81       	ldd	r18, Z+3	; 0x03
     1d6:	34 81       	ldd	r19, Z+4	; 0x04
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	60 1b       	sub	r22, r16
     1de:	71 0b       	sbc	r23, r17
     1e0:	82 0b       	sbc	r24, r18
     1e2:	93 0b       	sbc	r25, r19
}
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	08 95       	ret

000001ea <_ZN8castimer9ponastaviEv>:

void castimer::ponastavi(void)
{
  tr = false;
     1ea:	fc 01       	movw	r30, r24
     1ec:	10 82       	st	Z, r1
     1ee:	08 95       	ret

000001f0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     1f0:	ee e6       	ldi	r30, 0x6E	; 110
     1f2:	f2 e0       	ldi	r31, 0x02	; 2
     1f4:	a2 e7       	ldi	r26, 0x72	; 114
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	b1 83       	std	Z+1, r27	; 0x01
     1fa:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     1fc:	13 82       	std	Z+3, r1	; 0x03
     1fe:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     200:	ee e6       	ldi	r30, 0x6E	; 110
     202:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     204:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <pxEnd+0x1>
     208:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <pxEnd>
    pxEnd->xBlockSize = 0;
     20c:	13 82       	std	Z+3, r1	; 0x03
     20e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     210:	11 82       	std	Z+1, r1	; 0x01
     212:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     214:	8c ef       	ldi	r24, 0xFC	; 252
     216:	9f e0       	ldi	r25, 0x0F	; 15
     218:	13 96       	adiw	r26, 0x03	; 3
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     220:	ed 93       	st	X+, r30
     222:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     224:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <xMinimumEverFreeBytesRemaining+0x1>
     228:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     22c:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <xFreeBytesRemaining+0x1>
     230:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e8       	ldi	r25, 0x80	; 128
     238:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     23c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
     240:	08 95       	ret

00000242 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     248:	ae e6       	ldi	r26, 0x6E	; 110
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 c0       	rjmp	.+2      	; 0x250 <prvInsertBlockIntoFreeList+0xe>
     24e:	df 01       	movw	r26, r30
     250:	ed 91       	ld	r30, X+
     252:	fc 91       	ld	r31, X
     254:	11 97       	sbiw	r26, 0x01	; 1
     256:	ec 17       	cp	r30, r28
     258:	fd 07       	cpc	r31, r29
     25a:	c8 f3       	brcs	.-14     	; 0x24e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     25c:	12 96       	adiw	r26, 0x02	; 2
     25e:	8d 91       	ld	r24, X+
     260:	9c 91       	ld	r25, X
     262:	13 97       	sbiw	r26, 0x03	; 3
     264:	9d 01       	movw	r18, r26
     266:	28 0f       	add	r18, r24
     268:	39 1f       	adc	r19, r25
     26a:	c2 17       	cp	r28, r18
     26c:	d3 07       	cpc	r29, r19
     26e:	49 f4       	brne	.+18     	; 0x282 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     270:	2a 81       	ldd	r18, Y+2	; 0x02
     272:	3b 81       	ldd	r19, Y+3	; 0x03
     274:	82 0f       	add	r24, r18
     276:	93 1f       	adc	r25, r19
     278:	13 96       	adiw	r26, 0x03	; 3
     27a:	9c 93       	st	X, r25
     27c:	8e 93       	st	-X, r24
     27e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     280:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	9b 81       	ldd	r25, Y+3	; 0x03
     286:	9e 01       	movw	r18, r28
     288:	28 0f       	add	r18, r24
     28a:	39 1f       	adc	r19, r25
     28c:	e2 17       	cp	r30, r18
     28e:	f3 07       	cpc	r31, r19
     290:	c1 f4       	brne	.+48     	; 0x2c2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     292:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <pxEnd>
     296:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <pxEnd+0x1>
     29a:	e2 17       	cp	r30, r18
     29c:	f3 07       	cpc	r31, r19
     29e:	71 f0       	breq	.+28     	; 0x2bc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2a0:	22 81       	ldd	r18, Z+2	; 0x02
     2a2:	33 81       	ldd	r19, Z+3	; 0x03
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	9b 83       	std	Y+3, r25	; 0x03
     2aa:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2ac:	ed 91       	ld	r30, X+
     2ae:	fc 91       	ld	r31, X
     2b0:	11 97       	sbiw	r26, 0x01	; 1
     2b2:	80 81       	ld	r24, Z
     2b4:	91 81       	ldd	r25, Z+1	; 0x01
     2b6:	99 83       	std	Y+1, r25	; 0x01
     2b8:	88 83       	st	Y, r24
     2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2bc:	39 83       	std	Y+1, r19	; 0x01
     2be:	28 83       	st	Y, r18
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2c2:	f9 83       	std	Y+1, r31	; 0x01
     2c4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2c6:	ca 17       	cp	r28, r26
     2c8:	db 07       	cpc	r29, r27
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2cc:	cd 93       	st	X+, r28
     2ce:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     2e4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     2e8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <pxEnd>
     2ec:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <pxEnd+0x1>
     2f0:	89 2b       	or	r24, r25
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     2f4:	7d df       	rcall	.-262    	; 0x1f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     2f6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     2fa:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     2fe:	80 23       	and	r24, r16
     300:	91 23       	and	r25, r17
     302:	89 2b       	or	r24, r25
     304:	09 f0       	breq	.+2      	; 0x308 <pvPortMalloc+0x32>
     306:	76 c0       	rjmp	.+236    	; 0x3f4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     308:	01 15       	cp	r16, r1
     30a:	11 05       	cpc	r17, r1
     30c:	49 f0       	breq	.+18     	; 0x320 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     30e:	c8 01       	movw	r24, r16
     310:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     312:	08 17       	cp	r16, r24
     314:	19 07       	cpc	r17, r25
     316:	18 f0       	brcs	.+6      	; 0x31e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	01 c0       	rjmp	.+2      	; 0x320 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     31e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     320:	01 15       	cp	r16, r1
     322:	11 05       	cpc	r17, r1
     324:	09 f4       	brne	.+2      	; 0x328 <pvPortMalloc+0x52>
     326:	69 c0       	rjmp	.+210    	; 0x3fa <pvPortMalloc+0x124>
     328:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <xFreeBytesRemaining>
     32c:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <xFreeBytesRemaining+0x1>
     330:	80 17       	cp	r24, r16
     332:	91 07       	cpc	r25, r17
     334:	08 f4       	brcc	.+2      	; 0x338 <pvPortMalloc+0x62>
     336:	64 c0       	rjmp	.+200    	; 0x400 <__LOCK_REGION_LENGTH__>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     338:	c0 91 6e 02 	lds	r28, 0x026E	; 0x80026e <xStart>
     33c:	d0 91 6f 02 	lds	r29, 0x026F	; 0x80026f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     340:	ee e6       	ldi	r30, 0x6E	; 110
     342:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     344:	02 c0       	rjmp	.+4      	; 0x34a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     346:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     348:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	9b 81       	ldd	r25, Y+3	; 0x03
     34e:	80 17       	cp	r24, r16
     350:	91 07       	cpc	r25, r17
     352:	20 f4       	brcc	.+8      	; 0x35c <pvPortMalloc+0x86>
     354:	88 81       	ld	r24, Y
     356:	99 81       	ldd	r25, Y+1	; 0x01
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	a9 f7       	brne	.-22     	; 0x346 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     35c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <pxEnd>
     360:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <pxEnd+0x1>
     364:	c8 17       	cp	r28, r24
     366:	d9 07       	cpc	r29, r25
     368:	09 f4       	brne	.+2      	; 0x36c <pvPortMalloc+0x96>
     36a:	4d c0       	rjmp	.+154    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     36c:	e0 80       	ld	r14, Z
     36e:	f1 80       	ldd	r15, Z+1	; 0x01
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	e8 0e       	add	r14, r24
     374:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     376:	88 81       	ld	r24, Y
     378:	99 81       	ldd	r25, Y+1	; 0x01
     37a:	91 83       	std	Z+1, r25	; 0x01
     37c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     37e:	2a 81       	ldd	r18, Y+2	; 0x02
     380:	3b 81       	ldd	r19, Y+3	; 0x03
     382:	20 1b       	sub	r18, r16
     384:	31 0b       	sbc	r19, r17
     386:	29 30       	cpi	r18, 0x09	; 9
     388:	31 05       	cpc	r19, r1
     38a:	48 f0       	brcs	.+18     	; 0x39e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     38c:	ce 01       	movw	r24, r28
     38e:	80 0f       	add	r24, r16
     390:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     392:	fc 01       	movw	r30, r24
     394:	33 83       	std	Z+3, r19	; 0x03
     396:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     398:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     39a:	0a 83       	std	Y+2, r16	; 0x02
     39c:	52 df       	rcall	.-348    	; 0x242 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <xFreeBytesRemaining>
     3a6:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <xFreeBytesRemaining+0x1>
     3aa:	82 1b       	sub	r24, r18
     3ac:	93 0b       	sbc	r25, r19
     3ae:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <xFreeBytesRemaining+0x1>
     3b2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3b6:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <xMinimumEverFreeBytesRemaining>
     3ba:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <xMinimumEverFreeBytesRemaining+0x1>
     3be:	84 17       	cp	r24, r20
     3c0:	95 07       	cpc	r25, r21
     3c2:	20 f4       	brcc	.+8      	; 0x3cc <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3c4:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <xMinimumEverFreeBytesRemaining+0x1>
     3c8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3cc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     3d0:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     3d4:	28 2b       	or	r18, r24
     3d6:	39 2b       	or	r19, r25
     3d8:	3b 83       	std	Y+3, r19	; 0x03
     3da:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3dc:	19 82       	std	Y+1, r1	; 0x01
     3de:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     3e0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <xNumberOfSuccessfulAllocations>
     3e4:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <xNumberOfSuccessfulAllocations+0x1>
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <xNumberOfSuccessfulAllocations+0x1>
     3ee:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <xNumberOfSuccessfulAllocations>
     3f2:	0b c0       	rjmp	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 c0       	rjmp	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fa:	e1 2c       	mov	r14, r1
     3fc:	f1 2c       	mov	r15, r1
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	e1 2c       	mov	r14, r1
     402:	f1 2c       	mov	r15, r1
     404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	e1 2c       	mov	r14, r1
     408:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     40a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     40e:	e1 14       	cp	r14, r1
     410:	f1 04       	cpc	r15, r1
     412:	11 f4       	brne	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     414:	0e 94 f5 12 	call	0x25ea	; 0x25ea <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     418:	c7 01       	movw	r24, r14
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	91 f1       	breq	.+100    	; 0x498 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     434:	ec 01       	movw	r28, r24
     436:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     438:	4a 81       	ldd	r20, Y+2	; 0x02
     43a:	5b 81       	ldd	r21, Y+3	; 0x03
     43c:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <__data_end>
     440:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <__data_end+0x1>
     444:	ba 01       	movw	r22, r20
     446:	62 23       	and	r22, r18
     448:	73 23       	and	r23, r19
     44a:	67 2b       	or	r22, r23
     44c:	29 f1       	breq	.+74     	; 0x498 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     44e:	68 81       	ld	r22, Y
     450:	79 81       	ldd	r23, Y+1	; 0x01
     452:	67 2b       	or	r22, r23
     454:	09 f5       	brne	.+66     	; 0x498 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     456:	20 95       	com	r18
     458:	30 95       	com	r19
     45a:	24 23       	and	r18, r20
     45c:	35 23       	and	r19, r21
     45e:	3b 83       	std	Y+3, r19	; 0x03
     460:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     462:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	9b 81       	ldd	r25, Y+3	; 0x03
     46a:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <xFreeBytesRemaining>
     46e:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <xFreeBytesRemaining+0x1>
     472:	82 0f       	add	r24, r18
     474:	93 1f       	adc	r25, r19
     476:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <xFreeBytesRemaining+0x1>
     47a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     47e:	ce 01       	movw	r24, r28
     480:	e0 de       	rcall	.-576    	; 0x242 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     482:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <xNumberOfSuccessfulFrees>
     486:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <xNumberOfSuccessfulFrees+0x1>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <xNumberOfSuccessfulFrees+0x1>
     490:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     494:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4a2:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4a4:	03 96       	adiw	r24, 0x03	; 3
     4a6:	92 83       	std	Z+2, r25	; 0x02
     4a8:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4aa:	2f ef       	ldi	r18, 0xFF	; 255
     4ac:	3f ef       	ldi	r19, 0xFF	; 255
     4ae:	34 83       	std	Z+4, r19	; 0x04
     4b0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4b2:	96 83       	std	Z+6, r25	; 0x06
     4b4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4b6:	90 87       	std	Z+8, r25	; 0x08
     4b8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     4ba:	10 82       	st	Z, r1
     4bc:	08 95       	ret

000004be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     4be:	fc 01       	movw	r30, r24
     4c0:	11 86       	std	Z+9, r1	; 0x09
     4c2:	10 86       	std	Z+8, r1	; 0x08
     4c4:	08 95       	ret

000004c6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	9c 01       	movw	r18, r24
     4cc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     4ce:	dc 01       	movw	r26, r24
     4d0:	11 96       	adiw	r26, 0x01	; 1
     4d2:	cd 91       	ld	r28, X+
     4d4:	dc 91       	ld	r29, X
     4d6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     4d8:	d3 83       	std	Z+3, r29	; 0x03
     4da:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	9d 81       	ldd	r25, Y+5	; 0x05
     4e0:	95 83       	std	Z+5, r25	; 0x05
     4e2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	9d 81       	ldd	r25, Y+5	; 0x05
     4e8:	dc 01       	movw	r26, r24
     4ea:	13 96       	adiw	r26, 0x03	; 3
     4ec:	7c 93       	st	X, r23
     4ee:	6e 93       	st	-X, r22
     4f0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     4f2:	7d 83       	std	Y+5, r23	; 0x05
     4f4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     4f6:	31 87       	std	Z+9, r19	; 0x09
     4f8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     4fa:	f9 01       	movw	r30, r18
     4fc:	80 81       	ld	r24, Z
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	80 83       	st	Z, r24
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     50e:	48 81       	ld	r20, Y
     510:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     512:	4f 3f       	cpi	r20, 0xFF	; 255
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	52 07       	cpc	r21, r18
     518:	21 f4       	brne	.+8      	; 0x522 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     51a:	fc 01       	movw	r30, r24
     51c:	a7 81       	ldd	r26, Z+7	; 0x07
     51e:	b0 85       	ldd	r27, Z+8	; 0x08
     520:	0d c0       	rjmp	.+26     	; 0x53c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     522:	dc 01       	movw	r26, r24
     524:	13 96       	adiw	r26, 0x03	; 3
     526:	01 c0       	rjmp	.+2      	; 0x52a <vListInsert+0x22>
     528:	df 01       	movw	r26, r30
     52a:	12 96       	adiw	r26, 0x02	; 2
     52c:	ed 91       	ld	r30, X+
     52e:	fc 91       	ld	r31, X
     530:	13 97       	sbiw	r26, 0x03	; 3
     532:	20 81       	ld	r18, Z
     534:	31 81       	ldd	r19, Z+1	; 0x01
     536:	42 17       	cp	r20, r18
     538:	53 07       	cpc	r21, r19
     53a:	b0 f7       	brcc	.-20     	; 0x528 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     53c:	12 96       	adiw	r26, 0x02	; 2
     53e:	ed 91       	ld	r30, X+
     540:	fc 91       	ld	r31, X
     542:	13 97       	sbiw	r26, 0x03	; 3
     544:	fb 83       	std	Y+3, r31	; 0x03
     546:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     548:	d5 83       	std	Z+5, r29	; 0x05
     54a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     54c:	bd 83       	std	Y+5, r27	; 0x05
     54e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     550:	13 96       	adiw	r26, 0x03	; 3
     552:	dc 93       	st	X, r29
     554:	ce 93       	st	-X, r28
     556:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     558:	99 87       	std	Y+9, r25	; 0x09
     55a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     55c:	fc 01       	movw	r30, r24
     55e:	20 81       	ld	r18, Z
     560:	2f 5f       	subi	r18, 0xFF	; 255
     562:	20 83       	st	Z, r18
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     570:	a0 85       	ldd	r26, Z+8	; 0x08
     572:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     574:	c2 81       	ldd	r28, Z+2	; 0x02
     576:	d3 81       	ldd	r29, Z+3	; 0x03
     578:	84 81       	ldd	r24, Z+4	; 0x04
     57a:	95 81       	ldd	r25, Z+5	; 0x05
     57c:	9d 83       	std	Y+5, r25	; 0x05
     57e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     580:	c4 81       	ldd	r28, Z+4	; 0x04
     582:	d5 81       	ldd	r29, Z+5	; 0x05
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	93 81       	ldd	r25, Z+3	; 0x03
     588:	9b 83       	std	Y+3, r25	; 0x03
     58a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	8d 91       	ld	r24, X+
     590:	9c 91       	ld	r25, X
     592:	12 97       	sbiw	r26, 0x02	; 2
     594:	e8 17       	cp	r30, r24
     596:	f9 07       	cpc	r31, r25
     598:	31 f4       	brne	.+12     	; 0x5a6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     59a:	84 81       	ldd	r24, Z+4	; 0x04
     59c:	95 81       	ldd	r25, Z+5	; 0x05
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	9c 93       	st	X, r25
     5a2:	8e 93       	st	-X, r24
     5a4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a6:	11 86       	std	Z+9, r1	; 0x09
     5a8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5aa:	8c 91       	ld	r24, X
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5b0:	8c 91       	ld	r24, X
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b8:	a8 95       	wdr
     5ba:	90 ec       	ldi	r25, 0xC0	; 192
     5bc:	88 e1       	ldi	r24, 0x18	; 24
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	a8 95       	wdr
     5c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ce:	08 95       	ret

000005d0 <pxPortInitialiseStack>:
     5d0:	fc 01       	movw	r30, r24
     5d2:	60 83       	st	Z, r22
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	70 83       	st	Z, r23
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	10 82       	st	Z, r1
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	20 e8       	ldi	r18, 0x80	; 128
     5e4:	20 83       	st	Z, r18
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	31 97       	sbiw	r30, 0x01	; 1
     5f0:	10 82       	st	Z, r1
     5f2:	77 97       	sbiw	r30, 0x17	; 23
     5f4:	40 83       	st	Z, r20
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	50 83       	st	Z, r21
     5fa:	86 97       	sbiw	r24, 0x26	; 38
     5fc:	08 95       	ret

000005fe <xPortStartScheduler>:
     5fe:	dc df       	rcall	.-72     	; 0x5b8 <prvSetupTimerInterrupt>
     600:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
     604:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
     608:	cd 91       	ld	r28, X+
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	dd 91       	ld	r29, X+
     60e:	de bf       	out	0x3e, r29	; 62
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	7f 90       	pop	r7
     642:	6f 90       	pop	r6
     644:	5f 90       	pop	r5
     646:	4f 90       	pop	r4
     648:	3f 90       	pop	r3
     64a:	2f 90       	pop	r2
     64c:	1f 90       	pop	r1
     64e:	0f 90       	pop	r0
     650:	0c be       	out	0x3c, r0	; 60
     652:	0f 90       	pop	r0
     654:	0b be       	out	0x3b, r0	; 59
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	08 95       	ret
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	08 95       	ret

00000662 <vPortYield>:
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	0f 92       	push	r0
     66a:	0b b6       	in	r0, 0x3b	; 59
     66c:	0f 92       	push	r0
     66e:	0c b6       	in	r0, 0x3c	; 60
     670:	0f 92       	push	r0
     672:	1f 92       	push	r1
     674:	11 24       	eor	r1, r1
     676:	2f 92       	push	r2
     678:	3f 92       	push	r3
     67a:	4f 92       	push	r4
     67c:	5f 92       	push	r5
     67e:	6f 92       	push	r6
     680:	7f 92       	push	r7
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ef 93       	push	r30
     6b0:	ff 93       	push	r31
     6b2:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
     6b6:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
     6ba:	0d b6       	in	r0, 0x3d	; 61
     6bc:	0d 92       	st	X+, r0
     6be:	0e b6       	in	r0, 0x3e	; 62
     6c0:	0d 92       	st	X+, r0
     6c2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <vTaskSwitchContext>
     6c6:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
     6ca:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
     6ce:	cd 91       	ld	r28, X+
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	dd 91       	ld	r29, X+
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	bf 91       	pop	r27
     6e0:	af 91       	pop	r26
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	7f 91       	pop	r23
     6e8:	6f 91       	pop	r22
     6ea:	5f 91       	pop	r21
     6ec:	4f 91       	pop	r20
     6ee:	3f 91       	pop	r19
     6f0:	2f 91       	pop	r18
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	8f 90       	pop	r8
     706:	7f 90       	pop	r7
     708:	6f 90       	pop	r6
     70a:	5f 90       	pop	r5
     70c:	4f 90       	pop	r4
     70e:	3f 90       	pop	r3
     710:	2f 90       	pop	r2
     712:	1f 90       	pop	r1
     714:	0f 90       	pop	r0
     716:	0c be       	out	0x3c, r0	; 60
     718:	0f 90       	pop	r0
     71a:	0b be       	out	0x3b, r0	; 59
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	08 95       	ret

00000724 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	0f 92       	push	r0
     72c:	0b b6       	in	r0, 0x3b	; 59
     72e:	0f 92       	push	r0
     730:	0c b6       	in	r0, 0x3c	; 60
     732:	0f 92       	push	r0
     734:	1f 92       	push	r1
     736:	11 24       	eor	r1, r1
     738:	2f 92       	push	r2
     73a:	3f 92       	push	r3
     73c:	4f 92       	push	r4
     73e:	5f 92       	push	r5
     740:	6f 92       	push	r6
     742:	7f 92       	push	r7
     744:	8f 92       	push	r8
     746:	9f 92       	push	r9
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
     778:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
     77c:	0d b6       	in	r0, 0x3d	; 61
     77e:	0d 92       	st	X+, r0
     780:	0e b6       	in	r0, 0x3e	; 62
     782:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     784:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     786:	1f d7       	rcall	.+3646   	; 0x15c6 <xTaskIncrementTick>
     788:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     78a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78e:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
     792:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
     796:	cd 91       	ld	r28, X+
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	dd 91       	ld	r29, X+
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	bf 91       	pop	r27
     7a8:	af 91       	pop	r26
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	7f 91       	pop	r23
     7b0:	6f 91       	pop	r22
     7b2:	5f 91       	pop	r21
     7b4:	4f 91       	pop	r20
     7b6:	3f 91       	pop	r19
     7b8:	2f 91       	pop	r18
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	9f 90       	pop	r9
     7cc:	8f 90       	pop	r8
     7ce:	7f 90       	pop	r7
     7d0:	6f 90       	pop	r6
     7d2:	5f 90       	pop	r5
     7d4:	4f 90       	pop	r4
     7d6:	3f 90       	pop	r3
     7d8:	2f 90       	pop	r2
     7da:	1f 90       	pop	r1
     7dc:	0f 90       	pop	r0
     7de:	0c be       	out	0x3c, r0	; 60
     7e0:	0f 90       	pop	r0
     7e2:	0b be       	out	0x3b, r0	; 59
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7ea:	08 95       	ret

000007ec <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ec:	9b df       	rcall	.-202    	; 0x724 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ee:	18 95       	reti

000007f0 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7f0:	dc 01       	movw	r26, r24
     7f2:	51 96       	adiw	r26, 0x11	; 17
     7f4:	2c 91       	ld	r18, X
     7f6:	51 97       	sbiw	r26, 0x11	; 17
     7f8:	22 23       	and	r18, r18
     7fa:	41 f0       	breq	.+16     	; 0x80c <prvGetDisinheritPriorityAfterTimeout+0x1c>
     7fc:	56 96       	adiw	r26, 0x16	; 22
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	57 97       	sbiw	r26, 0x17	; 23
     804:	90 81       	ld	r25, Z
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	89 1b       	sub	r24, r25
     80a:	08 95       	ret
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret

00000810 <prvIsQueueEmpty>:
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	0f 92       	push	r0
     816:	fc 01       	movw	r30, r24
     818:	82 8d       	ldd	r24, Z+26	; 0x1a
     81a:	81 11       	cpse	r24, r1
     81c:	02 c0       	rjmp	.+4      	; 0x822 <prvIsQueueEmpty+0x12>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	01 c0       	rjmp	.+2      	; 0x824 <prvIsQueueEmpty+0x14>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	08 95       	ret

0000082a <prvIsQueueFull>:
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	0f 92       	push	r0
     830:	fc 01       	movw	r30, r24
     832:	22 8d       	ldd	r18, Z+26	; 0x1a
     834:	83 8d       	ldd	r24, Z+27	; 0x1b
     836:	28 13       	cpse	r18, r24
     838:	02 c0       	rjmp	.+4      	; 0x83e <prvIsQueueFull+0x14>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	01 c0       	rjmp	.+2      	; 0x840 <prvIsQueueFull+0x16>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	08 95       	ret

00000846 <prvCopyDataToQueue>:
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ec 01       	movw	r28, r24
     850:	04 2f       	mov	r16, r20
     852:	1a 8d       	ldd	r17, Y+26	; 0x1a
     854:	4c 8d       	ldd	r20, Y+28	; 0x1c
     856:	41 11       	cpse	r20, r1
     858:	0c c0       	rjmp	.+24     	; 0x872 <prvCopyDataToQueue+0x2c>
     85a:	88 81       	ld	r24, Y
     85c:	99 81       	ldd	r25, Y+1	; 0x01
     85e:	89 2b       	or	r24, r25
     860:	09 f0       	breq	.+2      	; 0x864 <prvCopyDataToQueue+0x1e>
     862:	42 c0       	rjmp	.+132    	; 0x8e8 <prvCopyDataToQueue+0xa2>
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	9d 81       	ldd	r25, Y+5	; 0x05
     868:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <xTaskPriorityDisinherit>
     86c:	1d 82       	std	Y+5, r1	; 0x05
     86e:	1c 82       	std	Y+4, r1	; 0x04
     870:	42 c0       	rjmp	.+132    	; 0x8f6 <prvCopyDataToQueue+0xb0>
     872:	01 11       	cpse	r16, r1
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <prvCopyDataToQueue+0x5e>
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	9b 81       	ldd	r25, Y+3	; 0x03
     87c:	0e 94 6e 21 	call	0x42dc	; 0x42dc <memcpy>
     880:	2c 8d       	ldd	r18, Y+28	; 0x1c
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	9b 81       	ldd	r25, Y+3	; 0x03
     886:	82 0f       	add	r24, r18
     888:	91 1d       	adc	r25, r1
     88a:	9b 83       	std	Y+3, r25	; 0x03
     88c:	8a 83       	std	Y+2, r24	; 0x02
     88e:	2c 81       	ldd	r18, Y+4	; 0x04
     890:	3d 81       	ldd	r19, Y+5	; 0x05
     892:	82 17       	cp	r24, r18
     894:	93 07       	cpc	r25, r19
     896:	50 f1       	brcs	.+84     	; 0x8ec <prvCopyDataToQueue+0xa6>
     898:	88 81       	ld	r24, Y
     89a:	99 81       	ldd	r25, Y+1	; 0x01
     89c:	9b 83       	std	Y+3, r25	; 0x03
     89e:	8a 83       	std	Y+2, r24	; 0x02
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	29 c0       	rjmp	.+82     	; 0x8f6 <prvCopyDataToQueue+0xb0>
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	8e 81       	ldd	r24, Y+6	; 0x06
     8a8:	9f 81       	ldd	r25, Y+7	; 0x07
     8aa:	0e 94 6e 21 	call	0x42dc	; 0x42dc <memcpy>
     8ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	91 95       	neg	r25
     8b4:	81 95       	neg	r24
     8b6:	91 09       	sbc	r25, r1
     8b8:	2e 81       	ldd	r18, Y+6	; 0x06
     8ba:	3f 81       	ldd	r19, Y+7	; 0x07
     8bc:	28 0f       	add	r18, r24
     8be:	39 1f       	adc	r19, r25
     8c0:	3f 83       	std	Y+7, r19	; 0x07
     8c2:	2e 83       	std	Y+6, r18	; 0x06
     8c4:	48 81       	ld	r20, Y
     8c6:	59 81       	ldd	r21, Y+1	; 0x01
     8c8:	24 17       	cp	r18, r20
     8ca:	35 07       	cpc	r19, r21
     8cc:	30 f4       	brcc	.+12     	; 0x8da <prvCopyDataToQueue+0x94>
     8ce:	2c 81       	ldd	r18, Y+4	; 0x04
     8d0:	3d 81       	ldd	r19, Y+5	; 0x05
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	9f 83       	std	Y+7, r25	; 0x07
     8d8:	8e 83       	std	Y+6, r24	; 0x06
     8da:	02 30       	cpi	r16, 0x02	; 2
     8dc:	49 f4       	brne	.+18     	; 0x8f0 <prvCopyDataToQueue+0xaa>
     8de:	11 23       	and	r17, r17
     8e0:	49 f0       	breq	.+18     	; 0x8f4 <prvCopyDataToQueue+0xae>
     8e2:	11 50       	subi	r17, 0x01	; 1
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <prvCopyDataToQueue+0xb0>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <prvCopyDataToQueue+0xb0>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <prvCopyDataToQueue+0xb0>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <prvCopyDataToQueue+0xb0>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	1f 5f       	subi	r17, 0xFF	; 255
     8f8:	1a 8f       	std	Y+26, r17	; 0x1a
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <prvCopyDataFromQueue>:
     904:	fc 01       	movw	r30, r24
     906:	44 8d       	ldd	r20, Z+28	; 0x1c
     908:	44 23       	and	r20, r20
     90a:	a9 f0       	breq	.+42     	; 0x936 <prvCopyDataFromQueue+0x32>
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	26 81       	ldd	r18, Z+6	; 0x06
     910:	37 81       	ldd	r19, Z+7	; 0x07
     912:	24 0f       	add	r18, r20
     914:	35 1f       	adc	r19, r21
     916:	37 83       	std	Z+7, r19	; 0x07
     918:	26 83       	std	Z+6, r18	; 0x06
     91a:	84 81       	ldd	r24, Z+4	; 0x04
     91c:	95 81       	ldd	r25, Z+5	; 0x05
     91e:	28 17       	cp	r18, r24
     920:	39 07       	cpc	r19, r25
     922:	20 f0       	brcs	.+8      	; 0x92c <prvCopyDataFromQueue+0x28>
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	97 83       	std	Z+7, r25	; 0x07
     92a:	86 83       	std	Z+6, r24	; 0x06
     92c:	cb 01       	movw	r24, r22
     92e:	66 81       	ldd	r22, Z+6	; 0x06
     930:	77 81       	ldd	r23, Z+7	; 0x07
     932:	0c 94 6e 21 	jmp	0x42dc	; 0x42dc <memcpy>
     936:	08 95       	ret

00000938 <prvUnlockQueue>:
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	0f 92       	push	r0
     946:	1e 8d       	ldd	r17, Y+30	; 0x1e
     948:	0b c0       	rjmp	.+22     	; 0x960 <prvUnlockQueue+0x28>
     94a:	89 89       	ldd	r24, Y+17	; 0x11
     94c:	88 23       	and	r24, r24
     94e:	51 f0       	breq	.+20     	; 0x964 <prvUnlockQueue+0x2c>
     950:	ce 01       	movw	r24, r28
     952:	41 96       	adiw	r24, 0x11	; 17
     954:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xTaskRemoveFromEventList>
     958:	81 11       	cpse	r24, r1
     95a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <vTaskMissedYield>
     95e:	11 50       	subi	r17, 0x01	; 1
     960:	11 16       	cp	r1, r17
     962:	9c f3       	brlt	.-26     	; 0x94a <prvUnlockQueue+0x12>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	8e 8f       	std	Y+30, r24	; 0x1e
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	0f 92       	push	r0
     972:	1d 8d       	ldd	r17, Y+29	; 0x1d
     974:	0b c0       	rjmp	.+22     	; 0x98c <prvUnlockQueue+0x54>
     976:	88 85       	ldd	r24, Y+8	; 0x08
     978:	88 23       	and	r24, r24
     97a:	51 f0       	breq	.+20     	; 0x990 <prvUnlockQueue+0x58>
     97c:	ce 01       	movw	r24, r28
     97e:	08 96       	adiw	r24, 0x08	; 8
     980:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xTaskRemoveFromEventList>
     984:	81 11       	cpse	r24, r1
     986:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <vTaskMissedYield>
     98a:	11 50       	subi	r17, 0x01	; 1
     98c:	11 16       	cp	r1, r17
     98e:	9c f3       	brlt	.-26     	; 0x976 <prvUnlockQueue+0x3e>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	8d 8f       	std	Y+29, r24	; 0x1d
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	08 95       	ret

000009a0 <xQueueGenericReset>:
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	0f 92       	push	r0
     9ac:	e8 81       	ld	r30, Y
     9ae:	f9 81       	ldd	r31, Y+1	; 0x01
     9b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	82 9f       	mul	r24, r18
     9ba:	a0 01       	movw	r20, r0
     9bc:	83 9f       	mul	r24, r19
     9be:	50 0d       	add	r21, r0
     9c0:	92 9f       	mul	r25, r18
     9c2:	50 0d       	add	r21, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	4e 0f       	add	r20, r30
     9c8:	5f 1f       	adc	r21, r31
     9ca:	5d 83       	std	Y+5, r21	; 0x05
     9cc:	4c 83       	std	Y+4, r20	; 0x04
     9ce:	1a 8e       	std	Y+26, r1	; 0x1a
     9d0:	fb 83       	std	Y+3, r31	; 0x03
     9d2:	ea 83       	std	Y+2, r30	; 0x02
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	28 9f       	mul	r18, r24
     9d8:	a0 01       	movw	r20, r0
     9da:	29 9f       	mul	r18, r25
     9dc:	50 0d       	add	r21, r0
     9de:	38 9f       	mul	r19, r24
     9e0:	50 0d       	add	r21, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	cf 01       	movw	r24, r30
     9e6:	84 0f       	add	r24, r20
     9e8:	95 1f       	adc	r25, r21
     9ea:	9f 83       	std	Y+7, r25	; 0x07
     9ec:	8e 83       	std	Y+6, r24	; 0x06
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	8d 8f       	std	Y+29, r24	; 0x1d
     9f2:	8e 8f       	std	Y+30, r24	; 0x1e
     9f4:	61 11       	cpse	r22, r1
     9f6:	0b c0       	rjmp	.+22     	; 0xa0e <xQueueGenericReset+0x6e>
     9f8:	88 85       	ldd	r24, Y+8	; 0x08
     9fa:	88 23       	and	r24, r24
     9fc:	71 f0       	breq	.+28     	; 0xa1a <xQueueGenericReset+0x7a>
     9fe:	ce 01       	movw	r24, r28
     a00:	08 96       	adiw	r24, 0x08	; 8
     a02:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xTaskRemoveFromEventList>
     a06:	88 23       	and	r24, r24
     a08:	41 f0       	breq	.+16     	; 0xa1a <xQueueGenericReset+0x7a>
     a0a:	2b de       	rcall	.-938    	; 0x662 <vPortYield>
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <xQueueGenericReset+0x7a>
     a0e:	ce 01       	movw	r24, r28
     a10:	08 96       	adiw	r24, 0x08	; 8
     a12:	47 dd       	rcall	.-1394   	; 0x4a2 <vListInitialise>
     a14:	ce 01       	movw	r24, r28
     a16:	41 96       	adiw	r24, 0x11	; 17
     a18:	44 dd       	rcall	.-1400   	; 0x4a2 <vListInitialise>
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <prvInitialiseNewQueue>:
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	f8 01       	movw	r30, r16
     a2c:	61 11       	cpse	r22, r1
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <prvInitialiseNewQueue+0x10>
     a30:	11 83       	std	Z+1, r17	; 0x01
     a32:	00 83       	st	Z, r16
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <prvInitialiseNewQueue+0x14>
     a36:	51 83       	std	Z+1, r21	; 0x01
     a38:	40 83       	st	Z, r20
     a3a:	83 8f       	std	Z+27, r24	; 0x1b
     a3c:	64 8f       	std	Z+28, r22	; 0x1c
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	cf 01       	movw	r24, r30
     a42:	ae df       	rcall	.-164    	; 0x9a0 <xQueueGenericReset>
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <xQueueGenericCreate>:
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	f8 2e       	mov	r15, r24
     a5a:	e6 2e       	mov	r14, r22
     a5c:	d4 2e       	mov	r13, r20
     a5e:	86 9f       	mul	r24, r22
     a60:	c0 01       	movw	r24, r0
     a62:	11 24       	eor	r1, r1
     a64:	4f 96       	adiw	r24, 0x1f	; 31
     a66:	37 dc       	rcall	.-1938   	; 0x2d6 <pvPortMalloc>
     a68:	ec 01       	movw	r28, r24
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	41 f0       	breq	.+16     	; 0xa7e <xQueueGenericCreate+0x34>
     a6e:	8c 01       	movw	r16, r24
     a70:	2d 2d       	mov	r18, r13
     a72:	ac 01       	movw	r20, r24
     a74:	41 5e       	subi	r20, 0xE1	; 225
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	6e 2d       	mov	r22, r14
     a7a:	8f 2d       	mov	r24, r15
     a7c:	d4 df       	rcall	.-88     	; 0xa26 <prvInitialiseNewQueue>
     a7e:	ce 01       	movw	r24, r28
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	08 95       	ret

00000a90 <xQueueGenericSend>:
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <xQueueGenericSend+0x12>
     aa2:	1f 92       	push	r1
     aa4:	1f 92       	push	r1
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	8c 01       	movw	r16, r24
     aac:	7b 01       	movw	r14, r22
     aae:	5d 83       	std	Y+5, r21	; 0x05
     ab0:	4c 83       	std	Y+4, r20	; 0x04
     ab2:	c2 2e       	mov	r12, r18
     ab4:	d1 2c       	mov	r13, r1
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	0f 92       	push	r0
     abc:	f8 01       	movw	r30, r16
     abe:	92 8d       	ldd	r25, Z+26	; 0x1a
     ac0:	83 8d       	ldd	r24, Z+27	; 0x1b
     ac2:	98 17       	cp	r25, r24
     ac4:	18 f0       	brcs	.+6      	; 0xacc <xQueueGenericSend+0x3c>
     ac6:	f2 e0       	ldi	r31, 0x02	; 2
     ac8:	cf 12       	cpse	r12, r31
     aca:	16 c0       	rjmp	.+44     	; 0xaf8 <xQueueGenericSend+0x68>
     acc:	4c 2d       	mov	r20, r12
     ace:	b7 01       	movw	r22, r14
     ad0:	c8 01       	movw	r24, r16
     ad2:	b9 de       	rcall	.-654    	; 0x846 <prvCopyDataToQueue>
     ad4:	f8 01       	movw	r30, r16
     ad6:	91 89       	ldd	r25, Z+17	; 0x11
     ad8:	99 23       	and	r25, r25
     ada:	41 f0       	breq	.+16     	; 0xaec <xQueueGenericSend+0x5c>
     adc:	c8 01       	movw	r24, r16
     ade:	41 96       	adiw	r24, 0x11	; 17
     ae0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xTaskRemoveFromEventList>
     ae4:	88 23       	and	r24, r24
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <xQueueGenericSend+0x60>
     ae8:	bc dd       	rcall	.-1160   	; 0x662 <vPortYield>
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <xQueueGenericSend+0x60>
     aec:	81 11       	cpse	r24, r1
     aee:	b9 dd       	rcall	.-1166   	; 0x662 <vPortYield>
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	43 c0       	rjmp	.+134    	; 0xb7e <xQueueGenericSend+0xee>
     af8:	8c 81       	ldd	r24, Y+4	; 0x04
     afa:	9d 81       	ldd	r25, Y+5	; 0x05
     afc:	89 2b       	or	r24, r25
     afe:	21 f4       	brne	.+8      	; 0xb08 <xQueueGenericSend+0x78>
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	3b c0       	rjmp	.+118    	; 0xb7e <xQueueGenericSend+0xee>
     b08:	d1 10       	cpse	r13, r1
     b0a:	06 c0       	rjmp	.+12     	; 0xb18 <xQueueGenericSend+0x88>
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskInternalSetTimeOutState>
     b14:	dd 24       	eor	r13, r13
     b16:	d3 94       	inc	r13
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	44 d5       	rcall	.+2696   	; 0x15a6 <vTaskSuspendAll>
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	0f 92       	push	r0
     b24:	f8 01       	movw	r30, r16
     b26:	85 8d       	ldd	r24, Z+29	; 0x1d
     b28:	8f 3f       	cpi	r24, 0xFF	; 255
     b2a:	09 f4       	brne	.+2      	; 0xb2e <xQueueGenericSend+0x9e>
     b2c:	15 8e       	std	Z+29, r1	; 0x1d
     b2e:	f8 01       	movw	r30, r16
     b30:	86 8d       	ldd	r24, Z+30	; 0x1e
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	09 f4       	brne	.+2      	; 0xb38 <xQueueGenericSend+0xa8>
     b36:	16 8e       	std	Z+30, r1	; 0x1e
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	be 01       	movw	r22, r28
     b3e:	6c 5f       	subi	r22, 0xFC	; 252
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <xTaskCheckForTimeOut>
     b4a:	81 11       	cpse	r24, r1
     b4c:	14 c0       	rjmp	.+40     	; 0xb76 <xQueueGenericSend+0xe6>
     b4e:	c8 01       	movw	r24, r16
     b50:	6c de       	rcall	.-808    	; 0x82a <prvIsQueueFull>
     b52:	88 23       	and	r24, r24
     b54:	61 f0       	breq	.+24     	; 0xb6e <xQueueGenericSend+0xde>
     b56:	6c 81       	ldd	r22, Y+4	; 0x04
     b58:	7d 81       	ldd	r23, Y+5	; 0x05
     b5a:	c8 01       	movw	r24, r16
     b5c:	08 96       	adiw	r24, 0x08	; 8
     b5e:	ff d7       	rcall	.+4094   	; 0x1b5e <vTaskPlaceOnEventList>
     b60:	c8 01       	movw	r24, r16
     b62:	ea de       	rcall	.-556    	; 0x938 <prvUnlockQueue>
     b64:	49 d6       	rcall	.+3218   	; 0x17f8 <xTaskResumeAll>
     b66:	81 11       	cpse	r24, r1
     b68:	a6 cf       	rjmp	.-180    	; 0xab6 <xQueueGenericSend+0x26>
     b6a:	7b dd       	rcall	.-1290   	; 0x662 <vPortYield>
     b6c:	a4 cf       	rjmp	.-184    	; 0xab6 <xQueueGenericSend+0x26>
     b6e:	c8 01       	movw	r24, r16
     b70:	e3 de       	rcall	.-570    	; 0x938 <prvUnlockQueue>
     b72:	42 d6       	rcall	.+3204   	; 0x17f8 <xTaskResumeAll>
     b74:	a0 cf       	rjmp	.-192    	; 0xab6 <xQueueGenericSend+0x26>
     b76:	c8 01       	movw	r24, r16
     b78:	df de       	rcall	.-578    	; 0x938 <prvUnlockQueue>
     b7a:	3e d6       	rcall	.+3196   	; 0x17f8 <xTaskResumeAll>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	08 95       	ret

00000b9a <prvInitialiseMutex>:
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <prvInitialiseMutex+0x1c>
     b9e:	fc 01       	movw	r30, r24
     ba0:	15 82       	std	Z+5, r1	; 0x05
     ba2:	14 82       	std	Z+4, r1	; 0x04
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	10 82       	st	Z, r1
     ba8:	16 82       	std	Z+6, r1	; 0x06
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	6d cf       	rjmp	.-294    	; 0xa90 <xQueueGenericSend>
     bb6:	08 95       	ret

00000bb8 <xQueueCreateMutex>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	48 2f       	mov	r20, r24
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	43 df       	rcall	.-378    	; 0xa4a <xQueueGenericCreate>
     bc4:	ec 01       	movw	r28, r24
     bc6:	e9 df       	rcall	.-46     	; 0xb9a <prvInitialiseMutex>
     bc8:	ce 01       	movw	r24, r28
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <xQueueGenericSendFromISR>:
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	8a 01       	movw	r16, r20
     bde:	fc 01       	movw	r30, r24
     be0:	52 8d       	ldd	r21, Z+26	; 0x1a
     be2:	33 8d       	ldd	r19, Z+27	; 0x1b
     be4:	53 17       	cp	r21, r19
     be6:	10 f0       	brcs	.+4      	; 0xbec <xQueueGenericSendFromISR+0x1c>
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	f9 f4       	brne	.+62     	; 0xc2a <xQueueGenericSendFromISR+0x5a>
     bec:	42 2f       	mov	r20, r18
     bee:	78 01       	movw	r14, r16
     bf0:	ec 01       	movw	r28, r24
     bf2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf6:	ce 01       	movw	r24, r28
     bf8:	26 de       	rcall	.-948    	; 0x846 <prvCopyDataToQueue>
     bfa:	1f 3f       	cpi	r17, 0xFF	; 255
     bfc:	81 f4       	brne	.+32     	; 0xc1e <xQueueGenericSendFromISR+0x4e>
     bfe:	89 89       	ldd	r24, Y+17	; 0x11
     c00:	88 23       	and	r24, r24
     c02:	a9 f0       	breq	.+42     	; 0xc2e <xQueueGenericSendFromISR+0x5e>
     c04:	ce 01       	movw	r24, r28
     c06:	41 96       	adiw	r24, 0x11	; 17
     c08:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <xTaskRemoveFromEventList>
     c0c:	88 23       	and	r24, r24
     c0e:	89 f0       	breq	.+34     	; 0xc32 <xQueueGenericSendFromISR+0x62>
     c10:	e1 14       	cp	r14, r1
     c12:	f1 04       	cpc	r15, r1
     c14:	81 f0       	breq	.+32     	; 0xc36 <xQueueGenericSendFromISR+0x66>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	f7 01       	movw	r30, r14
     c1a:	80 83       	st	Z, r24
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c1e:	ff 24       	eor	r15, r15
     c20:	f3 94       	inc	r15
     c22:	f1 0e       	add	r15, r17
     c24:	fe 8e       	std	Y+30, r15	; 0x1e
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <xQueueReceive>:
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	00 d0       	rcall	.+0      	; 0xc58 <xQueueReceive+0x12>
     c58:	1f 92       	push	r1
     c5a:	1f 92       	push	r1
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	8c 01       	movw	r16, r24
     c62:	6b 01       	movw	r12, r22
     c64:	5d 83       	std	Y+5, r21	; 0x05
     c66:	4c 83       	std	Y+4, r20	; 0x04
     c68:	e1 2c       	mov	r14, r1
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	0f 92       	push	r0
     c70:	f8 01       	movw	r30, r16
     c72:	f2 8c       	ldd	r15, Z+26	; 0x1a
     c74:	ff 20       	and	r15, r15
     c76:	91 f0       	breq	.+36     	; 0xc9c <xQueueReceive+0x56>
     c78:	b6 01       	movw	r22, r12
     c7a:	c8 01       	movw	r24, r16
     c7c:	43 de       	rcall	.-890    	; 0x904 <prvCopyDataFromQueue>
     c7e:	fa 94       	dec	r15
     c80:	f8 01       	movw	r30, r16
     c82:	f2 8e       	std	Z+26, r15	; 0x1a
     c84:	80 85       	ldd	r24, Z+8	; 0x08
     c86:	88 23       	and	r24, r24
     c88:	29 f0       	breq	.+10     	; 0xc94 <xQueueReceive+0x4e>
     c8a:	c8 01       	movw	r24, r16
     c8c:	08 96       	adiw	r24, 0x08	; 8
     c8e:	c0 d7       	rcall	.+3968   	; 0x1c10 <xTaskRemoveFromEventList>
     c90:	81 11       	cpse	r24, r1
     c92:	e7 dc       	rcall	.-1586   	; 0x662 <vPortYield>
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	48 c0       	rjmp	.+144    	; 0xd2c <xQueueReceive+0xe6>
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	89 2b       	or	r24, r25
     ca2:	21 f4       	brne	.+8      	; 0xcac <xQueueReceive+0x66>
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	40 c0       	rjmp	.+128    	; 0xd2c <xQueueReceive+0xe6>
     cac:	e1 10       	cpse	r14, r1
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <xQueueReceive+0x76>
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskInternalSetTimeOutState>
     cb8:	ee 24       	eor	r14, r14
     cba:	e3 94       	inc	r14
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	72 d4       	rcall	.+2276   	; 0x15a6 <vTaskSuspendAll>
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	0f 92       	push	r0
     cc8:	f8 01       	movw	r30, r16
     cca:	85 8d       	ldd	r24, Z+29	; 0x1d
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	09 f4       	brne	.+2      	; 0xcd2 <xQueueReceive+0x8c>
     cd0:	15 8e       	std	Z+29, r1	; 0x1d
     cd2:	f8 01       	movw	r30, r16
     cd4:	86 8d       	ldd	r24, Z+30	; 0x1e
     cd6:	8f 3f       	cpi	r24, 0xFF	; 255
     cd8:	09 f4       	brne	.+2      	; 0xcdc <xQueueReceive+0x96>
     cda:	16 8e       	std	Z+30, r1	; 0x1e
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	be 01       	movw	r22, r28
     ce2:	6c 5f       	subi	r22, 0xFC	; 252
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <xTaskCheckForTimeOut>
     cee:	81 11       	cpse	r24, r1
     cf0:	14 c0       	rjmp	.+40     	; 0xd1a <xQueueReceive+0xd4>
     cf2:	c8 01       	movw	r24, r16
     cf4:	8d dd       	rcall	.-1254   	; 0x810 <prvIsQueueEmpty>
     cf6:	88 23       	and	r24, r24
     cf8:	61 f0       	breq	.+24     	; 0xd12 <xQueueReceive+0xcc>
     cfa:	6c 81       	ldd	r22, Y+4	; 0x04
     cfc:	7d 81       	ldd	r23, Y+5	; 0x05
     cfe:	c8 01       	movw	r24, r16
     d00:	41 96       	adiw	r24, 0x11	; 17
     d02:	2d d7       	rcall	.+3674   	; 0x1b5e <vTaskPlaceOnEventList>
     d04:	c8 01       	movw	r24, r16
     d06:	18 de       	rcall	.-976    	; 0x938 <prvUnlockQueue>
     d08:	77 d5       	rcall	.+2798   	; 0x17f8 <xTaskResumeAll>
     d0a:	81 11       	cpse	r24, r1
     d0c:	ae cf       	rjmp	.-164    	; 0xc6a <xQueueReceive+0x24>
     d0e:	a9 dc       	rcall	.-1710   	; 0x662 <vPortYield>
     d10:	ac cf       	rjmp	.-168    	; 0xc6a <xQueueReceive+0x24>
     d12:	c8 01       	movw	r24, r16
     d14:	11 de       	rcall	.-990    	; 0x938 <prvUnlockQueue>
     d16:	70 d5       	rcall	.+2784   	; 0x17f8 <xTaskResumeAll>
     d18:	a8 cf       	rjmp	.-176    	; 0xc6a <xQueueReceive+0x24>
     d1a:	c8 01       	movw	r24, r16
     d1c:	0d de       	rcall	.-998    	; 0x938 <prvUnlockQueue>
     d1e:	6c d5       	rcall	.+2776   	; 0x17f8 <xTaskResumeAll>
     d20:	c8 01       	movw	r24, r16
     d22:	76 dd       	rcall	.-1300   	; 0x810 <prvIsQueueEmpty>
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <xQueueReceive+0xe4>
     d28:	a0 cf       	rjmp	.-192    	; 0xc6a <xQueueReceive+0x24>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	08 95       	ret

00000d48 <xQueueSemaphoreTake>:
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 d0       	rcall	.+0      	; 0xd56 <xQueueSemaphoreTake+0xe>
     d56:	1f 92       	push	r1
     d58:	1f 92       	push	r1
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	8c 01       	movw	r16, r24
     d60:	7d 83       	std	Y+5, r23	; 0x05
     d62:	6c 83       	std	Y+4, r22	; 0x04
     d64:	e1 2c       	mov	r14, r1
     d66:	f1 2c       	mov	r15, r1
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	0f 92       	push	r0
     d6e:	f8 01       	movw	r30, r16
     d70:	82 8d       	ldd	r24, Z+26	; 0x1a
     d72:	88 23       	and	r24, r24
     d74:	c1 f0       	breq	.+48     	; 0xda6 <xQueueSemaphoreTake+0x5e>
     d76:	81 50       	subi	r24, 0x01	; 1
     d78:	82 8f       	std	Z+26, r24	; 0x1a
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	89 2b       	or	r24, r25
     d80:	29 f4       	brne	.+10     	; 0xd8c <xQueueSemaphoreTake+0x44>
     d82:	0e 94 8a 10 	call	0x2114	; 0x2114 <pvTaskIncrementMutexHeldCount>
     d86:	f8 01       	movw	r30, r16
     d88:	95 83       	std	Z+5, r25	; 0x05
     d8a:	84 83       	std	Z+4, r24	; 0x04
     d8c:	f8 01       	movw	r30, r16
     d8e:	80 85       	ldd	r24, Z+8	; 0x08
     d90:	88 23       	and	r24, r24
     d92:	29 f0       	breq	.+10     	; 0xd9e <xQueueSemaphoreTake+0x56>
     d94:	c8 01       	movw	r24, r16
     d96:	08 96       	adiw	r24, 0x08	; 8
     d98:	3b d7       	rcall	.+3702   	; 0x1c10 <xTaskRemoveFromEventList>
     d9a:	81 11       	cpse	r24, r1
     d9c:	62 dc       	rcall	.-1852   	; 0x662 <vPortYield>
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	66 c0       	rjmp	.+204    	; 0xe72 <xQueueSemaphoreTake+0x12a>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	89 2b       	or	r24, r25
     dac:	21 f4       	brne	.+8      	; 0xdb6 <xQueueSemaphoreTake+0x6e>
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	5e c0       	rjmp	.+188    	; 0xe72 <xQueueSemaphoreTake+0x12a>
     db6:	f1 10       	cpse	r15, r1
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <xQueueSemaphoreTake+0x7c>
     dba:	ce 01       	movw	r24, r28
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	e5 d7       	rcall	.+4042   	; 0x1d8a <vTaskInternalSetTimeOutState>
     dc0:	ff 24       	eor	r15, r15
     dc2:	f3 94       	inc	r15
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	ee d3       	rcall	.+2012   	; 0x15a6 <vTaskSuspendAll>
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	0f 92       	push	r0
     dd0:	f8 01       	movw	r30, r16
     dd2:	85 8d       	ldd	r24, Z+29	; 0x1d
     dd4:	8f 3f       	cpi	r24, 0xFF	; 255
     dd6:	09 f4       	brne	.+2      	; 0xdda <xQueueSemaphoreTake+0x92>
     dd8:	15 8e       	std	Z+29, r1	; 0x1d
     dda:	f8 01       	movw	r30, r16
     ddc:	86 8d       	ldd	r24, Z+30	; 0x1e
     dde:	8f 3f       	cpi	r24, 0xFF	; 255
     de0:	09 f4       	brne	.+2      	; 0xde4 <xQueueSemaphoreTake+0x9c>
     de2:	16 8e       	std	Z+30, r1	; 0x1e
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	be 01       	movw	r22, r28
     dea:	6c 5f       	subi	r22, 0xFC	; 252
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	d6 d7       	rcall	.+4012   	; 0x1da0 <xTaskCheckForTimeOut>
     df4:	81 11       	cpse	r24, r1
     df6:	23 c0       	rjmp	.+70     	; 0xe3e <xQueueSemaphoreTake+0xf6>
     df8:	c8 01       	movw	r24, r16
     dfa:	0a dd       	rcall	.-1516   	; 0x810 <prvIsQueueEmpty>
     dfc:	88 23       	and	r24, r24
     dfe:	d9 f0       	breq	.+54     	; 0xe36 <xQueueSemaphoreTake+0xee>
     e00:	f8 01       	movw	r30, r16
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	89 2b       	or	r24, r25
     e08:	51 f4       	brne	.+20     	; 0xe1e <xQueueSemaphoreTake+0xd6>
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	0f 92       	push	r0
     e10:	84 81       	ldd	r24, Z+4	; 0x04
     e12:	95 81       	ldd	r25, Z+5	; 0x05
     e14:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <xTaskPriorityInherit>
     e18:	e8 2e       	mov	r14, r24
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	6c 81       	ldd	r22, Y+4	; 0x04
     e20:	7d 81       	ldd	r23, Y+5	; 0x05
     e22:	c8 01       	movw	r24, r16
     e24:	41 96       	adiw	r24, 0x11	; 17
     e26:	9b d6       	rcall	.+3382   	; 0x1b5e <vTaskPlaceOnEventList>
     e28:	c8 01       	movw	r24, r16
     e2a:	86 dd       	rcall	.-1268   	; 0x938 <prvUnlockQueue>
     e2c:	e5 d4       	rcall	.+2506   	; 0x17f8 <xTaskResumeAll>
     e2e:	81 11       	cpse	r24, r1
     e30:	9b cf       	rjmp	.-202    	; 0xd68 <xQueueSemaphoreTake+0x20>
     e32:	17 dc       	rcall	.-2002   	; 0x662 <vPortYield>
     e34:	99 cf       	rjmp	.-206    	; 0xd68 <xQueueSemaphoreTake+0x20>
     e36:	c8 01       	movw	r24, r16
     e38:	7f dd       	rcall	.-1282   	; 0x938 <prvUnlockQueue>
     e3a:	de d4       	rcall	.+2492   	; 0x17f8 <xTaskResumeAll>
     e3c:	95 cf       	rjmp	.-214    	; 0xd68 <xQueueSemaphoreTake+0x20>
     e3e:	c8 01       	movw	r24, r16
     e40:	7b dd       	rcall	.-1290   	; 0x938 <prvUnlockQueue>
     e42:	da d4       	rcall	.+2484   	; 0x17f8 <xTaskResumeAll>
     e44:	c8 01       	movw	r24, r16
     e46:	e4 dc       	rcall	.-1592   	; 0x810 <prvIsQueueEmpty>
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <xQueueSemaphoreTake+0x106>
     e4c:	8d cf       	rjmp	.-230    	; 0xd68 <xQueueSemaphoreTake+0x20>
     e4e:	ee 20       	and	r14, r14
     e50:	79 f0       	breq	.+30     	; 0xe70 <xQueueSemaphoreTake+0x128>
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	0f 92       	push	r0
     e58:	c8 01       	movw	r24, r16
     e5a:	ca dc       	rcall	.-1644   	; 0x7f0 <prvGetDisinheritPriorityAfterTimeout>
     e5c:	68 2f       	mov	r22, r24
     e5e:	f8 01       	movw	r30, r16
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	95 81       	ldd	r25, Z+5	; 0x05
     e64:	0e 94 17 10 	call	0x202e	; 0x202e <vTaskPriorityDisinheritAfterTimeout>
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <xQueueSemaphoreTake+0x12a>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	08 95       	ret

00000e8a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	0f 92       	push	r0
     e96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	09 f4       	brne	.+2      	; 0xe9e <vQueueWaitForMessageRestricted+0x14>
     e9c:	1d 8e       	std	Y+29, r1	; 0x1d
     e9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea0:	8f 3f       	cpi	r24, 0xFF	; 255
     ea2:	09 f4       	brne	.+2      	; 0xea6 <vQueueWaitForMessageRestricted+0x1c>
     ea4:	1e 8e       	std	Y+30, r1	; 0x1e
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     eaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eac:	81 11       	cpse	r24, r1
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     eb0:	ce 01       	movw	r24, r28
     eb2:	41 96       	adiw	r24, 0x11	; 17
     eb4:	65 d6       	rcall	.+3274   	; 0x1b80 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     eb6:	ce 01       	movw	r24, r28
     eb8:	3f dd       	rcall	.-1410   	; 0x938 <prvUnlockQueue>
    }
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <prvTaskIsTaskSuspended>:
     ec0:	fc 01       	movw	r30, r24
     ec2:	22 85       	ldd	r18, Z+10	; 0x0a
     ec4:	33 85       	ldd	r19, Z+11	; 0x0b
     ec6:	21 58       	subi	r18, 0x81	; 129
     ec8:	32 41       	sbci	r19, 0x12	; 18
     eca:	59 f4       	brne	.+22     	; 0xee2 <prvTaskIsTaskSuspended+0x22>
     ecc:	fc 01       	movw	r30, r24
     ece:	84 89       	ldd	r24, Z+20	; 0x14
     ed0:	95 89       	ldd	r25, Z+21	; 0x15
     ed2:	f2 e1       	ldi	r31, 0x12	; 18
     ed4:	84 39       	cpi	r24, 0x94	; 148
     ed6:	9f 07       	cpc	r25, r31
     ed8:	31 f0       	breq	.+12     	; 0xee6 <prvTaskIsTaskSuspended+0x26>
     eda:	89 2b       	or	r24, r25
     edc:	31 f0       	breq	.+12     	; 0xeea <prvTaskIsTaskSuspended+0x2a>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	08 95       	ret

00000eee <prvResetNextTaskUnblockTime>:
     eee:	e0 91 9f 12 	lds	r30, 0x129F	; 0x80129f <pxDelayedTaskList>
     ef2:	f0 91 a0 12 	lds	r31, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
     ef6:	80 81       	ld	r24, Z
     ef8:	81 11       	cpse	r24, r1
     efa:	07 c0       	rjmp	.+14     	; 0xf0a <prvResetNextTaskUnblockTime+0x1c>
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	90 93 76 12 	sts	0x1276, r25	; 0x801276 <xNextTaskUnblockTime+0x1>
     f04:	80 93 75 12 	sts	0x1275, r24	; 0x801275 <xNextTaskUnblockTime>
     f08:	08 95       	ret
     f0a:	e0 91 9f 12 	lds	r30, 0x129F	; 0x80129f <pxDelayedTaskList>
     f0e:	f0 91 a0 12 	lds	r31, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
     f12:	05 80       	ldd	r0, Z+5	; 0x05
     f14:	f6 81       	ldd	r31, Z+6	; 0x06
     f16:	e0 2d       	mov	r30, r0
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	90 93 76 12 	sts	0x1276, r25	; 0x801276 <xNextTaskUnblockTime+0x1>
     f20:	80 93 75 12 	sts	0x1275, r24	; 0x801275 <xNextTaskUnblockTime>
     f24:	08 95       	ret

00000f26 <prvDeleteTCB>:
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	8f 89       	ldd	r24, Y+23	; 0x17
     f2e:	98 8d       	ldd	r25, Y+24	; 0x18
     f30:	7b da       	rcall	.-2826   	; 0x428 <vPortFree>
     f32:	ce 01       	movw	r24, r28
     f34:	79 da       	rcall	.-2830   	; 0x428 <vPortFree>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <prvInitialiseNewTask>:
     f3c:	4f 92       	push	r4
     f3e:	5f 92       	push	r5
     f40:	6f 92       	push	r6
     f42:	7f 92       	push	r7
     f44:	8f 92       	push	r8
     f46:	9f 92       	push	r9
     f48:	af 92       	push	r10
     f4a:	bf 92       	push	r11
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	0f 93       	push	r16
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	2c 01       	movw	r4, r24
     f5c:	5b 01       	movw	r10, r22
     f5e:	4a 01       	movw	r8, r20
     f60:	39 01       	movw	r6, r18
     f62:	e6 01       	movw	r28, r12
     f64:	65 ea       	ldi	r22, 0xA5	; 165
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	8f 89       	ldd	r24, Y+23	; 0x17
     f6a:	98 8d       	ldd	r25, Y+24	; 0x18
     f6c:	0e 94 77 21 	call	0x42ee	; 0x42ee <memset>
     f70:	8f 89       	ldd	r24, Y+23	; 0x17
     f72:	98 8d       	ldd	r25, Y+24	; 0x18
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	82 1a       	sub	r8, r18
     f78:	91 08       	sbc	r9, r1
     f7a:	88 0e       	add	r8, r24
     f7c:	99 1e       	adc	r9, r25
     f7e:	a1 14       	cp	r10, r1
     f80:	b1 04       	cpc	r11, r1
     f82:	89 f4       	brne	.+34     	; 0xfa6 <prvInitialiseNewTask+0x6a>
     f84:	15 c0       	rjmp	.+42     	; 0xfb0 <prvInitialiseNewTask+0x74>
     f86:	82 2f       	mov	r24, r18
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	f5 01       	movw	r30, r10
     f8c:	e8 0f       	add	r30, r24
     f8e:	f9 1f       	adc	r31, r25
     f90:	30 81       	ld	r19, Z
     f92:	de 01       	movw	r26, r28
     f94:	a8 0f       	add	r26, r24
     f96:	b9 1f       	adc	r27, r25
     f98:	59 96       	adiw	r26, 0x19	; 25
     f9a:	3c 93       	st	X, r19
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	29 f0       	breq	.+10     	; 0xfac <prvInitialiseNewTask+0x70>
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <prvInitialiseNewTask+0x6c>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	28 30       	cpi	r18, 0x08	; 8
     faa:	68 f3       	brcs	.-38     	; 0xf86 <prvInitialiseNewTask+0x4a>
     fac:	18 a2       	std	Y+32, r1	; 0x20
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <prvInitialiseNewTask+0x76>
     fb0:	19 8e       	std	Y+25, r1	; 0x19
     fb2:	04 30       	cpi	r16, 0x04	; 4
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <prvInitialiseNewTask+0x7c>
     fb6:	03 e0       	ldi	r16, 0x03	; 3
     fb8:	0e 8b       	std	Y+22, r16	; 0x16
     fba:	09 a3       	std	Y+33, r16	; 0x21
     fbc:	1a a2       	std	Y+34, r1	; 0x22
     fbe:	ce 01       	movw	r24, r28
     fc0:	02 96       	adiw	r24, 0x02	; 2
     fc2:	7d da       	rcall	.-2822   	; 0x4be <vListInitialiseItem>
     fc4:	ce 01       	movw	r24, r28
     fc6:	0c 96       	adiw	r24, 0x0c	; 12
     fc8:	7a da       	rcall	.-2828   	; 0x4be <vListInitialiseItem>
     fca:	d9 87       	std	Y+9, r29	; 0x09
     fcc:	c8 87       	std	Y+8, r28	; 0x08
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	80 1b       	sub	r24, r16
     fd4:	91 09       	sbc	r25, r1
     fd6:	9d 87       	std	Y+13, r25	; 0x0d
     fd8:	8c 87       	std	Y+12, r24	; 0x0c
     fda:	db 8b       	std	Y+19, r29	; 0x13
     fdc:	ca 8b       	std	Y+18, r28	; 0x12
     fde:	84 e0       	ldi	r24, 0x04	; 4
     fe0:	fe 01       	movw	r30, r28
     fe2:	b3 96       	adiw	r30, 0x23	; 35
     fe4:	df 01       	movw	r26, r30
     fe6:	1d 92       	st	X+, r1
     fe8:	8a 95       	dec	r24
     fea:	e9 f7       	brne	.-6      	; 0xfe6 <prvInitialiseNewTask+0xaa>
     fec:	1f a2       	std	Y+39, r1	; 0x27
     fee:	a3 01       	movw	r20, r6
     ff0:	b2 01       	movw	r22, r4
     ff2:	c4 01       	movw	r24, r8
     ff4:	ed da       	rcall	.-2598   	; 0x5d0 <pxPortInitialiseStack>
     ff6:	99 83       	std	Y+1, r25	; 0x01
     ff8:	88 83       	st	Y, r24
     ffa:	e1 14       	cp	r14, r1
     ffc:	f1 04       	cpc	r15, r1
     ffe:	19 f0       	breq	.+6      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1000:	f7 01       	movw	r30, r14
    1002:	d1 83       	std	Z+1, r29	; 0x01
    1004:	c0 83       	st	Z, r28
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	7f 90       	pop	r7
    101e:	6f 90       	pop	r6
    1020:	5f 90       	pop	r5
    1022:	4f 90       	pop	r4
    1024:	08 95       	ret

00001026 <prvInitialiseTaskLists>:
    1026:	cf 93       	push	r28
    1028:	c0 e0       	ldi	r28, 0x00	; 0
    102a:	0f c0       	rjmp	.+30     	; 0x104a <prvInitialiseTaskLists+0x24>
    102c:	8c 2f       	mov	r24, r28
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9c 01       	movw	r18, r24
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	8d 54       	subi	r24, 0x4D	; 77
    1044:	9d 4e       	sbci	r25, 0xED	; 237
    1046:	2d da       	rcall	.-2982   	; 0x4a2 <vListInitialise>
    1048:	cf 5f       	subi	r28, 0xFF	; 255
    104a:	c4 30       	cpi	r28, 0x04	; 4
    104c:	78 f3       	brcs	.-34     	; 0x102c <prvInitialiseTaskLists+0x6>
    104e:	8a ea       	ldi	r24, 0xAA	; 170
    1050:	92 e1       	ldi	r25, 0x12	; 18
    1052:	27 da       	rcall	.-2994   	; 0x4a2 <vListInitialise>
    1054:	81 ea       	ldi	r24, 0xA1	; 161
    1056:	92 e1       	ldi	r25, 0x12	; 18
    1058:	24 da       	rcall	.-3000   	; 0x4a2 <vListInitialise>
    105a:	84 e9       	ldi	r24, 0x94	; 148
    105c:	92 e1       	ldi	r25, 0x12	; 18
    105e:	21 da       	rcall	.-3006   	; 0x4a2 <vListInitialise>
    1060:	8b e8       	ldi	r24, 0x8B	; 139
    1062:	92 e1       	ldi	r25, 0x12	; 18
    1064:	1e da       	rcall	.-3012   	; 0x4a2 <vListInitialise>
    1066:	81 e8       	ldi	r24, 0x81	; 129
    1068:	92 e1       	ldi	r25, 0x12	; 18
    106a:	1b da       	rcall	.-3018   	; 0x4a2 <vListInitialise>
    106c:	8a ea       	ldi	r24, 0xAA	; 170
    106e:	92 e1       	ldi	r25, 0x12	; 18
    1070:	90 93 a0 12 	sts	0x12A0, r25	; 0x8012a0 <pxDelayedTaskList+0x1>
    1074:	80 93 9f 12 	sts	0x129F, r24	; 0x80129f <pxDelayedTaskList>
    1078:	81 ea       	ldi	r24, 0xA1	; 161
    107a:	92 e1       	ldi	r25, 0x12	; 18
    107c:	90 93 9e 12 	sts	0x129E, r25	; 0x80129e <pxOverflowDelayedTaskList+0x1>
    1080:	80 93 9d 12 	sts	0x129D, r24	; 0x80129d <pxOverflowDelayedTaskList>
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <prvAddNewTaskToReadyList>:
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	0f 92       	push	r0
    1094:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <uxCurrentNumberOfTasks>
    109e:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    10a2:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    10a6:	89 2b       	or	r24, r25
    10a8:	51 f4       	brne	.+20     	; 0x10be <prvAddNewTaskToReadyList+0x36>
    10aa:	d0 93 d8 12 	sts	0x12D8, r29	; 0x8012d8 <pxCurrentTCB+0x1>
    10ae:	c0 93 d7 12 	sts	0x12D7, r28	; 0x8012d7 <pxCurrentTCB>
    10b2:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 f4       	brne	.+36     	; 0x10de <prvAddNewTaskToReadyList+0x56>
    10ba:	b5 df       	rcall	.-150    	; 0x1026 <prvInitialiseTaskLists>
    10bc:	10 c0       	rjmp	.+32     	; 0x10de <prvAddNewTaskToReadyList+0x56>
    10be:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    10c2:	81 11       	cpse	r24, r1
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <prvAddNewTaskToReadyList+0x56>
    10c6:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    10ca:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    10ce:	96 89       	ldd	r25, Z+22	; 0x16
    10d0:	8e 89       	ldd	r24, Y+22	; 0x16
    10d2:	89 17       	cp	r24, r25
    10d4:	20 f0       	brcs	.+8      	; 0x10de <prvAddNewTaskToReadyList+0x56>
    10d6:	d0 93 d8 12 	sts	0x12D8, r29	; 0x8012d8 <pxCurrentTCB+0x1>
    10da:	c0 93 d7 12 	sts	0x12D7, r28	; 0x8012d7 <pxCurrentTCB>
    10de:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <uxTaskNumber>
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <uxTaskNumber>
    10e8:	8e 89       	ldd	r24, Y+22	; 0x16
    10ea:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    10ee:	98 17       	cp	r25, r24
    10f0:	10 f4       	brcc	.+4      	; 0x10f6 <prvAddNewTaskToReadyList+0x6e>
    10f2:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	fc 01       	movw	r30, r24
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	8e 0f       	add	r24, r30
    1108:	9f 1f       	adc	r25, r31
    110a:	fc 01       	movw	r30, r24
    110c:	ed 54       	subi	r30, 0x4D	; 77
    110e:	fd 4e       	sbci	r31, 0xED	; 237
    1110:	01 80       	ldd	r0, Z+1	; 0x01
    1112:	f2 81       	ldd	r31, Z+2	; 0x02
    1114:	e0 2d       	mov	r30, r0
    1116:	fd 83       	std	Y+5, r31	; 0x05
    1118:	ec 83       	std	Y+4, r30	; 0x04
    111a:	84 81       	ldd	r24, Z+4	; 0x04
    111c:	95 81       	ldd	r25, Z+5	; 0x05
    111e:	9f 83       	std	Y+7, r25	; 0x07
    1120:	8e 83       	std	Y+6, r24	; 0x06
    1122:	a4 81       	ldd	r26, Z+4	; 0x04
    1124:	b5 81       	ldd	r27, Z+5	; 0x05
    1126:	ce 01       	movw	r24, r28
    1128:	02 96       	adiw	r24, 0x02	; 2
    112a:	13 96       	adiw	r26, 0x03	; 3
    112c:	9c 93       	st	X, r25
    112e:	8e 93       	st	-X, r24
    1130:	12 97       	sbiw	r26, 0x02	; 2
    1132:	95 83       	std	Z+5, r25	; 0x05
    1134:	84 83       	std	Z+4, r24	; 0x04
    1136:	ee 89       	ldd	r30, Y+22	; 0x16
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	cf 01       	movw	r24, r30
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	ed 54       	subi	r30, 0x4D	; 77
    114e:	fd 4e       	sbci	r31, 0xED	; 237
    1150:	fb 87       	std	Y+11, r31	; 0x0b
    1152:	ea 87       	std	Y+10, r30	; 0x0a
    1154:	80 81       	ld	r24, Z
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 83       	st	Z, r24
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    1162:	88 23       	and	r24, r24
    1164:	49 f0       	breq	.+18     	; 0x1178 <prvAddNewTaskToReadyList+0xf0>
    1166:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    116a:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    116e:	96 89       	ldd	r25, Z+22	; 0x16
    1170:	8e 89       	ldd	r24, Y+22	; 0x16
    1172:	98 17       	cp	r25, r24
    1174:	08 f4       	brcc	.+2      	; 0x1178 <prvAddNewTaskToReadyList+0xf0>
    1176:	75 da       	rcall	.-2838   	; 0x662 <vPortYield>
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <prvCheckTasksWaitingTermination>:
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	1a c0       	rjmp	.+52     	; 0x11b8 <prvCheckTasksWaitingTermination+0x3a>
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	0f 92       	push	r0
    118a:	e0 91 90 12 	lds	r30, 0x1290	; 0x801290 <xTasksWaitingTermination+0x5>
    118e:	f0 91 91 12 	lds	r31, 0x1291	; 0x801291 <xTasksWaitingTermination+0x6>
    1192:	c6 81       	ldd	r28, Z+6	; 0x06
    1194:	d7 81       	ldd	r29, Z+7	; 0x07
    1196:	ce 01       	movw	r24, r28
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	e7 d9       	rcall	.-3122   	; 0x56a <uxListRemove>
    119c:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <uxCurrentNumberOfTasks>
    11a6:	80 91 8a 12 	lds	r24, 0x128A	; 0x80128a <uxDeletedTasksWaitingCleanUp>
    11aa:	81 50       	subi	r24, 0x01	; 1
    11ac:	80 93 8a 12 	sts	0x128A, r24	; 0x80128a <uxDeletedTasksWaitingCleanUp>
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	ce 01       	movw	r24, r28
    11b6:	b7 de       	rcall	.-658    	; 0xf26 <prvDeleteTCB>
    11b8:	80 91 8a 12 	lds	r24, 0x128A	; 0x80128a <uxDeletedTasksWaitingCleanUp>
    11bc:	81 11       	cpse	r24, r1
    11be:	e2 cf       	rjmp	.-60     	; 0x1184 <prvCheckTasksWaitingTermination+0x6>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <prvAddCurrentTaskToDelayedList>:
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	ec 01       	movw	r28, r24
    11d2:	f6 2e       	mov	r15, r22
    11d4:	00 91 7e 12 	lds	r16, 0x127E	; 0x80127e <xTickCount>
    11d8:	10 91 7f 12 	lds	r17, 0x127F	; 0x80127f <xTickCount+0x1>
    11dc:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    11e0:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    11e4:	02 96       	adiw	r24, 0x02	; 2
    11e6:	c1 d9       	rcall	.-3198   	; 0x56a <uxListRemove>
    11e8:	cf 3f       	cpi	r28, 0xFF	; 255
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	d8 07       	cpc	r29, r24
    11ee:	b1 f5       	brne	.+108    	; 0x125c <prvAddCurrentTaskToDelayedList+0x96>
    11f0:	ff 20       	and	r15, r15
    11f2:	a1 f1       	breq	.+104    	; 0x125c <prvAddCurrentTaskToDelayedList+0x96>
    11f4:	e1 e8       	ldi	r30, 0x81	; 129
    11f6:	f2 e1       	ldi	r31, 0x12	; 18
    11f8:	a1 81       	ldd	r26, Z+1	; 0x01
    11fa:	b2 81       	ldd	r27, Z+2	; 0x02
    11fc:	c0 91 d7 12 	lds	r28, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1200:	d0 91 d8 12 	lds	r29, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1204:	bd 83       	std	Y+5, r27	; 0x05
    1206:	ac 83       	std	Y+4, r26	; 0x04
    1208:	c0 91 d7 12 	lds	r28, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    120c:	d0 91 d8 12 	lds	r29, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1210:	14 96       	adiw	r26, 0x04	; 4
    1212:	8d 91       	ld	r24, X+
    1214:	9c 91       	ld	r25, X
    1216:	15 97       	sbiw	r26, 0x05	; 5
    1218:	9f 83       	std	Y+7, r25	; 0x07
    121a:	8e 83       	std	Y+6, r24	; 0x06
    121c:	14 96       	adiw	r26, 0x04	; 4
    121e:	cd 91       	ld	r28, X+
    1220:	dc 91       	ld	r29, X
    1222:	15 97       	sbiw	r26, 0x05	; 5
    1224:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1228:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    122c:	02 96       	adiw	r24, 0x02	; 2
    122e:	9b 83       	std	Y+3, r25	; 0x03
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1236:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	15 96       	adiw	r26, 0x05	; 5
    123e:	9c 93       	st	X, r25
    1240:	8e 93       	st	-X, r24
    1242:	14 97       	sbiw	r26, 0x04	; 4
    1244:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1248:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    124c:	1b 96       	adiw	r26, 0x0b	; 11
    124e:	fc 93       	st	X, r31
    1250:	ee 93       	st	-X, r30
    1252:	1a 97       	sbiw	r26, 0x0a	; 10
    1254:	80 81       	ld	r24, Z
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
    125a:	2d c0       	rjmp	.+90     	; 0x12b6 <prvAddCurrentTaskToDelayedList+0xf0>
    125c:	c0 0f       	add	r28, r16
    125e:	d1 1f       	adc	r29, r17
    1260:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1264:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1268:	d3 83       	std	Z+3, r29	; 0x03
    126a:	c2 83       	std	Z+2, r28	; 0x02
    126c:	c0 17       	cp	r28, r16
    126e:	d1 07       	cpc	r29, r17
    1270:	60 f4       	brcc	.+24     	; 0x128a <prvAddCurrentTaskToDelayedList+0xc4>
    1272:	60 91 d7 12 	lds	r22, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1276:	70 91 d8 12 	lds	r23, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    127a:	80 91 9d 12 	lds	r24, 0x129D	; 0x80129d <pxOverflowDelayedTaskList>
    127e:	90 91 9e 12 	lds	r25, 0x129E	; 0x80129e <pxOverflowDelayedTaskList+0x1>
    1282:	6e 5f       	subi	r22, 0xFE	; 254
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	40 d9       	rcall	.-3456   	; 0x508 <vListInsert>
    1288:	16 c0       	rjmp	.+44     	; 0x12b6 <prvAddCurrentTaskToDelayedList+0xf0>
    128a:	60 91 d7 12 	lds	r22, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    128e:	70 91 d8 12 	lds	r23, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1292:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <pxDelayedTaskList>
    1296:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
    129a:	6e 5f       	subi	r22, 0xFE	; 254
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	34 d9       	rcall	.-3480   	; 0x508 <vListInsert>
    12a0:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <xNextTaskUnblockTime>
    12a4:	90 91 76 12 	lds	r25, 0x1276	; 0x801276 <xNextTaskUnblockTime+0x1>
    12a8:	c8 17       	cp	r28, r24
    12aa:	d9 07       	cpc	r29, r25
    12ac:	20 f4       	brcc	.+8      	; 0x12b6 <prvAddCurrentTaskToDelayedList+0xf0>
    12ae:	d0 93 76 12 	sts	0x1276, r29	; 0x801276 <xNextTaskUnblockTime+0x1>
    12b2:	c0 93 75 12 	sts	0x1275, r28	; 0x801275 <xNextTaskUnblockTime>
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	08 95       	ret

000012c2 <xTaskCreate>:
    12c2:	2f 92       	push	r2
    12c4:	3f 92       	push	r3
    12c6:	4f 92       	push	r4
    12c8:	5f 92       	push	r5
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	3c 01       	movw	r6, r24
    12e6:	1b 01       	movw	r2, r22
    12e8:	4a 01       	movw	r8, r20
    12ea:	29 01       	movw	r4, r18
    12ec:	ca 01       	movw	r24, r20
    12ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <pvPortMalloc>
    12f2:	6c 01       	movw	r12, r24
    12f4:	89 2b       	or	r24, r25
    12f6:	69 f0       	breq	.+26     	; 0x1312 <xTaskCreate+0x50>
    12f8:	88 e2       	ldi	r24, 0x28	; 40
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <pvPortMalloc>
    1300:	ec 01       	movw	r28, r24
    1302:	89 2b       	or	r24, r25
    1304:	19 f0       	breq	.+6      	; 0x130c <xTaskCreate+0x4a>
    1306:	d8 8e       	std	Y+24, r13	; 0x18
    1308:	cf 8a       	std	Y+23, r12	; 0x17
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <xTaskCreate+0x54>
    130c:	c6 01       	movw	r24, r12
    130e:	8c d8       	rcall	.-3816   	; 0x428 <vPortFree>
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <xTaskCreate+0x54>
    1312:	c0 e0       	ldi	r28, 0x00	; 0
    1314:	d0 e0       	ldi	r29, 0x00	; 0
    1316:	20 97       	sbiw	r28, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <xTaskCreate+0x70>
    131a:	a1 2c       	mov	r10, r1
    131c:	b1 2c       	mov	r11, r1
    131e:	6e 01       	movw	r12, r28
    1320:	92 01       	movw	r18, r4
    1322:	a4 01       	movw	r20, r8
    1324:	b1 01       	movw	r22, r2
    1326:	c3 01       	movw	r24, r6
    1328:	09 de       	rcall	.-1006   	; 0xf3c <prvInitialiseNewTask>
    132a:	ce 01       	movw	r24, r28
    132c:	ad de       	rcall	.-678    	; 0x1088 <prvAddNewTaskToReadyList>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <xTaskCreate+0x72>
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	bf 90       	pop	r11
    1344:	af 90       	pop	r10
    1346:	9f 90       	pop	r9
    1348:	8f 90       	pop	r8
    134a:	7f 90       	pop	r7
    134c:	6f 90       	pop	r6
    134e:	5f 90       	pop	r5
    1350:	4f 90       	pop	r4
    1352:	3f 90       	pop	r3
    1354:	2f 90       	pop	r2
    1356:	08 95       	ret

00001358 <vTaskDelete>:
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	0f 92       	push	r0
    1368:	89 2b       	or	r24, r25
    136a:	21 f4       	brne	.+8      	; 0x1374 <vTaskDelete+0x1c>
    136c:	c0 91 d7 12 	lds	r28, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1370:	d0 91 d8 12 	lds	r29, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1374:	8e 01       	movw	r16, r28
    1376:	0e 5f       	subi	r16, 0xFE	; 254
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	c8 01       	movw	r24, r16
    137c:	f6 d8       	rcall	.-3604   	; 0x56a <uxListRemove>
    137e:	8c 89       	ldd	r24, Y+20	; 0x14
    1380:	9d 89       	ldd	r25, Y+21	; 0x15
    1382:	89 2b       	or	r24, r25
    1384:	19 f0       	breq	.+6      	; 0x138c <vTaskDelete+0x34>
    1386:	ce 01       	movw	r24, r28
    1388:	0c 96       	adiw	r24, 0x0c	; 12
    138a:	ef d8       	rcall	.-3618   	; 0x56a <uxListRemove>
    138c:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <uxTaskNumber>
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <uxTaskNumber>
    1396:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    139a:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    139e:	c8 17       	cp	r28, r24
    13a0:	d9 07       	cpc	r29, r25
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <vTaskDelete+0x60>
    13a4:	b8 01       	movw	r22, r16
    13a6:	8b e8       	ldi	r24, 0x8B	; 139
    13a8:	92 e1       	ldi	r25, 0x12	; 18
    13aa:	8d d8       	rcall	.-3814   	; 0x4c6 <vListInsertEnd>
    13ac:	80 91 8a 12 	lds	r24, 0x128A	; 0x80128a <uxDeletedTasksWaitingCleanUp>
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 8a 12 	sts	0x128A, r24	; 0x80128a <uxDeletedTasksWaitingCleanUp>
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <vTaskDelete+0x70>
    13b8:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    13bc:	81 50       	subi	r24, 0x01	; 1
    13be:	80 93 80 12 	sts	0x1280, r24	; 0x801280 <uxCurrentNumberOfTasks>
    13c2:	ce 01       	movw	r24, r28
    13c4:	b0 dd       	rcall	.-1184   	; 0xf26 <prvDeleteTCB>
    13c6:	93 dd       	rcall	.-1242   	; 0xeee <prvResetNextTaskUnblockTime>
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    13d0:	88 23       	and	r24, r24
    13d2:	41 f0       	breq	.+16     	; 0x13e4 <vTaskDelete+0x8c>
    13d4:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    13d8:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    13dc:	c8 17       	cp	r28, r24
    13de:	d9 07       	cpc	r29, r25
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <vTaskDelete+0x8c>
    13e2:	3f d9       	rcall	.-3458   	; 0x662 <vPortYield>
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <eTaskGetState>:
    13ee:	20 91 d7 12 	lds	r18, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    13f2:	30 91 d8 12 	lds	r19, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	09 f4       	brne	.+2      	; 0x13fe <eTaskGetState+0x10>
    13fc:	38 c0       	rjmp	.+112    	; 0x146e <eTaskGetState+0x80>
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	0f 92       	push	r0
    1404:	fc 01       	movw	r30, r24
    1406:	22 85       	ldd	r18, Z+10	; 0x0a
    1408:	33 85       	ldd	r19, Z+11	; 0x0b
    140a:	40 91 9f 12 	lds	r20, 0x129F	; 0x80129f <pxDelayedTaskList>
    140e:	50 91 a0 12 	lds	r21, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
    1412:	60 91 9d 12 	lds	r22, 0x129D	; 0x80129d <pxOverflowDelayedTaskList>
    1416:	70 91 9e 12 	lds	r23, 0x129E	; 0x80129e <pxOverflowDelayedTaskList+0x1>
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	24 17       	cp	r18, r20
    1420:	35 07       	cpc	r19, r21
    1422:	39 f1       	breq	.+78     	; 0x1472 <eTaskGetState+0x84>
    1424:	26 17       	cp	r18, r22
    1426:	37 07       	cpc	r19, r23
    1428:	31 f1       	breq	.+76     	; 0x1476 <eTaskGetState+0x88>
    142a:	f2 e1       	ldi	r31, 0x12	; 18
    142c:	21 38       	cpi	r18, 0x81	; 129
    142e:	3f 07       	cpc	r19, r31
    1430:	b1 f4       	brne	.+44     	; 0x145e <eTaskGetState+0x70>
    1432:	fc 01       	movw	r30, r24
    1434:	24 89       	ldd	r18, Z+20	; 0x14
    1436:	35 89       	ldd	r19, Z+21	; 0x15
    1438:	23 2b       	or	r18, r19
    143a:	61 f0       	breq	.+24     	; 0x1454 <eTaskGetState+0x66>
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	08 95       	ret
    1440:	fc 01       	movw	r30, r24
    1442:	e2 0f       	add	r30, r18
    1444:	f1 1d       	adc	r31, r1
    1446:	27 fd       	sbrc	r18, 7
    1448:	fa 95       	dec	r31
    144a:	37 a1       	ldd	r19, Z+39	; 0x27
    144c:	31 30       	cpi	r19, 0x01	; 1
    144e:	a9 f0       	breq	.+42     	; 0x147a <eTaskGetState+0x8c>
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <eTaskGetState+0x68>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	12 16       	cp	r1, r18
    1458:	9c f7       	brge	.-26     	; 0x1440 <eTaskGetState+0x52>
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	08 95       	ret
    145e:	f2 e1       	ldi	r31, 0x12	; 18
    1460:	2b 38       	cpi	r18, 0x8B	; 139
    1462:	3f 07       	cpc	r19, r31
    1464:	61 f0       	breq	.+24     	; 0x147e <eTaskGetState+0x90>
    1466:	23 2b       	or	r18, r19
    1468:	61 f4       	brne	.+24     	; 0x1482 <eTaskGetState+0x94>
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	08 95       	ret
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	08 95       	ret
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	08 95       	ret
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	08 95       	ret
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	08 95       	ret
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	08 95       	ret
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	08 95       	ret

00001486 <vTaskResume>:
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	20 91 d7 12 	lds	r18, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1492:	30 91 d8 12 	lds	r19, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1496:	82 17       	cp	r24, r18
    1498:	93 07       	cpc	r25, r19
    149a:	09 f4       	brne	.+2      	; 0x149e <vTaskResume+0x18>
    149c:	52 c0       	rjmp	.+164    	; 0x1542 <vTaskResume+0xbc>
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <vTaskResume+0x1e>
    14a2:	4f c0       	rjmp	.+158    	; 0x1542 <vTaskResume+0xbc>
    14a4:	ec 01       	movw	r28, r24
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	0f 92       	push	r0
    14ac:	09 dd       	rcall	.-1518   	; 0xec0 <prvTaskIsTaskSuspended>
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <vTaskResume+0x2e>
    14b2:	45 c0       	rjmp	.+138    	; 0x153e <vTaskResume+0xb8>
    14b4:	8e 01       	movw	r16, r28
    14b6:	0e 5f       	subi	r16, 0xFE	; 254
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	c8 01       	movw	r24, r16
    14bc:	56 d8       	rcall	.-3924   	; 0x56a <uxListRemove>
    14be:	8e 89       	ldd	r24, Y+22	; 0x16
    14c0:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    14c4:	98 17       	cp	r25, r24
    14c6:	10 f4       	brcc	.+4      	; 0x14cc <vTaskResume+0x46>
    14c8:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	fc 01       	movw	r30, r24
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	8e 0f       	add	r24, r30
    14de:	9f 1f       	adc	r25, r31
    14e0:	fc 01       	movw	r30, r24
    14e2:	ed 54       	subi	r30, 0x4D	; 77
    14e4:	fd 4e       	sbci	r31, 0xED	; 237
    14e6:	01 80       	ldd	r0, Z+1	; 0x01
    14e8:	f2 81       	ldd	r31, Z+2	; 0x02
    14ea:	e0 2d       	mov	r30, r0
    14ec:	fd 83       	std	Y+5, r31	; 0x05
    14ee:	ec 83       	std	Y+4, r30	; 0x04
    14f0:	84 81       	ldd	r24, Z+4	; 0x04
    14f2:	95 81       	ldd	r25, Z+5	; 0x05
    14f4:	9f 83       	std	Y+7, r25	; 0x07
    14f6:	8e 83       	std	Y+6, r24	; 0x06
    14f8:	a4 81       	ldd	r26, Z+4	; 0x04
    14fa:	b5 81       	ldd	r27, Z+5	; 0x05
    14fc:	13 96       	adiw	r26, 0x03	; 3
    14fe:	1c 93       	st	X, r17
    1500:	0e 93       	st	-X, r16
    1502:	12 97       	sbiw	r26, 0x02	; 2
    1504:	15 83       	std	Z+5, r17	; 0x05
    1506:	04 83       	std	Z+4, r16	; 0x04
    1508:	ee 89       	ldd	r30, Y+22	; 0x16
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	cf 01       	movw	r24, r30
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	e8 0f       	add	r30, r24
    151c:	f9 1f       	adc	r31, r25
    151e:	ed 54       	subi	r30, 0x4D	; 77
    1520:	fd 4e       	sbci	r31, 0xED	; 237
    1522:	fb 87       	std	Y+11, r31	; 0x0b
    1524:	ea 87       	std	Y+10, r30	; 0x0a
    1526:	80 81       	ld	r24, Z
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	80 83       	st	Z, r24
    152c:	9e 89       	ldd	r25, Y+22	; 0x16
    152e:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1532:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1536:	86 89       	ldd	r24, Z+22	; 0x16
    1538:	98 17       	cp	r25, r24
    153a:	08 f0       	brcs	.+2      	; 0x153e <vTaskResume+0xb8>
    153c:	92 d8       	rcall	.-3804   	; 0x662 <vPortYield>
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <vTaskStartScheduler>:
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	0f 2e       	mov	r0, r31
    1554:	f3 e7       	ldi	r31, 0x73	; 115
    1556:	ef 2e       	mov	r14, r31
    1558:	f2 e1       	ldi	r31, 0x12	; 18
    155a:	ff 2e       	mov	r15, r31
    155c:	f0 2d       	mov	r31, r0
    155e:	00 e0       	ldi	r16, 0x00	; 0
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	51 e0       	ldi	r21, 0x01	; 1
    1568:	67 e0       	ldi	r22, 0x07	; 7
    156a:	72 e0       	ldi	r23, 0x02	; 2
    156c:	8c e7       	ldi	r24, 0x7C	; 124
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a8 de       	rcall	.-688    	; 0x12c2 <xTaskCreate>
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	09 f4       	brne	.+2      	; 0x1578 <vTaskStartScheduler+0x2c>
    1576:	4d d6       	rcall	.+3226   	; 0x2212 <xTimerCreateTimerTask>
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	79 f4       	brne	.+30     	; 0x159a <vTaskStartScheduler+0x4e>
    157c:	f8 94       	cli
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	90 93 76 12 	sts	0x1276, r25	; 0x801276 <xNextTaskUnblockTime+0x1>
    1586:	80 93 75 12 	sts	0x1275, r24	; 0x801275 <xNextTaskUnblockTime>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 93 7c 12 	sts	0x127C, r24	; 0x80127c <xSchedulerRunning>
    1590:	10 92 7f 12 	sts	0x127F, r1	; 0x80127f <xTickCount+0x1>
    1594:	10 92 7e 12 	sts	0x127E, r1	; 0x80127e <xTickCount>
    1598:	32 d8       	rcall	.-3996   	; 0x5fe <xPortStartScheduler>
    159a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	08 95       	ret

000015a6 <vTaskSuspendAll>:
    15a6:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    15aa:	8f 5f       	subi	r24, 0xFF	; 255
    15ac:	80 93 72 12 	sts	0x1272, r24	; 0x801272 <uxSchedulerSuspended>
    15b0:	08 95       	ret

000015b2 <xTaskGetTickCount>:
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	0f 92       	push	r0
    15b8:	80 91 7e 12 	lds	r24, 0x127E	; 0x80127e <xTickCount>
    15bc:	90 91 7f 12 	lds	r25, 0x127F	; 0x80127f <xTickCount+0x1>
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	08 95       	ret

000015c6 <xTaskIncrementTick>:
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    15d2:	81 11       	cpse	r24, r1
    15d4:	00 c1       	rjmp	.+512    	; 0x17d6 <xTaskIncrementTick+0x210>
    15d6:	c0 91 7e 12 	lds	r28, 0x127E	; 0x80127e <xTickCount>
    15da:	d0 91 7f 12 	lds	r29, 0x127F	; 0x80127f <xTickCount+0x1>
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	10 93 7f 12 	sts	0x127F, r17	; 0x80127f <xTickCount+0x1>
    15e8:	00 93 7e 12 	sts	0x127E, r16	; 0x80127e <xTickCount>
    15ec:	01 15       	cp	r16, r1
    15ee:	11 05       	cpc	r17, r1
    15f0:	b1 f4       	brne	.+44     	; 0x161e <xTaskIncrementTick+0x58>
    15f2:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <pxDelayedTaskList>
    15f6:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
    15fa:	20 91 9d 12 	lds	r18, 0x129D	; 0x80129d <pxOverflowDelayedTaskList>
    15fe:	30 91 9e 12 	lds	r19, 0x129E	; 0x80129e <pxOverflowDelayedTaskList+0x1>
    1602:	30 93 a0 12 	sts	0x12A0, r19	; 0x8012a0 <pxDelayedTaskList+0x1>
    1606:	20 93 9f 12 	sts	0x129F, r18	; 0x80129f <pxDelayedTaskList>
    160a:	90 93 9e 12 	sts	0x129E, r25	; 0x80129e <pxOverflowDelayedTaskList+0x1>
    160e:	80 93 9d 12 	sts	0x129D, r24	; 0x80129d <pxOverflowDelayedTaskList>
    1612:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <xNumOfOverflows>
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <xNumOfOverflows>
    161c:	68 dc       	rcall	.-1840   	; 0xeee <prvResetNextTaskUnblockTime>
    161e:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <xNextTaskUnblockTime>
    1622:	90 91 76 12 	lds	r25, 0x1276	; 0x801276 <xNextTaskUnblockTime+0x1>
    1626:	08 17       	cp	r16, r24
    1628:	19 07       	cpc	r17, r25
    162a:	20 f4       	brcc	.+8      	; 0x1634 <xTaskIncrementTick+0x6e>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	b8 c0       	rjmp	.+368    	; 0x17a0 <xTaskIncrementTick+0x1da>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <xTaskIncrementTick+0x70>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	e0 91 9f 12 	lds	r30, 0x129F	; 0x80129f <pxDelayedTaskList>
    163a:	f0 91 a0 12 	lds	r31, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
    163e:	90 81       	ld	r25, Z
    1640:	91 11       	cpse	r25, r1
    1642:	07 c0       	rjmp	.+14     	; 0x1652 <xTaskIncrementTick+0x8c>
    1644:	2f ef       	ldi	r18, 0xFF	; 255
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	30 93 76 12 	sts	0x1276, r19	; 0x801276 <xNextTaskUnblockTime+0x1>
    164c:	20 93 75 12 	sts	0x1275, r18	; 0x801275 <xNextTaskUnblockTime>
    1650:	a7 c0       	rjmp	.+334    	; 0x17a0 <xTaskIncrementTick+0x1da>
    1652:	e0 91 9f 12 	lds	r30, 0x129F	; 0x80129f <pxDelayedTaskList>
    1656:	f0 91 a0 12 	lds	r31, 0x12A0	; 0x8012a0 <pxDelayedTaskList+0x1>
    165a:	05 80       	ldd	r0, Z+5	; 0x05
    165c:	f6 81       	ldd	r31, Z+6	; 0x06
    165e:	e0 2d       	mov	r30, r0
    1660:	06 80       	ldd	r0, Z+6	; 0x06
    1662:	f7 81       	ldd	r31, Z+7	; 0x07
    1664:	e0 2d       	mov	r30, r0
    1666:	22 81       	ldd	r18, Z+2	; 0x02
    1668:	33 81       	ldd	r19, Z+3	; 0x03
    166a:	02 17       	cp	r16, r18
    166c:	13 07       	cpc	r17, r19
    166e:	28 f4       	brcc	.+10     	; 0x167a <xTaskIncrementTick+0xb4>
    1670:	30 93 76 12 	sts	0x1276, r19	; 0x801276 <xNextTaskUnblockTime+0x1>
    1674:	20 93 75 12 	sts	0x1275, r18	; 0x801275 <xNextTaskUnblockTime>
    1678:	93 c0       	rjmp	.+294    	; 0x17a0 <xTaskIncrementTick+0x1da>
    167a:	a2 85       	ldd	r26, Z+10	; 0x0a
    167c:	b3 85       	ldd	r27, Z+11	; 0x0b
    167e:	24 81       	ldd	r18, Z+4	; 0x04
    1680:	35 81       	ldd	r19, Z+5	; 0x05
    1682:	46 81       	ldd	r20, Z+6	; 0x06
    1684:	57 81       	ldd	r21, Z+7	; 0x07
    1686:	e9 01       	movw	r28, r18
    1688:	5d 83       	std	Y+5, r21	; 0x05
    168a:	4c 83       	std	Y+4, r20	; 0x04
    168c:	26 81       	ldd	r18, Z+6	; 0x06
    168e:	37 81       	ldd	r19, Z+7	; 0x07
    1690:	44 81       	ldd	r20, Z+4	; 0x04
    1692:	55 81       	ldd	r21, Z+5	; 0x05
    1694:	e9 01       	movw	r28, r18
    1696:	5b 83       	std	Y+3, r21	; 0x03
    1698:	4a 83       	std	Y+2, r20	; 0x02
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	2d 91       	ld	r18, X+
    169e:	3c 91       	ld	r19, X
    16a0:	12 97       	sbiw	r26, 0x02	; 2
    16a2:	af 01       	movw	r20, r30
    16a4:	4e 5f       	subi	r20, 0xFE	; 254
    16a6:	5f 4f       	sbci	r21, 0xFF	; 255
    16a8:	24 17       	cp	r18, r20
    16aa:	35 07       	cpc	r19, r21
    16ac:	31 f4       	brne	.+12     	; 0x16ba <xTaskIncrementTick+0xf4>
    16ae:	26 81       	ldd	r18, Z+6	; 0x06
    16b0:	37 81       	ldd	r19, Z+7	; 0x07
    16b2:	12 96       	adiw	r26, 0x02	; 2
    16b4:	3c 93       	st	X, r19
    16b6:	2e 93       	st	-X, r18
    16b8:	11 97       	sbiw	r26, 0x01	; 1
    16ba:	13 86       	std	Z+11, r1	; 0x0b
    16bc:	12 86       	std	Z+10, r1	; 0x0a
    16be:	9c 91       	ld	r25, X
    16c0:	91 50       	subi	r25, 0x01	; 1
    16c2:	9c 93       	st	X, r25
    16c4:	a4 89       	ldd	r26, Z+20	; 0x14
    16c6:	b5 89       	ldd	r27, Z+21	; 0x15
    16c8:	10 97       	sbiw	r26, 0x00	; 0
    16ca:	19 f1       	breq	.+70     	; 0x1712 <xTaskIncrementTick+0x14c>
    16cc:	26 85       	ldd	r18, Z+14	; 0x0e
    16ce:	37 85       	ldd	r19, Z+15	; 0x0f
    16d0:	60 89       	ldd	r22, Z+16	; 0x10
    16d2:	71 89       	ldd	r23, Z+17	; 0x11
    16d4:	e9 01       	movw	r28, r18
    16d6:	7d 83       	std	Y+5, r23	; 0x05
    16d8:	6c 83       	std	Y+4, r22	; 0x04
    16da:	20 89       	ldd	r18, Z+16	; 0x10
    16dc:	31 89       	ldd	r19, Z+17	; 0x11
    16de:	66 85       	ldd	r22, Z+14	; 0x0e
    16e0:	77 85       	ldd	r23, Z+15	; 0x0f
    16e2:	e9 01       	movw	r28, r18
    16e4:	7b 83       	std	Y+3, r23	; 0x03
    16e6:	6a 83       	std	Y+2, r22	; 0x02
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	6d 91       	ld	r22, X+
    16ec:	7c 91       	ld	r23, X
    16ee:	12 97       	sbiw	r26, 0x02	; 2
    16f0:	9f 01       	movw	r18, r30
    16f2:	24 5f       	subi	r18, 0xF4	; 244
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	62 17       	cp	r22, r18
    16f8:	73 07       	cpc	r23, r19
    16fa:	31 f4       	brne	.+12     	; 0x1708 <xTaskIncrementTick+0x142>
    16fc:	20 89       	ldd	r18, Z+16	; 0x10
    16fe:	31 89       	ldd	r19, Z+17	; 0x11
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	3c 93       	st	X, r19
    1704:	2e 93       	st	-X, r18
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	15 8a       	std	Z+21, r1	; 0x15
    170a:	14 8a       	std	Z+20, r1	; 0x14
    170c:	9c 91       	ld	r25, X
    170e:	91 50       	subi	r25, 0x01	; 1
    1710:	9c 93       	st	X, r25
    1712:	26 89       	ldd	r18, Z+22	; 0x16
    1714:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    1718:	92 17       	cp	r25, r18
    171a:	10 f4       	brcc	.+4      	; 0x1720 <xTaskIncrementTick+0x15a>
    171c:	20 93 7d 12 	sts	0x127D, r18	; 0x80127d <uxTopReadyPriority>
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	d9 01       	movw	r26, r18
    1724:	aa 0f       	add	r26, r26
    1726:	bb 1f       	adc	r27, r27
    1728:	aa 0f       	add	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	aa 0f       	add	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	2a 0f       	add	r18, r26
    1732:	3b 1f       	adc	r19, r27
    1734:	d9 01       	movw	r26, r18
    1736:	ad 54       	subi	r26, 0x4D	; 77
    1738:	bd 4e       	sbci	r27, 0xED	; 237
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	0d 90       	ld	r0, X+
    173e:	bc 91       	ld	r27, X
    1740:	a0 2d       	mov	r26, r0
    1742:	b5 83       	std	Z+5, r27	; 0x05
    1744:	a4 83       	std	Z+4, r26	; 0x04
    1746:	14 96       	adiw	r26, 0x04	; 4
    1748:	2d 91       	ld	r18, X+
    174a:	3c 91       	ld	r19, X
    174c:	15 97       	sbiw	r26, 0x05	; 5
    174e:	37 83       	std	Z+7, r19	; 0x07
    1750:	26 83       	std	Z+6, r18	; 0x06
    1752:	14 96       	adiw	r26, 0x04	; 4
    1754:	2d 91       	ld	r18, X+
    1756:	3c 91       	ld	r19, X
    1758:	15 97       	sbiw	r26, 0x05	; 5
    175a:	e9 01       	movw	r28, r18
    175c:	5b 83       	std	Y+3, r21	; 0x03
    175e:	4a 83       	std	Y+2, r20	; 0x02
    1760:	15 96       	adiw	r26, 0x05	; 5
    1762:	5c 93       	st	X, r21
    1764:	4e 93       	st	-X, r20
    1766:	14 97       	sbiw	r26, 0x04	; 4
    1768:	a6 89       	ldd	r26, Z+22	; 0x16
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	9d 01       	movw	r18, r26
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	a2 0f       	add	r26, r18
    177c:	b3 1f       	adc	r27, r19
    177e:	ad 54       	subi	r26, 0x4D	; 77
    1780:	bd 4e       	sbci	r27, 0xED	; 237
    1782:	b3 87       	std	Z+11, r27	; 0x0b
    1784:	a2 87       	std	Z+10, r26	; 0x0a
    1786:	9c 91       	ld	r25, X
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	9c 93       	st	X, r25
    178c:	26 89       	ldd	r18, Z+22	; 0x16
    178e:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1792:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1796:	96 89       	ldd	r25, Z+22	; 0x16
    1798:	29 17       	cp	r18, r25
    179a:	08 f0       	brcs	.+2      	; 0x179e <xTaskIncrementTick+0x1d8>
    179c:	49 cf       	rjmp	.-366    	; 0x1630 <xTaskIncrementTick+0x6a>
    179e:	4b cf       	rjmp	.-362    	; 0x1636 <xTaskIncrementTick+0x70>
    17a0:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    17a4:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    17a8:	26 89       	ldd	r18, Z+22	; 0x16
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ee 0f       	add	r30, r30
    17b4:	ff 1f       	adc	r31, r31
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	2e 0f       	add	r18, r30
    17bc:	3f 1f       	adc	r19, r31
    17be:	f9 01       	movw	r30, r18
    17c0:	ed 54       	subi	r30, 0x4D	; 77
    17c2:	fd 4e       	sbci	r31, 0xED	; 237
    17c4:	90 81       	ld	r25, Z
    17c6:	92 30       	cpi	r25, 0x02	; 2
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <xTaskIncrementTick+0x206>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <xYieldPending>
    17d0:	91 11       	cpse	r25, r1
    17d2:	0c c0       	rjmp	.+24     	; 0x17ec <xTaskIncrementTick+0x226>
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <xTaskIncrementTick+0x228>
    17d6:	80 91 7a 12 	lds	r24, 0x127A	; 0x80127a <xPendedTicks>
    17da:	90 91 7b 12 	lds	r25, 0x127B	; 0x80127b <xPendedTicks+0x1>
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	90 93 7b 12 	sts	0x127B, r25	; 0x80127b <xPendedTicks+0x1>
    17e4:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <xPendedTicks>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <xTaskIncrementTick+0x228>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <xTaskResumeAll>:
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	0f 92       	push	r0
    1802:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	80 93 72 12 	sts	0x1272, r24	; 0x801272 <uxSchedulerSuspended>
    180c:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    1810:	81 11       	cpse	r24, r1
    1812:	bd c0       	rjmp	.+378    	; 0x198e <xTaskResumeAll+0x196>
    1814:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    1818:	81 11       	cpse	r24, r1
    181a:	96 c0       	rjmp	.+300    	; 0x1948 <xTaskResumeAll+0x150>
    181c:	bb c0       	rjmp	.+374    	; 0x1994 <xTaskResumeAll+0x19c>
    181e:	e0 91 99 12 	lds	r30, 0x1299	; 0x801299 <xPendingReadyList+0x5>
    1822:	f0 91 9a 12 	lds	r31, 0x129A	; 0x80129a <xPendingReadyList+0x6>
    1826:	06 80       	ldd	r0, Z+6	; 0x06
    1828:	f7 81       	ldd	r31, Z+7	; 0x07
    182a:	e0 2d       	mov	r30, r0
    182c:	a4 89       	ldd	r26, Z+20	; 0x14
    182e:	b5 89       	ldd	r27, Z+21	; 0x15
    1830:	c6 85       	ldd	r28, Z+14	; 0x0e
    1832:	d7 85       	ldd	r29, Z+15	; 0x0f
    1834:	80 89       	ldd	r24, Z+16	; 0x10
    1836:	91 89       	ldd	r25, Z+17	; 0x11
    1838:	9d 83       	std	Y+5, r25	; 0x05
    183a:	8c 83       	std	Y+4, r24	; 0x04
    183c:	c0 89       	ldd	r28, Z+16	; 0x10
    183e:	d1 89       	ldd	r29, Z+17	; 0x11
    1840:	86 85       	ldd	r24, Z+14	; 0x0e
    1842:	97 85       	ldd	r25, Z+15	; 0x0f
    1844:	9b 83       	std	Y+3, r25	; 0x03
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	11 96       	adiw	r26, 0x01	; 1
    184a:	2d 91       	ld	r18, X+
    184c:	3c 91       	ld	r19, X
    184e:	12 97       	sbiw	r26, 0x02	; 2
    1850:	cf 01       	movw	r24, r30
    1852:	0c 96       	adiw	r24, 0x0c	; 12
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	31 f4       	brne	.+12     	; 0x1866 <xTaskResumeAll+0x6e>
    185a:	80 89       	ldd	r24, Z+16	; 0x10
    185c:	91 89       	ldd	r25, Z+17	; 0x11
    185e:	12 96       	adiw	r26, 0x02	; 2
    1860:	9c 93       	st	X, r25
    1862:	8e 93       	st	-X, r24
    1864:	11 97       	sbiw	r26, 0x01	; 1
    1866:	15 8a       	std	Z+21, r1	; 0x15
    1868:	14 8a       	std	Z+20, r1	; 0x14
    186a:	8c 91       	ld	r24, X
    186c:	81 50       	subi	r24, 0x01	; 1
    186e:	8c 93       	st	X, r24
    1870:	a2 85       	ldd	r26, Z+10	; 0x0a
    1872:	b3 85       	ldd	r27, Z+11	; 0x0b
    1874:	c4 81       	ldd	r28, Z+4	; 0x04
    1876:	d5 81       	ldd	r29, Z+5	; 0x05
    1878:	86 81       	ldd	r24, Z+6	; 0x06
    187a:	97 81       	ldd	r25, Z+7	; 0x07
    187c:	9d 83       	std	Y+5, r25	; 0x05
    187e:	8c 83       	std	Y+4, r24	; 0x04
    1880:	c6 81       	ldd	r28, Z+6	; 0x06
    1882:	d7 81       	ldd	r29, Z+7	; 0x07
    1884:	84 81       	ldd	r24, Z+4	; 0x04
    1886:	95 81       	ldd	r25, Z+5	; 0x05
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	11 96       	adiw	r26, 0x01	; 1
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	12 97       	sbiw	r26, 0x02	; 2
    1894:	9f 01       	movw	r18, r30
    1896:	2e 5f       	subi	r18, 0xFE	; 254
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	31 f4       	brne	.+12     	; 0x18ac <xTaskResumeAll+0xb4>
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	97 81       	ldd	r25, Z+7	; 0x07
    18a4:	12 96       	adiw	r26, 0x02	; 2
    18a6:	9c 93       	st	X, r25
    18a8:	8e 93       	st	-X, r24
    18aa:	11 97       	sbiw	r26, 0x01	; 1
    18ac:	13 86       	std	Z+11, r1	; 0x0b
    18ae:	12 86       	std	Z+10, r1	; 0x0a
    18b0:	8c 91       	ld	r24, X
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	8c 93       	st	X, r24
    18b6:	86 89       	ldd	r24, Z+22	; 0x16
    18b8:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    18bc:	98 17       	cp	r25, r24
    18be:	10 f4       	brcc	.+4      	; 0x18c4 <xTaskResumeAll+0xcc>
    18c0:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	dc 01       	movw	r26, r24
    18c8:	aa 0f       	add	r26, r26
    18ca:	bb 1f       	adc	r27, r27
    18cc:	aa 0f       	add	r26, r26
    18ce:	bb 1f       	adc	r27, r27
    18d0:	aa 0f       	add	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	8a 0f       	add	r24, r26
    18d6:	9b 1f       	adc	r25, r27
    18d8:	dc 01       	movw	r26, r24
    18da:	ad 54       	subi	r26, 0x4D	; 77
    18dc:	bd 4e       	sbci	r27, 0xED	; 237
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	0d 90       	ld	r0, X+
    18e2:	bc 91       	ld	r27, X
    18e4:	a0 2d       	mov	r26, r0
    18e6:	b5 83       	std	Z+5, r27	; 0x05
    18e8:	a4 83       	std	Z+4, r26	; 0x04
    18ea:	14 96       	adiw	r26, 0x04	; 4
    18ec:	8d 91       	ld	r24, X+
    18ee:	9c 91       	ld	r25, X
    18f0:	15 97       	sbiw	r26, 0x05	; 5
    18f2:	97 83       	std	Z+7, r25	; 0x07
    18f4:	86 83       	std	Z+6, r24	; 0x06
    18f6:	14 96       	adiw	r26, 0x04	; 4
    18f8:	cd 91       	ld	r28, X+
    18fa:	dc 91       	ld	r29, X
    18fc:	15 97       	sbiw	r26, 0x05	; 5
    18fe:	3b 83       	std	Y+3, r19	; 0x03
    1900:	2a 83       	std	Y+2, r18	; 0x02
    1902:	15 96       	adiw	r26, 0x05	; 5
    1904:	3c 93       	st	X, r19
    1906:	2e 93       	st	-X, r18
    1908:	14 97       	sbiw	r26, 0x04	; 4
    190a:	a6 89       	ldd	r26, Z+22	; 0x16
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	cd 01       	movw	r24, r26
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	a8 0f       	add	r26, r24
    191e:	b9 1f       	adc	r27, r25
    1920:	ad 54       	subi	r26, 0x4D	; 77
    1922:	bd 4e       	sbci	r27, 0xED	; 237
    1924:	b3 87       	std	Z+11, r27	; 0x0b
    1926:	a2 87       	std	Z+10, r26	; 0x0a
    1928:	8c 91       	ld	r24, X
    192a:	8f 5f       	subi	r24, 0xFF	; 255
    192c:	8c 93       	st	X, r24
    192e:	96 89       	ldd	r25, Z+22	; 0x16
    1930:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1934:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1938:	56 96       	adiw	r26, 0x16	; 22
    193a:	8c 91       	ld	r24, X
    193c:	98 17       	cp	r25, r24
    193e:	30 f0       	brcs	.+12     	; 0x194c <xTaskResumeAll+0x154>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    1946:	02 c0       	rjmp	.+4      	; 0x194c <xTaskResumeAll+0x154>
    1948:	e0 e0       	ldi	r30, 0x00	; 0
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 91 94 12 	lds	r24, 0x1294	; 0x801294 <xPendingReadyList>
    1950:	81 11       	cpse	r24, r1
    1952:	65 cf       	rjmp	.-310    	; 0x181e <xTaskResumeAll+0x26>
    1954:	ef 2b       	or	r30, r31
    1956:	09 f0       	breq	.+2      	; 0x195a <xTaskResumeAll+0x162>
    1958:	ca da       	rcall	.-2668   	; 0xeee <prvResetNextTaskUnblockTime>
    195a:	c0 91 7a 12 	lds	r28, 0x127A	; 0x80127a <xPendedTicks>
    195e:	d0 91 7b 12 	lds	r29, 0x127B	; 0x80127b <xPendedTicks+0x1>
    1962:	20 97       	sbiw	r28, 0x00	; 0
    1964:	61 f0       	breq	.+24     	; 0x197e <xTaskResumeAll+0x186>
    1966:	2f de       	rcall	.-930    	; 0x15c6 <xTaskIncrementTick>
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <xTaskResumeAll+0x17a>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    1972:	21 97       	sbiw	r28, 0x01	; 1
    1974:	c1 f7       	brne	.-16     	; 0x1966 <xTaskResumeAll+0x16e>
    1976:	10 92 7b 12 	sts	0x127B, r1	; 0x80127b <xPendedTicks+0x1>
    197a:	10 92 7a 12 	sts	0x127A, r1	; 0x80127a <xPendedTicks>
    197e:	80 91 79 12 	lds	r24, 0x1279	; 0x801279 <xYieldPending>
    1982:	88 23       	and	r24, r24
    1984:	31 f0       	breq	.+12     	; 0x1992 <xTaskResumeAll+0x19a>
    1986:	0e 94 31 03 	call	0x662	; 0x662 <vPortYield>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <xTaskResumeAll+0x19c>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <xTaskResumeAll+0x19c>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <vTaskDelay>:
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
    19a4:	89 2b       	or	r24, r25
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <vTaskDelay+0x16>
    19a8:	fe dd       	rcall	.-1028   	; 0x15a6 <vTaskSuspendAll>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	ce 01       	movw	r24, r28
    19ae:	0b dc       	rcall	.-2026   	; 0x11c6 <prvAddCurrentTaskToDelayedList>
    19b0:	23 df       	rcall	.-442    	; 0x17f8 <xTaskResumeAll>
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <vTaskDelay+0x18>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	81 11       	cpse	r24, r1
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vTaskDelay+0x20>
    19ba:	0e 94 31 03 	call	0x662	; 0x662 <vPortYield>
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <vTaskSwitchContext>:
    19c4:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    19c8:	88 23       	and	r24, r24
    19ca:	21 f0       	breq	.+8      	; 0x19d4 <vTaskSwitchContext+0x10>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    19d2:	08 95       	ret
    19d4:	10 92 79 12 	sts	0x1279, r1	; 0x801279 <xYieldPending>
    19d8:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    19dc:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    19e0:	20 81       	ld	r18, Z
    19e2:	31 81       	ldd	r19, Z+1	; 0x01
    19e4:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    19e8:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    19ec:	87 89       	ldd	r24, Z+23	; 0x17
    19ee:	90 8d       	ldd	r25, Z+24	; 0x18
    19f0:	82 17       	cp	r24, r18
    19f2:	93 07       	cpc	r25, r19
    19f4:	58 f0       	brcs	.+22     	; 0x1a0c <vTaskSwitchContext+0x48>
    19f6:	60 91 d7 12 	lds	r22, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    19fa:	70 91 d8 12 	lds	r23, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    19fe:	67 5e       	subi	r22, 0xE7	; 231
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1a06:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1a0a:	f8 d5       	rcall	.+3056   	; 0x25fc <vApplicationStackOverflowHook>
    1a0c:	20 91 7d 12 	lds	r18, 0x127D	; 0x80127d <uxTopReadyPriority>
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <vTaskSwitchContext+0x50>
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	82 2f       	mov	r24, r18
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	e8 0f       	add	r30, r24
    1a28:	f9 1f       	adc	r31, r25
    1a2a:	ed 54       	subi	r30, 0x4D	; 77
    1a2c:	fd 4e       	sbci	r31, 0xED	; 237
    1a2e:	30 81       	ld	r19, Z
    1a30:	33 23       	and	r19, r19
    1a32:	79 f3       	breq	.-34     	; 0x1a12 <vTaskSwitchContext+0x4e>
    1a34:	ac 01       	movw	r20, r24
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	44 0f       	add	r20, r20
    1a40:	55 1f       	adc	r21, r21
    1a42:	48 0f       	add	r20, r24
    1a44:	59 1f       	adc	r21, r25
    1a46:	df 01       	movw	r26, r30
    1a48:	01 80       	ldd	r0, Z+1	; 0x01
    1a4a:	f2 81       	ldd	r31, Z+2	; 0x02
    1a4c:	e0 2d       	mov	r30, r0
    1a4e:	02 80       	ldd	r0, Z+2	; 0x02
    1a50:	f3 81       	ldd	r31, Z+3	; 0x03
    1a52:	e0 2d       	mov	r30, r0
    1a54:	12 96       	adiw	r26, 0x02	; 2
    1a56:	fc 93       	st	X, r31
    1a58:	ee 93       	st	-X, r30
    1a5a:	11 97       	sbiw	r26, 0x01	; 1
    1a5c:	4a 54       	subi	r20, 0x4A	; 74
    1a5e:	5d 4e       	sbci	r21, 0xED	; 237
    1a60:	e4 17       	cp	r30, r20
    1a62:	f5 07       	cpc	r31, r21
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <vTaskSwitchContext+0xac>
    1a66:	42 81       	ldd	r20, Z+2	; 0x02
    1a68:	53 81       	ldd	r21, Z+3	; 0x03
    1a6a:	fd 01       	movw	r30, r26
    1a6c:	52 83       	std	Z+2, r21	; 0x02
    1a6e:	41 83       	std	Z+1, r20	; 0x01
    1a70:	fc 01       	movw	r30, r24
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	8e 0f       	add	r24, r30
    1a80:	9f 1f       	adc	r25, r31
    1a82:	fc 01       	movw	r30, r24
    1a84:	ed 54       	subi	r30, 0x4D	; 77
    1a86:	fd 4e       	sbci	r31, 0xED	; 237
    1a88:	01 80       	ldd	r0, Z+1	; 0x01
    1a8a:	f2 81       	ldd	r31, Z+2	; 0x02
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	86 81       	ldd	r24, Z+6	; 0x06
    1a90:	97 81       	ldd	r25, Z+7	; 0x07
    1a92:	90 93 d8 12 	sts	0x12D8, r25	; 0x8012d8 <pxCurrentTCB+0x1>
    1a96:	80 93 d7 12 	sts	0x12D7, r24	; 0x8012d7 <pxCurrentTCB>
    1a9a:	20 93 7d 12 	sts	0x127D, r18	; 0x80127d <uxTopReadyPriority>
    1a9e:	08 95       	ret

00001aa0 <vTaskSuspend>:
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	ec 01       	movw	r28, r24
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	0f 92       	push	r0
    1ab0:	89 2b       	or	r24, r25
    1ab2:	21 f4       	brne	.+8      	; 0x1abc <vTaskSuspend+0x1c>
    1ab4:	c0 91 d7 12 	lds	r28, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1ab8:	d0 91 d8 12 	lds	r29, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1abc:	8e 01       	movw	r16, r28
    1abe:	0e 5f       	subi	r16, 0xFE	; 254
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
    1ac8:	8c 89       	ldd	r24, Y+20	; 0x14
    1aca:	9d 89       	ldd	r25, Y+21	; 0x15
    1acc:	89 2b       	or	r24, r25
    1ace:	21 f0       	breq	.+8      	; 0x1ad8 <vTaskSuspend+0x38>
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	0c 96       	adiw	r24, 0x0c	; 12
    1ad4:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
    1ad8:	b8 01       	movw	r22, r16
    1ada:	81 e8       	ldi	r24, 0x81	; 129
    1adc:	92 e1       	ldi	r25, 0x12	; 18
    1ade:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vListInsertEnd>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <vTaskSuspend+0x64>
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	08 2e       	mov	r0, r24
    1aea:	00 0c       	add	r0, r0
    1aec:	33 0b       	sbc	r19, r19
    1aee:	fe 01       	movw	r30, r28
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	97 a1       	ldd	r25, Z+39	; 0x27
    1af6:	91 30       	cpi	r25, 0x01	; 1
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <vTaskSuspend+0x62>
    1afa:	fe 01       	movw	r30, r28
    1afc:	e2 0f       	add	r30, r18
    1afe:	f3 1f       	adc	r31, r19
    1b00:	17 a2       	std	Z+39, r1	; 0x27
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	18 16       	cp	r1, r24
    1b06:	7c f7       	brge	.-34     	; 0x1ae6 <vTaskSuspend+0x46>
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    1b10:	88 23       	and	r24, r24
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <vTaskSuspend+0x80>
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	0f 92       	push	r0
    1b1a:	e9 d9       	rcall	.-3118   	; 0xeee <prvResetNextTaskUnblockTime>
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1b24:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1b28:	c8 17       	cp	r28, r24
    1b2a:	d9 07       	cpc	r29, r25
    1b2c:	99 f4       	brne	.+38     	; 0x1b54 <vTaskSuspend+0xb4>
    1b2e:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    1b32:	88 23       	and	r24, r24
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <vTaskSuspend+0x9c>
    1b36:	0e 94 31 03 	call	0x662	; 0x662 <vPortYield>
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <vTaskSuspend+0xb4>
    1b3c:	90 91 81 12 	lds	r25, 0x1281	; 0x801281 <xSuspendedTaskList>
    1b40:	80 91 80 12 	lds	r24, 0x1280	; 0x801280 <uxCurrentNumberOfTasks>
    1b44:	98 13       	cpse	r25, r24
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <vTaskSuspend+0xb2>
    1b48:	10 92 d8 12 	sts	0x12D8, r1	; 0x8012d8 <pxCurrentTCB+0x1>
    1b4c:	10 92 d7 12 	sts	0x12D7, r1	; 0x8012d7 <pxCurrentTCB>
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vTaskSuspend+0xb4>
    1b52:	38 df       	rcall	.-400    	; 0x19c4 <vTaskSwitchContext>
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	08 95       	ret

00001b5e <vTaskPlaceOnEventList>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	eb 01       	movw	r28, r22
    1b64:	60 91 d7 12 	lds	r22, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1b68:	70 91 d8 12 	lds	r23, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1b6c:	64 5f       	subi	r22, 0xF4	; 244
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	0e 94 84 02 	call	0x508	; 0x508 <vListInsert>
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	ce 01       	movw	r24, r28
    1b78:	26 db       	rcall	.-2484   	; 0x11c6 <prvAddCurrentTaskToDelayedList>
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	08 95       	ret

00001b80 <vTaskPlaceOnEventListRestricted>:
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	fc 01       	movw	r30, r24
    1b8a:	8b 01       	movw	r16, r22
    1b8c:	a1 81       	ldd	r26, Z+1	; 0x01
    1b8e:	b2 81       	ldd	r27, Z+2	; 0x02
    1b90:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1b94:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1b98:	ec 01       	movw	r28, r24
    1b9a:	bf 87       	std	Y+15, r27	; 0x0f
    1b9c:	ae 87       	std	Y+14, r26	; 0x0e
    1b9e:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1ba2:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1ba6:	14 96       	adiw	r26, 0x04	; 4
    1ba8:	2d 91       	ld	r18, X+
    1baa:	3c 91       	ld	r19, X
    1bac:	15 97       	sbiw	r26, 0x05	; 5
    1bae:	ec 01       	movw	r28, r24
    1bb0:	39 8b       	std	Y+17, r19	; 0x11
    1bb2:	28 8b       	std	Y+16, r18	; 0x10
    1bb4:	14 96       	adiw	r26, 0x04	; 4
    1bb6:	8d 91       	ld	r24, X+
    1bb8:	9c 91       	ld	r25, X
    1bba:	15 97       	sbiw	r26, 0x05	; 5
    1bbc:	20 91 d7 12 	lds	r18, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1bc0:	30 91 d8 12 	lds	r19, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1bc4:	24 5f       	subi	r18, 0xF4	; 244
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	ec 01       	movw	r28, r24
    1bca:	3b 83       	std	Y+3, r19	; 0x03
    1bcc:	2a 83       	std	Y+2, r18	; 0x02
    1bce:	20 91 d7 12 	lds	r18, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1bd2:	30 91 d8 12 	lds	r19, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1bd6:	24 5f       	subi	r18, 0xF4	; 244
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	15 96       	adiw	r26, 0x05	; 5
    1bdc:	3c 93       	st	X, r19
    1bde:	2e 93       	st	-X, r18
    1be0:	14 97       	sbiw	r26, 0x04	; 4
    1be2:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1be6:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1bea:	55 96       	adiw	r26, 0x15	; 21
    1bec:	fc 93       	st	X, r31
    1bee:	ee 93       	st	-X, r30
    1bf0:	54 97       	sbiw	r26, 0x14	; 20
    1bf2:	90 81       	ld	r25, Z
    1bf4:	9f 5f       	subi	r25, 0xFF	; 255
    1bf6:	90 83       	st	Z, r25
    1bf8:	44 23       	and	r20, r20
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <vTaskPlaceOnEventListRestricted+0x80>
    1bfc:	0f ef       	ldi	r16, 0xFF	; 255
    1bfe:	1f ef       	ldi	r17, 0xFF	; 255
    1c00:	64 2f       	mov	r22, r20
    1c02:	c8 01       	movw	r24, r16
    1c04:	e0 da       	rcall	.-2624   	; 0x11c6 <prvAddCurrentTaskToDelayedList>
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	08 95       	ret

00001c10 <xTaskRemoveFromEventList>:
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	dc 01       	movw	r26, r24
    1c16:	15 96       	adiw	r26, 0x05	; 5
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	16 97       	sbiw	r26, 0x06	; 6
    1c1e:	06 80       	ldd	r0, Z+6	; 0x06
    1c20:	f7 81       	ldd	r31, Z+7	; 0x07
    1c22:	e0 2d       	mov	r30, r0
    1c24:	a4 89       	ldd	r26, Z+20	; 0x14
    1c26:	b5 89       	ldd	r27, Z+21	; 0x15
    1c28:	c6 85       	ldd	r28, Z+14	; 0x0e
    1c2a:	d7 85       	ldd	r29, Z+15	; 0x0f
    1c2c:	80 89       	ldd	r24, Z+16	; 0x10
    1c2e:	91 89       	ldd	r25, Z+17	; 0x11
    1c30:	9d 83       	std	Y+5, r25	; 0x05
    1c32:	8c 83       	std	Y+4, r24	; 0x04
    1c34:	c0 89       	ldd	r28, Z+16	; 0x10
    1c36:	d1 89       	ldd	r29, Z+17	; 0x11
    1c38:	86 85       	ldd	r24, Z+14	; 0x0e
    1c3a:	97 85       	ldd	r25, Z+15	; 0x0f
    1c3c:	9b 83       	std	Y+3, r25	; 0x03
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	8d 91       	ld	r24, X+
    1c44:	9c 91       	ld	r25, X
    1c46:	12 97       	sbiw	r26, 0x02	; 2
    1c48:	9f 01       	movw	r18, r30
    1c4a:	24 5f       	subi	r18, 0xF4	; 244
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	82 17       	cp	r24, r18
    1c50:	93 07       	cpc	r25, r19
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <xTaskRemoveFromEventList+0x50>
    1c54:	80 89       	ldd	r24, Z+16	; 0x10
    1c56:	91 89       	ldd	r25, Z+17	; 0x11
    1c58:	12 96       	adiw	r26, 0x02	; 2
    1c5a:	9c 93       	st	X, r25
    1c5c:	8e 93       	st	-X, r24
    1c5e:	11 97       	sbiw	r26, 0x01	; 1
    1c60:	15 8a       	std	Z+21, r1	; 0x15
    1c62:	14 8a       	std	Z+20, r1	; 0x14
    1c64:	8c 91       	ld	r24, X
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
    1c6a:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	60 c0       	rjmp	.+192    	; 0x1d32 <xTaskRemoveFromEventList+0x122>
    1c72:	a2 85       	ldd	r26, Z+10	; 0x0a
    1c74:	b3 85       	ldd	r27, Z+11	; 0x0b
    1c76:	c4 81       	ldd	r28, Z+4	; 0x04
    1c78:	d5 81       	ldd	r29, Z+5	; 0x05
    1c7a:	86 81       	ldd	r24, Z+6	; 0x06
    1c7c:	97 81       	ldd	r25, Z+7	; 0x07
    1c7e:	9d 83       	std	Y+5, r25	; 0x05
    1c80:	8c 83       	std	Y+4, r24	; 0x04
    1c82:	c6 81       	ldd	r28, Z+6	; 0x06
    1c84:	d7 81       	ldd	r29, Z+7	; 0x07
    1c86:	84 81       	ldd	r24, Z+4	; 0x04
    1c88:	95 81       	ldd	r25, Z+5	; 0x05
    1c8a:	9b 83       	std	Y+3, r25	; 0x03
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	11 96       	adiw	r26, 0x01	; 1
    1c90:	8d 91       	ld	r24, X+
    1c92:	9c 91       	ld	r25, X
    1c94:	12 97       	sbiw	r26, 0x02	; 2
    1c96:	9f 01       	movw	r18, r30
    1c98:	2e 5f       	subi	r18, 0xFE	; 254
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	82 17       	cp	r24, r18
    1c9e:	93 07       	cpc	r25, r19
    1ca0:	31 f4       	brne	.+12     	; 0x1cae <xTaskRemoveFromEventList+0x9e>
    1ca2:	86 81       	ldd	r24, Z+6	; 0x06
    1ca4:	97 81       	ldd	r25, Z+7	; 0x07
    1ca6:	12 96       	adiw	r26, 0x02	; 2
    1ca8:	9c 93       	st	X, r25
    1caa:	8e 93       	st	-X, r24
    1cac:	11 97       	sbiw	r26, 0x01	; 1
    1cae:	13 86       	std	Z+11, r1	; 0x0b
    1cb0:	12 86       	std	Z+10, r1	; 0x0a
    1cb2:	8c 91       	ld	r24, X
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	8c 93       	st	X, r24
    1cb8:	86 89       	ldd	r24, Z+22	; 0x16
    1cba:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    1cbe:	98 17       	cp	r25, r24
    1cc0:	10 f4       	brcc	.+4      	; 0x1cc6 <xTaskRemoveFromEventList+0xb6>
    1cc2:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	dc 01       	movw	r26, r24
    1cca:	aa 0f       	add	r26, r26
    1ccc:	bb 1f       	adc	r27, r27
    1cce:	aa 0f       	add	r26, r26
    1cd0:	bb 1f       	adc	r27, r27
    1cd2:	aa 0f       	add	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	8a 0f       	add	r24, r26
    1cd8:	9b 1f       	adc	r25, r27
    1cda:	dc 01       	movw	r26, r24
    1cdc:	ad 54       	subi	r26, 0x4D	; 77
    1cde:	bd 4e       	sbci	r27, 0xED	; 237
    1ce0:	11 96       	adiw	r26, 0x01	; 1
    1ce2:	0d 90       	ld	r0, X+
    1ce4:	bc 91       	ld	r27, X
    1ce6:	a0 2d       	mov	r26, r0
    1ce8:	b5 83       	std	Z+5, r27	; 0x05
    1cea:	a4 83       	std	Z+4, r26	; 0x04
    1cec:	14 96       	adiw	r26, 0x04	; 4
    1cee:	8d 91       	ld	r24, X+
    1cf0:	9c 91       	ld	r25, X
    1cf2:	15 97       	sbiw	r26, 0x05	; 5
    1cf4:	97 83       	std	Z+7, r25	; 0x07
    1cf6:	86 83       	std	Z+6, r24	; 0x06
    1cf8:	14 96       	adiw	r26, 0x04	; 4
    1cfa:	cd 91       	ld	r28, X+
    1cfc:	dc 91       	ld	r29, X
    1cfe:	15 97       	sbiw	r26, 0x05	; 5
    1d00:	3b 83       	std	Y+3, r19	; 0x03
    1d02:	2a 83       	std	Y+2, r18	; 0x02
    1d04:	15 96       	adiw	r26, 0x05	; 5
    1d06:	3c 93       	st	X, r19
    1d08:	2e 93       	st	-X, r18
    1d0a:	14 97       	sbiw	r26, 0x04	; 4
    1d0c:	a6 89       	ldd	r26, Z+22	; 0x16
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	cd 01       	movw	r24, r26
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	a8 0f       	add	r26, r24
    1d20:	b9 1f       	adc	r27, r25
    1d22:	ad 54       	subi	r26, 0x4D	; 77
    1d24:	bd 4e       	sbci	r27, 0xED	; 237
    1d26:	b3 87       	std	Z+11, r27	; 0x0b
    1d28:	a2 87       	std	Z+10, r26	; 0x0a
    1d2a:	8c 91       	ld	r24, X
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	8c 93       	st	X, r24
    1d30:	1c c0       	rjmp	.+56     	; 0x1d6a <xTaskRemoveFromEventList+0x15a>
    1d32:	44 e9       	ldi	r20, 0x94	; 148
    1d34:	52 e1       	ldi	r21, 0x12	; 18
    1d36:	da 01       	movw	r26, r20
    1d38:	11 96       	adiw	r26, 0x01	; 1
    1d3a:	cd 91       	ld	r28, X+
    1d3c:	dc 91       	ld	r29, X
    1d3e:	12 97       	sbiw	r26, 0x02	; 2
    1d40:	d7 87       	std	Z+15, r29	; 0x0f
    1d42:	c6 87       	std	Z+14, r28	; 0x0e
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	91 8b       	std	Z+17, r25	; 0x11
    1d4a:	80 8b       	std	Z+16, r24	; 0x10
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	dc 01       	movw	r26, r24
    1d52:	13 96       	adiw	r26, 0x03	; 3
    1d54:	3c 93       	st	X, r19
    1d56:	2e 93       	st	-X, r18
    1d58:	12 97       	sbiw	r26, 0x02	; 2
    1d5a:	3d 83       	std	Y+5, r19	; 0x05
    1d5c:	2c 83       	std	Y+4, r18	; 0x04
    1d5e:	55 8b       	std	Z+21, r21	; 0x15
    1d60:	44 8b       	std	Z+20, r20	; 0x14
    1d62:	da 01       	movw	r26, r20
    1d64:	8c 91       	ld	r24, X
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	8c 93       	st	X, r24
    1d6a:	96 89       	ldd	r25, Z+22	; 0x16
    1d6c:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1d70:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1d74:	86 89       	ldd	r24, Z+22	; 0x16
    1d76:	89 17       	cp	r24, r25
    1d78:	20 f4       	brcc	.+8      	; 0x1d82 <xTaskRemoveFromEventList+0x172>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <xTaskRemoveFromEventList+0x174>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	08 95       	ret

00001d8a <vTaskInternalSetTimeOutState>:
    1d8a:	20 91 78 12 	lds	r18, 0x1278	; 0x801278 <xNumOfOverflows>
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 83       	st	Z, r18
    1d92:	20 91 7e 12 	lds	r18, 0x127E	; 0x80127e <xTickCount>
    1d96:	30 91 7f 12 	lds	r19, 0x127F	; 0x80127f <xTickCount+0x1>
    1d9a:	32 83       	std	Z+2, r19	; 0x02
    1d9c:	21 83       	std	Z+1, r18	; 0x01
    1d9e:	08 95       	ret

00001da0 <xTaskCheckForTimeOut>:
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	0f 92       	push	r0
    1dac:	e0 91 7e 12 	lds	r30, 0x127E	; 0x80127e <xTickCount>
    1db0:	f0 91 7f 12 	lds	r31, 0x127F	; 0x80127f <xTickCount+0x1>
    1db4:	dc 01       	movw	r26, r24
    1db6:	11 96       	adiw	r26, 0x01	; 1
    1db8:	4d 91       	ld	r20, X+
    1dba:	5c 91       	ld	r21, X
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
    1dbe:	df 01       	movw	r26, r30
    1dc0:	a4 1b       	sub	r26, r20
    1dc2:	b5 0b       	sbc	r27, r21
    1dc4:	eb 01       	movw	r28, r22
    1dc6:	28 81       	ld	r18, Y
    1dc8:	39 81       	ldd	r19, Y+1	; 0x01
    1dca:	2f 3f       	cpi	r18, 0xFF	; 255
    1dcc:	df ef       	ldi	r29, 0xFF	; 255
    1dce:	3d 07       	cpc	r19, r29
    1dd0:	f1 f0       	breq	.+60     	; 0x1e0e <xTaskCheckForTimeOut+0x6e>
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	18 81       	ld	r17, Y
    1dd6:	c0 91 78 12 	lds	r28, 0x1278	; 0x801278 <xNumOfOverflows>
    1dda:	1c 17       	cp	r17, r28
    1ddc:	41 f0       	breq	.+16     	; 0x1dee <xTaskCheckForTimeOut+0x4e>
    1dde:	e4 17       	cp	r30, r20
    1de0:	f5 07       	cpc	r31, r21
    1de2:	28 f0       	brcs	.+10     	; 0x1dee <xTaskCheckForTimeOut+0x4e>
    1de4:	fb 01       	movw	r30, r22
    1de6:	11 82       	std	Z+1, r1	; 0x01
    1de8:	10 82       	st	Z, r1
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	11 c0       	rjmp	.+34     	; 0x1e10 <xTaskCheckForTimeOut+0x70>
    1dee:	a2 17       	cp	r26, r18
    1df0:	b3 07       	cpc	r27, r19
    1df2:	40 f4       	brcc	.+16     	; 0x1e04 <xTaskCheckForTimeOut+0x64>
    1df4:	fb 01       	movw	r30, r22
    1df6:	2a 1b       	sub	r18, r26
    1df8:	3b 0b       	sbc	r19, r27
    1dfa:	31 83       	std	Z+1, r19	; 0x01
    1dfc:	20 83       	st	Z, r18
    1dfe:	c5 df       	rcall	.-118    	; 0x1d8a <vTaskInternalSetTimeOutState>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	06 c0       	rjmp	.+12     	; 0x1e10 <xTaskCheckForTimeOut+0x70>
    1e04:	db 01       	movw	r26, r22
    1e06:	1d 92       	st	X+, r1
    1e08:	1c 92       	st	X, r1
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <xTaskCheckForTimeOut+0x70>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	08 95       	ret

00001e1c <vTaskMissedYield>:
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 79 12 	sts	0x1279, r24	; 0x801279 <xYieldPending>
    1e22:	08 95       	ret

00001e24 <xTaskGetSchedulerState>:
    1e24:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xSchedulerRunning>
    1e28:	88 23       	and	r24, r24
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <xTaskGetSchedulerState+0x14>
    1e2c:	80 91 72 12 	lds	r24, 0x1272	; 0x801272 <uxSchedulerSuspended>
    1e30:	81 11       	cpse	r24, r1
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <xTaskGetSchedulerState+0x18>
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	08 95       	ret
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	08 95       	ret
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	08 95       	ret

00001e40 <xTaskPriorityInherit>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	fc 01       	movw	r30, r24
    1e4a:	89 2b       	or	r24, r25
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <xTaskPriorityInherit+0x10>
    1e4e:	84 c0       	rjmp	.+264    	; 0x1f58 <xTaskPriorityInherit+0x118>
    1e50:	26 89       	ldd	r18, Z+22	; 0x16
    1e52:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1e56:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1e5a:	56 96       	adiw	r26, 0x16	; 22
    1e5c:	8c 91       	ld	r24, X
    1e5e:	28 17       	cp	r18, r24
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <xTaskPriorityInherit+0x24>
    1e62:	70 c0       	rjmp	.+224    	; 0x1f44 <xTaskPriorityInherit+0x104>
    1e64:	84 85       	ldd	r24, Z+12	; 0x0c
    1e66:	95 85       	ldd	r25, Z+13	; 0x0d
    1e68:	99 23       	and	r25, r25
    1e6a:	64 f0       	brlt	.+24     	; 0x1e84 <xTaskPriorityInherit+0x44>
    1e6c:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1e70:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1e74:	56 96       	adiw	r26, 0x16	; 22
    1e76:	3c 91       	ld	r19, X
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	83 1b       	sub	r24, r19
    1e7e:	91 09       	sbc	r25, r1
    1e80:	95 87       	std	Z+13, r25	; 0x0d
    1e82:	84 87       	std	Z+12, r24	; 0x0c
    1e84:	82 85       	ldd	r24, Z+10	; 0x0a
    1e86:	93 85       	ldd	r25, Z+11	; 0x0b
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	a9 01       	movw	r20, r18
    1e8c:	44 0f       	add	r20, r20
    1e8e:	55 1f       	adc	r21, r21
    1e90:	44 0f       	add	r20, r20
    1e92:	55 1f       	adc	r21, r21
    1e94:	44 0f       	add	r20, r20
    1e96:	55 1f       	adc	r21, r21
    1e98:	24 0f       	add	r18, r20
    1e9a:	35 1f       	adc	r19, r21
    1e9c:	2d 54       	subi	r18, 0x4D	; 77
    1e9e:	3d 4e       	sbci	r19, 0xED	; 237
    1ea0:	82 17       	cp	r24, r18
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <xTaskPriorityInherit+0x68>
    1ea6:	45 c0       	rjmp	.+138    	; 0x1f32 <xTaskPriorityInherit+0xf2>
    1ea8:	ef 01       	movw	r28, r30
    1eaa:	8f 01       	movw	r16, r30
    1eac:	0e 5f       	subi	r16, 0xFE	; 254
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
    1eb6:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1eba:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1ebe:	86 89       	ldd	r24, Z+22	; 0x16
    1ec0:	8e 8b       	std	Y+22, r24	; 0x16
    1ec2:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    1ec6:	98 17       	cp	r25, r24
    1ec8:	10 f4       	brcc	.+4      	; 0x1ece <xTaskPriorityInherit+0x8e>
    1eca:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	8e 0f       	add	r24, r30
    1ee0:	9f 1f       	adc	r25, r31
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	ed 54       	subi	r30, 0x4D	; 77
    1ee6:	fd 4e       	sbci	r31, 0xED	; 237
    1ee8:	01 80       	ldd	r0, Z+1	; 0x01
    1eea:	f2 81       	ldd	r31, Z+2	; 0x02
    1eec:	e0 2d       	mov	r30, r0
    1eee:	fd 83       	std	Y+5, r31	; 0x05
    1ef0:	ec 83       	std	Y+4, r30	; 0x04
    1ef2:	84 81       	ldd	r24, Z+4	; 0x04
    1ef4:	95 81       	ldd	r25, Z+5	; 0x05
    1ef6:	9f 83       	std	Y+7, r25	; 0x07
    1ef8:	8e 83       	std	Y+6, r24	; 0x06
    1efa:	a4 81       	ldd	r26, Z+4	; 0x04
    1efc:	b5 81       	ldd	r27, Z+5	; 0x05
    1efe:	13 96       	adiw	r26, 0x03	; 3
    1f00:	1c 93       	st	X, r17
    1f02:	0e 93       	st	-X, r16
    1f04:	12 97       	sbiw	r26, 0x02	; 2
    1f06:	15 83       	std	Z+5, r17	; 0x05
    1f08:	04 83       	std	Z+4, r16	; 0x04
    1f0a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e8 0f       	add	r30, r24
    1f1e:	f9 1f       	adc	r31, r25
    1f20:	ed 54       	subi	r30, 0x4D	; 77
    1f22:	fd 4e       	sbci	r31, 0xED	; 237
    1f24:	fb 87       	std	Y+11, r31	; 0x0b
    1f26:	ea 87       	std	Y+10, r30	; 0x0a
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 83       	st	Z, r24
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	16 c0       	rjmp	.+44     	; 0x1f5e <xTaskPriorityInherit+0x11e>
    1f32:	a0 91 d7 12 	lds	r26, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1f36:	b0 91 d8 12 	lds	r27, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1f3a:	56 96       	adiw	r26, 0x16	; 22
    1f3c:	8c 91       	ld	r24, X
    1f3e:	86 8b       	std	Z+22, r24	; 0x16
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	0d c0       	rjmp	.+26     	; 0x1f5e <xTaskPriorityInherit+0x11e>
    1f44:	91 a1       	ldd	r25, Z+33	; 0x21
    1f46:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    1f4a:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    1f4e:	86 89       	ldd	r24, Z+22	; 0x16
    1f50:	98 17       	cp	r25, r24
    1f52:	20 f0       	brcs	.+8      	; 0x1f5c <xTaskPriorityInherit+0x11c>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	03 c0       	rjmp	.+6      	; 0x1f5e <xTaskPriorityInherit+0x11e>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <xTaskPriorityInherit+0x11e>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <xTaskPriorityDisinherit>:
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	fc 01       	movw	r30, r24
    1f72:	89 2b       	or	r24, r25
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <xTaskPriorityDisinherit+0x10>
    1f76:	51 c0       	rjmp	.+162    	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1f78:	82 a1       	ldd	r24, Z+34	; 0x22
    1f7a:	81 50       	subi	r24, 0x01	; 1
    1f7c:	82 a3       	std	Z+34, r24	; 0x22
    1f7e:	26 89       	ldd	r18, Z+22	; 0x16
    1f80:	91 a1       	ldd	r25, Z+33	; 0x21
    1f82:	29 17       	cp	r18, r25
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <xTaskPriorityDisinherit+0x20>
    1f86:	4b c0       	rjmp	.+150    	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    1f88:	81 11       	cpse	r24, r1
    1f8a:	4b c0       	rjmp	.+150    	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    1f8c:	ef 01       	movw	r28, r30
    1f8e:	8f 01       	movw	r16, r30
    1f90:	0e 5f       	subi	r16, 0xFE	; 254
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	c8 01       	movw	r24, r16
    1f96:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	8e 8b       	std	Y+22, r24	; 0x16
    1f9e:	24 e0       	ldi	r18, 0x04	; 4
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	28 1b       	sub	r18, r24
    1fa4:	31 09       	sbc	r19, r1
    1fa6:	3d 87       	std	Y+13, r19	; 0x0d
    1fa8:	2c 87       	std	Y+12, r18	; 0x0c
    1faa:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    1fae:	98 17       	cp	r25, r24
    1fb0:	10 f4       	brcc	.+4      	; 0x1fb6 <xTaskPriorityDisinherit+0x4e>
    1fb2:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	fc 01       	movw	r30, r24
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	8e 0f       	add	r24, r30
    1fc8:	9f 1f       	adc	r25, r31
    1fca:	fc 01       	movw	r30, r24
    1fcc:	ed 54       	subi	r30, 0x4D	; 77
    1fce:	fd 4e       	sbci	r31, 0xED	; 237
    1fd0:	01 80       	ldd	r0, Z+1	; 0x01
    1fd2:	f2 81       	ldd	r31, Z+2	; 0x02
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	fd 83       	std	Y+5, r31	; 0x05
    1fd8:	ec 83       	std	Y+4, r30	; 0x04
    1fda:	84 81       	ldd	r24, Z+4	; 0x04
    1fdc:	95 81       	ldd	r25, Z+5	; 0x05
    1fde:	9f 83       	std	Y+7, r25	; 0x07
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	a4 81       	ldd	r26, Z+4	; 0x04
    1fe4:	b5 81       	ldd	r27, Z+5	; 0x05
    1fe6:	13 96       	adiw	r26, 0x03	; 3
    1fe8:	1c 93       	st	X, r17
    1fea:	0e 93       	st	-X, r16
    1fec:	12 97       	sbiw	r26, 0x02	; 2
    1fee:	15 83       	std	Z+5, r17	; 0x05
    1ff0:	04 83       	std	Z+4, r16	; 0x04
    1ff2:	ee 89       	ldd	r30, Y+22	; 0x16
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	cf 01       	movw	r24, r30
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	e8 0f       	add	r30, r24
    2006:	f9 1f       	adc	r31, r25
    2008:	ed 54       	subi	r30, 0x4D	; 77
    200a:	fd 4e       	sbci	r31, 0xED	; 237
    200c:	fb 87       	std	Y+11, r31	; 0x0b
    200e:	ea 87       	std	Y+10, r30	; 0x0a
    2010:	80 81       	ld	r24, Z
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	80 83       	st	Z, r24
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	03 c0       	rjmp	.+6      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <vTaskPriorityDisinheritAfterTimeout>:
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	fc 01       	movw	r30, r24
    2038:	89 2b       	or	r24, r25
    203a:	09 f4       	brne	.+2      	; 0x203e <vTaskPriorityDisinheritAfterTimeout+0x10>
    203c:	66 c0       	rjmp	.+204    	; 0x210a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    203e:	91 a1       	ldd	r25, Z+33	; 0x21
    2040:	96 17       	cp	r25, r22
    2042:	08 f4       	brcc	.+2      	; 0x2046 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2044:	96 2f       	mov	r25, r22
    2046:	86 89       	ldd	r24, Z+22	; 0x16
    2048:	98 17       	cp	r25, r24
    204a:	09 f4       	brne	.+2      	; 0x204e <vTaskPriorityDisinheritAfterTimeout+0x20>
    204c:	5e c0       	rjmp	.+188    	; 0x210a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    204e:	22 a1       	ldd	r18, Z+34	; 0x22
    2050:	21 30       	cpi	r18, 0x01	; 1
    2052:	09 f0       	breq	.+2      	; 0x2056 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2054:	5a c0       	rjmp	.+180    	; 0x210a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2056:	96 8b       	std	Z+22, r25	; 0x16
    2058:	24 85       	ldd	r18, Z+12	; 0x0c
    205a:	35 85       	ldd	r19, Z+13	; 0x0d
    205c:	33 23       	and	r19, r19
    205e:	34 f0       	brlt	.+12     	; 0x206c <vTaskPriorityDisinheritAfterTimeout+0x3e>
    2060:	24 e0       	ldi	r18, 0x04	; 4
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	29 1b       	sub	r18, r25
    2066:	31 09       	sbc	r19, r1
    2068:	35 87       	std	Z+13, r19	; 0x0d
    206a:	24 87       	std	Z+12, r18	; 0x0c
    206c:	22 85       	ldd	r18, Z+10	; 0x0a
    206e:	33 85       	ldd	r19, Z+11	; 0x0b
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	ac 01       	movw	r20, r24
    2074:	44 0f       	add	r20, r20
    2076:	55 1f       	adc	r21, r21
    2078:	44 0f       	add	r20, r20
    207a:	55 1f       	adc	r21, r21
    207c:	44 0f       	add	r20, r20
    207e:	55 1f       	adc	r21, r21
    2080:	84 0f       	add	r24, r20
    2082:	95 1f       	adc	r25, r21
    2084:	8d 54       	subi	r24, 0x4D	; 77
    2086:	9d 4e       	sbci	r25, 0xED	; 237
    2088:	28 17       	cp	r18, r24
    208a:	39 07       	cpc	r19, r25
    208c:	f1 f5       	brne	.+124    	; 0x210a <vTaskPriorityDisinheritAfterTimeout+0xdc>
    208e:	ef 01       	movw	r28, r30
    2090:	8f 01       	movw	r16, r30
    2092:	0e 5f       	subi	r16, 0xFE	; 254
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	c8 01       	movw	r24, r16
    2098:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
    209c:	8e 89       	ldd	r24, Y+22	; 0x16
    209e:	90 91 7d 12 	lds	r25, 0x127D	; 0x80127d <uxTopReadyPriority>
    20a2:	98 17       	cp	r25, r24
    20a4:	10 f4       	brcc	.+4      	; 0x20aa <vTaskPriorityDisinheritAfterTimeout+0x7c>
    20a6:	80 93 7d 12 	sts	0x127D, r24	; 0x80127d <uxTopReadyPriority>
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	fc 01       	movw	r30, r24
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	8e 0f       	add	r24, r30
    20bc:	9f 1f       	adc	r25, r31
    20be:	fc 01       	movw	r30, r24
    20c0:	ed 54       	subi	r30, 0x4D	; 77
    20c2:	fd 4e       	sbci	r31, 0xED	; 237
    20c4:	01 80       	ldd	r0, Z+1	; 0x01
    20c6:	f2 81       	ldd	r31, Z+2	; 0x02
    20c8:	e0 2d       	mov	r30, r0
    20ca:	fd 83       	std	Y+5, r31	; 0x05
    20cc:	ec 83       	std	Y+4, r30	; 0x04
    20ce:	84 81       	ldd	r24, Z+4	; 0x04
    20d0:	95 81       	ldd	r25, Z+5	; 0x05
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
    20d6:	a4 81       	ldd	r26, Z+4	; 0x04
    20d8:	b5 81       	ldd	r27, Z+5	; 0x05
    20da:	13 96       	adiw	r26, 0x03	; 3
    20dc:	1c 93       	st	X, r17
    20de:	0e 93       	st	-X, r16
    20e0:	12 97       	sbiw	r26, 0x02	; 2
    20e2:	15 83       	std	Z+5, r17	; 0x05
    20e4:	04 83       	std	Z+4, r16	; 0x04
    20e6:	8e 89       	ldd	r24, Y+22	; 0x16
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	fc 01       	movw	r30, r24
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	e8 0f       	add	r30, r24
    20fa:	f9 1f       	adc	r31, r25
    20fc:	ed 54       	subi	r30, 0x4D	; 77
    20fe:	fd 4e       	sbci	r31, 0xED	; 237
    2100:	fb 87       	std	Y+11, r31	; 0x0b
    2102:	ea 87       	std	Y+10, r30	; 0x0a
    2104:	80 81       	ld	r24, Z
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	80 83       	st	Z, r24
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2114:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    2118:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    211c:	89 2b       	or	r24, r25
    211e:	39 f0       	breq	.+14     	; 0x212e <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2120:	e0 91 d7 12 	lds	r30, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    2124:	f0 91 d8 12 	lds	r31, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    2128:	82 a1       	ldd	r24, Z+34	; 0x22
    212a:	8f 5f       	subi	r24, 0xFF	; 255
    212c:	82 a3       	std	Z+34, r24	; 0x22
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    212e:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <pxCurrentTCB>
    2132:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <pxCurrentTCB+0x1>
    }
    2136:	08 95       	ret

00002138 <prvGetNextExpireTime>:
    2138:	dc 01       	movw	r26, r24
    213a:	e0 91 e1 12 	lds	r30, 0x12E1	; 0x8012e1 <pxCurrentTimerList>
    213e:	f0 91 e2 12 	lds	r31, 0x12E2	; 0x8012e2 <pxCurrentTimerList+0x1>
    2142:	80 81       	ld	r24, Z
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	81 11       	cpse	r24, r1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 93       	st	X, r25
    214c:	91 11       	cpse	r25, r1
    214e:	06 c0       	rjmp	.+12     	; 0x215c <prvGetNextExpireTime+0x24>
    2150:	05 80       	ldd	r0, Z+5	; 0x05
    2152:	f6 81       	ldd	r31, Z+6	; 0x06
    2154:	e0 2d       	mov	r30, r0
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	08 95       	ret
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	08 95       	ret

00002162 <prvInsertTimerInActiveList>:
    2162:	fc 01       	movw	r30, r24
    2164:	73 83       	std	Z+3, r23	; 0x03
    2166:	62 83       	std	Z+2, r22	; 0x02
    2168:	91 87       	std	Z+9, r25	; 0x09
    216a:	80 87       	std	Z+8, r24	; 0x08
    216c:	46 17       	cp	r20, r22
    216e:	57 07       	cpc	r21, r23
    2170:	90 f0       	brcs	.+36     	; 0x2196 <prvInsertTimerInActiveList+0x34>
    2172:	42 1b       	sub	r20, r18
    2174:	53 0b       	sbc	r21, r19
    2176:	84 85       	ldd	r24, Z+12	; 0x0c
    2178:	95 85       	ldd	r25, Z+13	; 0x0d
    217a:	48 17       	cp	r20, r24
    217c:	59 07       	cpc	r21, r25
    217e:	e0 f4       	brcc	.+56     	; 0x21b8 <prvInsertTimerInActiveList+0x56>
    2180:	bf 01       	movw	r22, r30
    2182:	6e 5f       	subi	r22, 0xFE	; 254
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxOverflowTimerList>
    218a:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxOverflowTimerList+0x1>
    218e:	0e 94 84 02 	call	0x508	; 0x508 <vListInsert>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	08 95       	ret
    2196:	42 17       	cp	r20, r18
    2198:	53 07       	cpc	r21, r19
    219a:	18 f4       	brcc	.+6      	; 0x21a2 <prvInsertTimerInActiveList+0x40>
    219c:	62 17       	cp	r22, r18
    219e:	73 07       	cpc	r23, r19
    21a0:	68 f4       	brcc	.+26     	; 0x21bc <prvInsertTimerInActiveList+0x5a>
    21a2:	bf 01       	movw	r22, r30
    21a4:	6e 5f       	subi	r22, 0xFE	; 254
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <pxCurrentTimerList>
    21ac:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <pxCurrentTimerList+0x1>
    21b0:	0e 94 84 02 	call	0x508	; 0x508 <vListInsert>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	08 95       	ret
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	08 95       	ret
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	08 95       	ret

000021c0 <prvCheckForValidListAndQueue>:
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	0f 92       	push	r0
    21c6:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    21ca:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    21ce:	89 2b       	or	r24, r25
    21d0:	e9 f4       	brne	.+58     	; 0x220c <__stack+0xd>
    21d2:	8c ee       	ldi	r24, 0xEC	; 236
    21d4:	92 e1       	ldi	r25, 0x12	; 18
    21d6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInitialise>
    21da:	83 ee       	ldi	r24, 0xE3	; 227
    21dc:	92 e1       	ldi	r25, 0x12	; 18
    21de:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vListInitialise>
    21e2:	8c ee       	ldi	r24, 0xEC	; 236
    21e4:	92 e1       	ldi	r25, 0x12	; 18
    21e6:	90 93 e2 12 	sts	0x12E2, r25	; 0x8012e2 <pxCurrentTimerList+0x1>
    21ea:	80 93 e1 12 	sts	0x12E1, r24	; 0x8012e1 <pxCurrentTimerList>
    21ee:	83 ee       	ldi	r24, 0xE3	; 227
    21f0:	92 e1       	ldi	r25, 0x12	; 18
    21f2:	90 93 e0 12 	sts	0x12E0, r25	; 0x8012e0 <pxOverflowTimerList+0x1>
    21f6:	80 93 df 12 	sts	0x12DF, r24	; 0x8012df <pxOverflowTimerList>
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	65 e0       	ldi	r22, 0x05	; 5
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	0e 94 25 05 	call	0xa4a	; 0xa4a <xQueueGenericCreate>
    2204:	90 93 de 12 	sts	0x12DE, r25	; 0x8012de <xTimerQueue+0x1>
    2208:	80 93 dd 12 	sts	0x12DD, r24	; 0x8012dd <xTimerQueue>
    220c:	0f 90       	pop	r0
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	08 95       	ret

00002212 <xTimerCreateTimerTask>:
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	d3 df       	rcall	.-90     	; 0x21c0 <prvCheckForValidListAndQueue>
    221a:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    221e:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    2222:	89 2b       	or	r24, r25
    2224:	89 f0       	breq	.+34     	; 0x2248 <xTimerCreateTimerTask+0x36>
    2226:	0f 2e       	mov	r0, r31
    2228:	fb ed       	ldi	r31, 0xDB	; 219
    222a:	ef 2e       	mov	r14, r31
    222c:	f2 e1       	ldi	r31, 0x12	; 18
    222e:	ff 2e       	mov	r15, r31
    2230:	f0 2d       	mov	r31, r0
    2232:	03 e0       	ldi	r16, 0x03	; 3
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	45 e5       	ldi	r20, 0x55	; 85
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	6c e0       	ldi	r22, 0x0C	; 12
    223e:	72 e0       	ldi	r23, 0x02	; 2
    2240:	84 e8       	ldi	r24, 0x84	; 132
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	3e d8       	rcall	.-3972   	; 0x12c2 <xTaskCreate>
    2246:	01 c0       	rjmp	.+2      	; 0x224a <xTimerCreateTimerTask+0x38>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	08 95       	ret

00002252 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	00 d0       	rcall	.+0      	; 0x225c <xTimerGenericCommand+0xa>
    225c:	1f 92       	push	r1
    225e:	1f 92       	push	r1
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2264:	e0 91 dd 12 	lds	r30, 0x12DD	; 0x8012dd <xTimerQueue>
    2268:	f0 91 de 12 	lds	r31, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    226c:	30 97       	sbiw	r30, 0x00	; 0
    226e:	69 f1       	breq	.+90     	; 0x22ca <xTimerGenericCommand+0x78>
    2270:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2272:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2274:	5b 83       	std	Y+3, r21	; 0x03
    2276:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2278:	9d 83       	std	Y+5, r25	; 0x05
    227a:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    227c:	66 30       	cpi	r22, 0x06	; 6
    227e:	e4 f4       	brge	.+56     	; 0x22b8 <xTimerGenericCommand+0x66>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2280:	d1 dd       	rcall	.-1118   	; 0x1e24 <xTaskGetSchedulerState>
    2282:	82 30       	cpi	r24, 0x02	; 2
    2284:	61 f4       	brne	.+24     	; 0x229e <xTimerGenericCommand+0x4c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	a8 01       	movw	r20, r16
    228a:	be 01       	movw	r22, r28
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    2294:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    2298:	0e 94 48 05 	call	0xa90	; 0xa90 <xQueueGenericSend>
    229c:	17 c0       	rjmp	.+46     	; 0x22cc <xTimerGenericCommand+0x7a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	be 01       	movw	r22, r28
    22a6:	6f 5f       	subi	r22, 0xFF	; 255
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    22ae:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    22b2:	0e 94 48 05 	call	0xa90	; 0xa90 <xQueueGenericSend>
    22b6:	0a c0       	rjmp	.+20     	; 0x22cc <xTimerGenericCommand+0x7a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	ad 01       	movw	r20, r26
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	cf 01       	movw	r24, r30
    22c4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <xQueueGenericSendFromISR>
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <xTimerGenericCommand+0x7a>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    22ca:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    22ec:	2f c0       	rjmp	.+94     	; 0x234c <prvSwitchTimerLists+0x6c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22ee:	05 80       	ldd	r0, Z+5	; 0x05
    22f0:	f6 81       	ldd	r31, Z+6	; 0x06
    22f2:	e0 2d       	mov	r30, r0
    22f4:	e0 80       	ld	r14, Z
    22f6:	f1 80       	ldd	r15, Z+1	; 0x01

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    22f8:	c6 81       	ldd	r28, Z+6	; 0x06
    22fa:	d7 81       	ldd	r29, Z+7	; 0x07
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22fc:	8e 01       	movw	r16, r28
    22fe:	0e 5f       	subi	r16, 0xFE	; 254
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	c8 01       	movw	r24, r16
    2304:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2308:	e8 89       	ldd	r30, Y+16	; 0x10
    230a:	f9 89       	ldd	r31, Y+17	; 0x11
    230c:	ce 01       	movw	r24, r28
    230e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2310:	8a 89       	ldd	r24, Y+18	; 0x12
    2312:	82 ff       	sbrs	r24, 2
    2314:	1b c0       	rjmp	.+54     	; 0x234c <prvSwitchTimerLists+0x6c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2316:	8c 85       	ldd	r24, Y+12	; 0x0c
    2318:	9d 85       	ldd	r25, Y+13	; 0x0d
    231a:	8e 0d       	add	r24, r14
    231c:	9f 1d       	adc	r25, r15

                if( xReloadTime > xNextExpireTime )
    231e:	e8 16       	cp	r14, r24
    2320:	f9 06       	cpc	r15, r25
    2322:	60 f4       	brcc	.+24     	; 0x233c <prvSwitchTimerLists+0x5c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	8a 83       	std	Y+2, r24	; 0x02
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2328:	d9 87       	std	Y+9, r29	; 0x09
    232a:	c8 87       	std	Y+8, r28	; 0x08
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    232c:	b8 01       	movw	r22, r16
    232e:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <pxCurrentTimerList>
    2332:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <pxCurrentTimerList+0x1>
    2336:	0e 94 84 02 	call	0x508	; 0x508 <vListInsert>
    233a:	08 c0       	rjmp	.+16     	; 0x234c <prvSwitchTimerLists+0x6c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    233c:	00 e0       	ldi	r16, 0x00	; 0
    233e:	10 e0       	ldi	r17, 0x00	; 0
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	a7 01       	movw	r20, r14
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	ce 01       	movw	r24, r28
    234a:	83 df       	rcall	.-250    	; 0x2252 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    234c:	e0 91 e1 12 	lds	r30, 0x12E1	; 0x8012e1 <pxCurrentTimerList>
    2350:	f0 91 e2 12 	lds	r31, 0x12E2	; 0x8012e2 <pxCurrentTimerList+0x1>
    2354:	80 81       	ld	r24, Z
    2356:	81 11       	cpse	r24, r1
    2358:	ca cf       	rjmp	.-108    	; 0x22ee <prvSwitchTimerLists+0xe>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    235a:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <pxOverflowTimerList>
    235e:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <pxOverflowTimerList+0x1>
    2362:	90 93 e2 12 	sts	0x12E2, r25	; 0x8012e2 <pxCurrentTimerList+0x1>
    2366:	80 93 e1 12 	sts	0x12E1, r24	; 0x8012e1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    236a:	f0 93 e0 12 	sts	0x12E0, r31	; 0x8012e0 <pxOverflowTimerList+0x1>
    236e:	e0 93 df 12 	sts	0x12DF, r30	; 0x8012df <pxOverflowTimerList>
    }
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	08 95       	ret

00002380 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    238a:	13 d9       	rcall	.-3546   	; 0x15b2 <xTaskGetTickCount>
    238c:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    238e:	80 91 d9 12 	lds	r24, 0x12D9	; 0x8012d9 <xLastTime.2436>
    2392:	90 91 da 12 	lds	r25, 0x12DA	; 0x8012da <xLastTime.2436+0x1>
    2396:	c8 17       	cp	r28, r24
    2398:	d9 07       	cpc	r29, r25
        {
            prvSwitchTimerLists();
    239a:	28 f4       	brcc	.+10     	; 0x23a6 <prvSampleTimeNow+0x26>
    239c:	a1 df       	rcall	.-190    	; 0x22e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	f8 01       	movw	r30, r16
    23a2:	80 83       	st	Z, r24
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    23a6:	f8 01       	movw	r30, r16
    23a8:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    23aa:	d0 93 da 12 	sts	0x12DA, r29	; 0x8012da <xLastTime.2436+0x1>
    23ae:	c0 93 d9 12 	sts	0x12D9, r28	; 0x8012d9 <xLastTime.2436>

        return xTimeNow;
    }
    23b2:	ce 01       	movw	r24, r28
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	7c 01       	movw	r14, r24
    23cc:	8b 01       	movw	r16, r22
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    23ce:	e0 91 e1 12 	lds	r30, 0x12E1	; 0x8012e1 <pxCurrentTimerList>
    23d2:	f0 91 e2 12 	lds	r31, 0x12E2	; 0x8012e2 <pxCurrentTimerList+0x1>
    23d6:	05 80       	ldd	r0, Z+5	; 0x05
    23d8:	f6 81       	ldd	r31, Z+6	; 0x06
    23da:	e0 2d       	mov	r30, r0
    23dc:	c6 81       	ldd	r28, Z+6	; 0x06
    23de:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23e0:	ce 01       	movw	r24, r28
    23e2:	02 96       	adiw	r24, 0x02	; 2
    23e4:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    23e8:	8a 89       	ldd	r24, Y+18	; 0x12
    23ea:	82 ff       	sbrs	r24, 2
    23ec:	13 c0       	rjmp	.+38     	; 0x2414 <prvProcessExpiredTimer+0x56>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    23ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f2:	6e 0d       	add	r22, r14
    23f4:	7f 1d       	adc	r23, r15
    23f6:	97 01       	movw	r18, r14
    23f8:	a8 01       	movw	r20, r16
    23fa:	ce 01       	movw	r24, r28
    23fc:	b2 de       	rcall	.-668    	; 0x2162 <prvInsertTimerInActiveList>
    23fe:	88 23       	and	r24, r24
    2400:	59 f0       	breq	.+22     	; 0x2418 <prvProcessExpiredTimer+0x5a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2402:	00 e0       	ldi	r16, 0x00	; 0
    2404:	10 e0       	ldi	r17, 0x00	; 0
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	a7 01       	movw	r20, r14
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	ce 01       	movw	r24, r28
    2410:	20 df       	rcall	.-448    	; 0x2252 <xTimerGenericCommand>
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <prvProcessExpiredTimer+0x5a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2414:	8e 7f       	andi	r24, 0xFE	; 254
    2416:	8a 8b       	std	Y+18, r24	; 0x12
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2418:	e8 89       	ldd	r30, Y+16	; 0x10
    241a:	f9 89       	ldd	r31, Y+17	; 0x11
    241c:	ce 01       	movw	r24, r28
    241e:	19 95       	eicall
    }
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	08 95       	ret

0000242e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    242e:	cf 92       	push	r12
    2430:	df 92       	push	r13
    2432:	ef 92       	push	r14
    2434:	ff 92       	push	r15
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	1f 92       	push	r1
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	7c 01       	movw	r14, r24
    2444:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2446:	af d8       	rcall	.-3746   	; 0x15a6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2448:	ce 01       	movw	r24, r28
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	99 df       	rcall	.-206    	; 0x2380 <prvSampleTimeNow>
    244e:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	81 11       	cpse	r24, r1
    2454:	24 c0       	rjmp	.+72     	; 0x249e <prvProcessTimerOrBlockTask+0x70>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2456:	11 11       	cpse	r17, r1
    2458:	08 c0       	rjmp	.+16     	; 0x246a <prvProcessTimerOrBlockTask+0x3c>
    245a:	ce 14       	cp	r12, r14
    245c:	df 04       	cpc	r13, r15
                {
                    ( void ) xTaskResumeAll();
    245e:	28 f0       	brcs	.+10     	; 0x246a <prvProcessTimerOrBlockTask+0x3c>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2460:	cb d9       	rcall	.-3178   	; 0x17f8 <xTaskResumeAll>
    2462:	b6 01       	movw	r22, r12
    2464:	c7 01       	movw	r24, r14
    2466:	ab df       	rcall	.-170    	; 0x23be <prvProcessExpiredTimer>
    2468:	1b c0       	rjmp	.+54     	; 0x24a0 <prvProcessTimerOrBlockTask+0x72>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    246a:	11 23       	and	r17, r17
    246c:	41 f0       	breq	.+16     	; 0x247e <prvProcessTimerOrBlockTask+0x50>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    246e:	e0 91 df 12 	lds	r30, 0x12DF	; 0x8012df <pxOverflowTimerList>
    2472:	f0 91 e0 12 	lds	r31, 0x12E0	; 0x8012e0 <pxOverflowTimerList+0x1>
    2476:	80 81       	ld	r24, Z
    2478:	11 e0       	ldi	r17, 0x01	; 1
    247a:	81 11       	cpse	r24, r1
    247c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    247e:	b7 01       	movw	r22, r14
    2480:	6c 19       	sub	r22, r12
    2482:	7d 09       	sbc	r23, r13
    2484:	41 2f       	mov	r20, r17
    2486:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    248a:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    248e:	0e 94 45 07 	call	0xe8a	; 0xe8a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2492:	b2 d9       	rcall	.-3228   	; 0x17f8 <xTaskResumeAll>
    2494:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <prvProcessTimerOrBlockTask+0x72>
    2498:	0e 94 31 03 	call	0x662	; 0x662 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <prvProcessTimerOrBlockTask+0x72>
    249e:	ac d9       	rcall	.-3240   	; 0x17f8 <xTaskResumeAll>
            }
        }
    }
    24a0:	0f 90       	pop	r0
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	08 95       	ret

000024b2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <prvProcessReceivedCommands+0xe>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <prvProcessReceivedCommands+0x10>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    24c6:	6c c0       	rjmp	.+216    	; 0x25a0 <prvProcessReceivedCommands+0xee>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	88 23       	and	r24, r24
    24cc:	0c f4       	brge	.+2      	; 0x24d0 <prvProcessReceivedCommands+0x1e>
    24ce:	68 c0       	rjmp	.+208    	; 0x25a0 <prvProcessReceivedCommands+0xee>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    24d0:	ec 80       	ldd	r14, Y+4	; 0x04
    24d2:	fd 80       	ldd	r15, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    24d4:	d7 01       	movw	r26, r14
    24d6:	1a 96       	adiw	r26, 0x0a	; 10
    24d8:	8d 91       	ld	r24, X+
    24da:	9c 91       	ld	r25, X
    24dc:	1b 97       	sbiw	r26, 0x0b	; 11
    24de:	89 2b       	or	r24, r25
    24e0:	21 f0       	breq	.+8      	; 0x24ea <prvProcessReceivedCommands+0x38>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24e2:	c7 01       	movw	r24, r14
    24e4:	02 96       	adiw	r24, 0x02	; 2
    24e6:	0e 94 b5 02 	call	0x56a	; 0x56a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    24ea:	ce 01       	movw	r24, r28
    24ec:	06 96       	adiw	r24, 0x06	; 6
    24ee:	48 df       	rcall	.-368    	; 0x2380 <prvSampleTimeNow>
    24f0:	ac 01       	movw	r20, r24

                switch( xMessage.xMessageID )
    24f2:	e9 81       	ldd	r30, Y+1	; 0x01
    24f4:	0e 2e       	mov	r0, r30
    24f6:	00 0c       	add	r0, r0
    24f8:	ff 0b       	sbc	r31, r31
    24fa:	ea 30       	cpi	r30, 0x0A	; 10
    24fc:	f1 05       	cpc	r31, r1
    24fe:	08 f0       	brcs	.+2      	; 0x2502 <prvProcessReceivedCommands+0x50>
    2500:	4f c0       	rjmp	.+158    	; 0x25a0 <prvProcessReceivedCommands+0xee>
    2502:	88 27       	eor	r24, r24
    2504:	ee 58       	subi	r30, 0x8E	; 142
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	8f 4f       	sbci	r24, 0xFF	; 255
    250a:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    250e:	f7 01       	movw	r30, r14
    2510:	82 89       	ldd	r24, Z+18	; 0x12
    2512:	81 60       	ori	r24, 0x01	; 1
    2514:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2516:	2a 81       	ldd	r18, Y+2	; 0x02
    2518:	3b 81       	ldd	r19, Y+3	; 0x03
    251a:	64 85       	ldd	r22, Z+12	; 0x0c
    251c:	75 85       	ldd	r23, Z+13	; 0x0d
    251e:	62 0f       	add	r22, r18
    2520:	73 1f       	adc	r23, r19
    2522:	c7 01       	movw	r24, r14
    2524:	1e de       	rcall	.-964    	; 0x2162 <prvInsertTimerInActiveList>
    2526:	88 23       	and	r24, r24
    2528:	d9 f1       	breq	.+118    	; 0x25a0 <prvProcessReceivedCommands+0xee>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    252a:	d7 01       	movw	r26, r14
    252c:	50 96       	adiw	r26, 0x10	; 16
    252e:	ed 91       	ld	r30, X+
    2530:	fc 91       	ld	r31, X
    2532:	51 97       	sbiw	r26, 0x11	; 17
    2534:	c7 01       	movw	r24, r14
    2536:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2538:	f7 01       	movw	r30, r14
    253a:	82 89       	ldd	r24, Z+18	; 0x12
    253c:	82 ff       	sbrs	r24, 2
    253e:	30 c0       	rjmp	.+96     	; 0x25a0 <prvProcessReceivedCommands+0xee>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2540:	4a 81       	ldd	r20, Y+2	; 0x02
    2542:	5b 81       	ldd	r21, Y+3	; 0x03
    2544:	84 85       	ldd	r24, Z+12	; 0x0c
    2546:	95 85       	ldd	r25, Z+13	; 0x0d
    2548:	48 0f       	add	r20, r24
    254a:	59 1f       	adc	r21, r25
    254c:	00 e0       	ldi	r16, 0x00	; 0
    254e:	10 e0       	ldi	r17, 0x00	; 0
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	c7 01       	movw	r24, r14
    2558:	7c de       	rcall	.-776    	; 0x2252 <xTimerGenericCommand>
    255a:	22 c0       	rjmp	.+68     	; 0x25a0 <prvProcessReceivedCommands+0xee>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    255c:	d7 01       	movw	r26, r14
    255e:	52 96       	adiw	r26, 0x12	; 18
    2560:	8c 91       	ld	r24, X
    2562:	52 97       	sbiw	r26, 0x12	; 18
    2564:	8e 7f       	andi	r24, 0xFE	; 254
    2566:	52 96       	adiw	r26, 0x12	; 18
    2568:	8c 93       	st	X, r24
                        break;
    256a:	1a c0       	rjmp	.+52     	; 0x25a0 <prvProcessReceivedCommands+0xee>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    256c:	f7 01       	movw	r30, r14
    256e:	82 89       	ldd	r24, Z+18	; 0x12
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	82 8b       	std	Z+18, r24	; 0x12
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2574:	6a 81       	ldd	r22, Y+2	; 0x02
    2576:	7b 81       	ldd	r23, Y+3	; 0x03
    2578:	75 87       	std	Z+13, r23	; 0x0d
    257a:	64 87       	std	Z+12, r22	; 0x0c
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    257c:	64 0f       	add	r22, r20
    257e:	75 1f       	adc	r23, r21
    2580:	9a 01       	movw	r18, r20
    2582:	c7 01       	movw	r24, r14
    2584:	ee dd       	rcall	.-1060   	; 0x2162 <prvInsertTimerInActiveList>
                        break;
    2586:	0c c0       	rjmp	.+24     	; 0x25a0 <prvProcessReceivedCommands+0xee>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2588:	d7 01       	movw	r26, r14
    258a:	52 96       	adiw	r26, 0x12	; 18
    258c:	8c 91       	ld	r24, X
    258e:	81 fd       	sbrc	r24, 1
    2590:	04 c0       	rjmp	.+8      	; 0x259a <prvProcessReceivedCommands+0xe8>
                                {
                                    vPortFree( pxTimer );
    2592:	c7 01       	movw	r24, r14
    2594:	0e 94 14 02 	call	0x428	; 0x428 <vPortFree>
    2598:	03 c0       	rjmp	.+6      	; 0x25a0 <prvProcessReceivedCommands+0xee>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    259a:	8e 7f       	andi	r24, 0xFE	; 254
    259c:	f7 01       	movw	r30, r14
    259e:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	be 01       	movw	r22, r28
    25a6:	6f 5f       	subi	r22, 0xFF	; 255
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <xTimerQueue>
    25ae:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <xTimerQueue+0x1>
    25b2:	0e 94 23 06 	call	0xc46	; 0xc46 <xQueueReceive>
    25b6:	81 11       	cpse	r24, r1
    25b8:	87 cf       	rjmp	.-242    	; 0x24c8 <prvProcessReceivedCommands+0x16>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    25ba:	26 96       	adiw	r28, 0x06	; 6
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	08 95       	ret

000025d4 <_Z15prvSetMainLedOnv>:
 */
void prvSetMainLedOn( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25d4:	84 b1       	in	r24, 0x04	; 4
    25d6:	80 68       	ori	r24, 0x80	; 128
    25d8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25da:	85 b1       	in	r24, 0x05	; 5
    25dc:	80 68       	ori	r24, 0x80	; 128
    25de:	85 b9       	out	0x05, r24	; 5
    25e0:	08 95       	ret

000025e2 <_Z15prvBlinkMainLedv>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    25e2:	83 b1       	in	r24, 0x03	; 3
    25e4:	80 68       	ori	r24, 0x80	; 128
    25e6:	83 b9       	out	0x03, r24	; 3
    25e8:	08 95       	ret

000025ea <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    25ea:	f4 df       	rcall	.-24     	; 0x25d4 <_Z15prvSetMainLedOnv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25ec:	83 ed       	ldi	r24, 0xD3	; 211
    25ee:	90 e3       	ldi	r25, 0x30	; 48
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <vApplicationMallocFailedHook+0x6>
    25f4:	00 c0       	rjmp	.+0      	; 0x25f6 <vApplicationMallocFailedHook+0xc>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    25f6:	00 00       	nop
    25f8:	f4 df       	rcall	.-24     	; 0x25e2 <_Z15prvBlinkMainLedv>
    25fa:	f8 cf       	rjmp	.-16     	; 0x25ec <vApplicationMallocFailedHook+0x2>

000025fc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    25fc:	eb df       	rcall	.-42     	; 0x25d4 <_Z15prvSetMainLedOnv>
    25fe:	2f e7       	ldi	r18, 0x7F	; 127
    2600:	8a e1       	ldi	r24, 0x1A	; 26
    2602:	96 e0       	ldi	r25, 0x06	; 6
    2604:	21 50       	subi	r18, 0x01	; 1
    2606:	80 40       	sbci	r24, 0x00	; 0
    2608:	90 40       	sbci	r25, 0x00	; 0
    260a:	e1 f7       	brne	.-8      	; 0x2604 <vApplicationStackOverflowHook+0x8>
    260c:	00 c0       	rjmp	.+0      	; 0x260e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    260e:	00 00       	nop
    2610:	e8 df       	rcall	.-48     	; 0x25e2 <_Z15prvBlinkMainLedv>
    2612:	f5 cf       	rjmp	.-22     	; 0x25fe <vApplicationStackOverflowHook+0x2>

00002614 <_Z4initv>:


void init()
{

DDRE |= 1;
    2614:	8d b1       	in	r24, 0x0d	; 13
    2616:	81 60       	ori	r24, 0x01	; 1
    2618:	8d b9       	out	0x0d, r24	; 13
DDRH |= 1 << 3 | 1 << 4 | 1 << 5;
    261a:	e1 e0       	ldi	r30, 0x01	; 1
    261c:	f1 e0       	ldi	r31, 0x01	; 1
    261e:	80 81       	ld	r24, Z
    2620:	88 63       	ori	r24, 0x38	; 56
    2622:	80 83       	st	Z, r24
DDRB |= 0b11110000;
    2624:	84 b1       	in	r24, 0x04	; 4
    2626:	80 6f       	ori	r24, 0xF0	; 240
    2628:	84 b9       	out	0x04, r24	; 4

/************************/
/* Nastavitev Timerja */

TCCR0A = 0;
    262a:	14 bc       	out	0x24, r1	; 36
TCCR0B = 0;
    262c:	15 bc       	out	0x25, r1	; 37
TCNT0 = 0;
    262e:	16 bc       	out	0x26, r1	; 38
TCCR0A = (1 << WGM01);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	84 bd       	out	0x24, r24	; 36
OCR0A = 250;
    2634:	9a ef       	ldi	r25, 0xFA	; 250
    2636:	97 bd       	out	0x27, r25	; 39
TIMSK0 = (1 << OCIE0A);
    2638:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
TCCR0B = (1 << CS01) || (1 << CS00);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	85 bd       	out	0x25, r24	; 37



/************************/
ADMUX = (1 << REFS0) | (1 << 0b00000011) | (1 << ADLAR); //Nastavi referenco za napetost
    2640:	88 e6       	ldi	r24, 0x68	; 104
    2642:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
ADCSRA |= (1 << ADEN);                                   //Vklop adc in zacetek konverzije
    2646:	ea e7       	ldi	r30, 0x7A	; 122
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	80 68       	ori	r24, 0x80	; 128
    264e:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC);
    2650:	80 81       	ld	r24, Z
    2652:	80 64       	ori	r24, 0x40	; 64
    2654:	80 83       	st	Z, r24
DIDR0 = 0b11111111; // Izklop digitalnih registrov od 0 to 7
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
DIDR1 = 0b11111100; //Isto samo za ostale
    265c:	8c ef       	ldi	r24, 0xFC	; 252
    265e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7c007f>
    2662:	08 95       	ret

00002664 <__vector_21>:
}


ISR (TIMER0_COMPA_vect){
    2664:	1f 92       	push	r1
    2666:	0f 92       	push	r0
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	0f 92       	push	r0
    266c:	11 24       	eor	r1, r1
    266e:	0b b6       	in	r0, 0x3b	; 59
    2670:	0f 92       	push	r0
    2672:	8f 93       	push	r24
    2674:	9f 93       	push	r25
    2676:	af 93       	push	r26
    2678:	bf 93       	push	r27
    267a:	ef 93       	push	r30
    267c:	ff 93       	push	r31
Hardware.timeFROMboot +=1; //Belezi cas od zagona krmilnika (Timer 0)
    267e:	ec e9       	ldi	r30, 0x9C	; 156
    2680:	f3 e1       	ldi	r31, 0x13	; 19
    2682:	84 89       	ldd	r24, Z+20	; 0x14
    2684:	95 89       	ldd	r25, Z+21	; 0x15
    2686:	a6 89       	ldd	r26, Z+22	; 0x16
    2688:	b7 89       	ldd	r27, Z+23	; 0x17
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	a1 1d       	adc	r26, r1
    268e:	b1 1d       	adc	r27, r1
    2690:	84 8b       	std	Z+20, r24	; 0x14
    2692:	95 8b       	std	Z+21, r25	; 0x15
    2694:	a6 8b       	std	Z+22, r26	; 0x16
    2696:	b7 8b       	std	Z+23, r27	; 0x17
TCNT0 = 0;				   //Reset timerja, drugace bodo zamiki enaki overflowu casu
    2698:	16 bc       	out	0x26, r1	; 38
}
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	0f 90       	pop	r0
    26a8:	0b be       	out	0x3b, r0	; 59
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	0f 90       	pop	r0
    26b0:	1f 90       	pop	r1
    26b2:	18 95       	reti

000026b4 <main>:


int main()
{
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16

init();
    26ba:	ac df       	rcall	.-168    	; 0x2614 <_Z4initv>
writeOUTPUT(4, 'B', 1); // PULL up
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	62 e4       	ldi	r22, 0x42	; 66
    26c0:	84 e0       	ldi	r24, 0x04	; 4
    26c2:	fe d7       	rcall	.+4092   	; 0x36c0 <_Z11writeOUTPUThcb>
EEPROM.pisi(0,battery_eeprom_addr);
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	8c e3       	ldi	r24, 0x3C	; 60
    26cc:	93 e1       	ldi	r25, 0x13	; 19
    26ce:	9a d7       	rcall	.+3892   	; 0x3604 <_ZN8EEPROM_t4pisiEhj>
Hardware.POLKONC = EEPROM.beri(battery_eeprom_addr);
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	8c e3       	ldi	r24, 0x3C	; 60
    26d6:	93 e1       	ldi	r25, 0x13	; 19
    26d8:	ae d7       	rcall	.+3932   	; 0x3636 <_ZN8EEPROM_t4beriEj>
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	81 11       	cpse	r24, r1
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <main+0x2e>
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	90 93 a6 13 	sts	0x13A6, r25	; 0x8013a6 <Hardware+0xa>
voltage_SEM = xSemaphoreCreateMutex();
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <xQueueCreateMutex>
    26ec:	90 93 f6 12 	sts	0x12F6, r25	; 0x8012f6 <voltage_SEM+0x1>
    26f0:	80 93 f5 12 	sts	0x12F5, r24	; 0x8012f5 <voltage_SEM>
xSemaphoreGive(voltage_SEM); /*   (GIVE = ostali lahko vzamejo dostop, TAKE = task ostalim taskom vzame dostop do semaforja)  */
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	0e 94 48 05 	call	0xa90	; 0xa90 <xQueueGenericSend>

xTaskCreate(core, "_core", 256, NULL, tskIDLE_PRIORITY, &core_control);
    2702:	0f 2e       	mov	r0, r31
    2704:	f1 e0       	ldi	r31, 0x01	; 1
    2706:	ef 2e       	mov	r14, r31
    2708:	f3 e1       	ldi	r31, 0x13	; 19
    270a:	ff 2e       	mov	r15, r31
    270c:	f0 2d       	mov	r31, r0
    270e:	00 e0       	ldi	r16, 0x00	; 0
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	51 e0       	ldi	r21, 0x01	; 1
    2718:	64 e1       	ldi	r22, 0x14	; 20
    271a:	72 e0       	ldi	r23, 0x02	; 2
    271c:	88 e9       	ldi	r24, 0x98	; 152
    271e:	98 e1       	ldi	r25, 0x18	; 24
    2720:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
xTaskCreate(events, "Events task", 256, NULL, 3, &event_control);
    2724:	0f 2e       	mov	r0, r31
    2726:	ff ef       	ldi	r31, 0xFF	; 255
    2728:	ef 2e       	mov	r14, r31
    272a:	f2 e1       	ldi	r31, 0x12	; 18
    272c:	ff 2e       	mov	r15, r31
    272e:	f0 2d       	mov	r31, r0
    2730:	03 e0       	ldi	r16, 0x03	; 3
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	51 e0       	ldi	r21, 0x01	; 1
    273a:	6a e1       	ldi	r22, 0x1A	; 26
    273c:	72 e0       	ldi	r23, 0x02	; 2
    273e:	8c ec       	ldi	r24, 0xCC	; 204
    2740:	99 e1       	ldi	r25, 0x19	; 25
    2742:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
xTaskCreate(zaslon, "LVCHRG", 256, NULL, tskIDLE_PRIORITY, &zaslon_control);
    2746:	0f 2e       	mov	r0, r31
    2748:	fb ef       	ldi	r31, 0xFB	; 251
    274a:	ef 2e       	mov	r14, r31
    274c:	f2 e1       	ldi	r31, 0x12	; 18
    274e:	ff 2e       	mov	r15, r31
    2750:	f0 2d       	mov	r31, r0
    2752:	00 e0       	ldi	r16, 0x00	; 0
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	51 e0       	ldi	r21, 0x01	; 1
    275c:	66 e2       	ldi	r22, 0x26	; 38
    275e:	72 e0       	ldi	r23, 0x02	; 2
    2760:	89 ee       	ldi	r24, 0xE9	; 233
    2762:	9c e1       	ldi	r25, 0x1C	; 28
    2764:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
xTaskCreate(thermal, "therm", 256, NULL, 1, &thermal_control);
    2768:	0f 2e       	mov	r0, r31
    276a:	f7 ef       	ldi	r31, 0xF7	; 247
    276c:	ef 2e       	mov	r14, r31
    276e:	f2 e1       	ldi	r31, 0x12	; 18
    2770:	ff 2e       	mov	r15, r31
    2772:	f0 2d       	mov	r31, r0
    2774:	01 e0       	ldi	r16, 0x01	; 1
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	51 e0       	ldi	r21, 0x01	; 1
    277e:	6d e2       	ldi	r22, 0x2D	; 45
    2780:	72 e0       	ldi	r23, 0x02	; 2
    2782:	82 e5       	ldi	r24, 0x52	; 82
    2784:	9d e1       	ldi	r25, 0x1D	; 29
    2786:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
xTaskCreate(polnjenje, "CHRG", 256, NULL, tskIDLE_PRIORITY, &chrg_control);
    278a:	0f 2e       	mov	r0, r31
    278c:	f9 ef       	ldi	r31, 0xF9	; 249
    278e:	ef 2e       	mov	r14, r31
    2790:	f2 e1       	ldi	r31, 0x12	; 18
    2792:	ff 2e       	mov	r15, r31
    2794:	f0 2d       	mov	r31, r0
    2796:	00 e0       	ldi	r16, 0x00	; 0
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	51 e0       	ldi	r21, 0x01	; 1
    27a0:	68 e2       	ldi	r22, 0x28	; 40
    27a2:	72 e0       	ldi	r23, 0x02	; 2
    27a4:	8e e7       	ldi	r24, 0x7E	; 126
    27a6:	9c e1       	ldi	r25, 0x1C	; 28
    27a8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
xTaskCreate(audio_visual, "AUSYS", 256, NULL, 2, &audio_system_control);
    27ac:	0f 2e       	mov	r0, r31
    27ae:	fd ef       	ldi	r31, 0xFD	; 253
    27b0:	ef 2e       	mov	r14, r31
    27b2:	f2 e1       	ldi	r31, 0x12	; 18
    27b4:	ff 2e       	mov	r15, r31
    27b6:	f0 2d       	mov	r31, r0
    27b8:	02 e0       	ldi	r16, 0x02	; 2
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	51 e0       	ldi	r21, 0x01	; 1
    27c2:	63 e3       	ldi	r22, 0x33	; 51
    27c4:	72 e0       	ldi	r23, 0x02	; 2
    27c6:	8f ee       	ldi	r24, 0xEF	; 239
    27c8:	93 e1       	ldi	r25, 0x13	; 19
    27ca:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>

vTaskStartScheduler();
    27ce:	0e 94 a6 0a 	call	0x154c	; 0x154c <vTaskStartScheduler>
return 0;
}
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	08 95       	ret

000027de <_Z12audio_visualPv>:
castimer mic_sim_timer;

void audio_visual(void *p) //Funkcija avdio-vizualnega sistema
{
    bool mikrofon_detect = false;
    uint16_t povprecna_glasnost = 0;
    27de:	c1 2c       	mov	r12, r1
    27e0:	d1 2c       	mov	r13, r1

    while (true)
    {
       
        int checkPVP = AVG_Volume_Meri(); // Izmeri povprecje
    27e2:	cc d0       	rcall	.+408    	; 0x297c <_Z15AVG_Volume_Meriv>
        povprecna_glasnost = checkPVP != 0 ? checkPVP : povprecna_glasnost;
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	09 f0       	breq	.+2      	; 0x27ea <_Z12audio_visualPv+0xc>
    27e8:	6c 01       	movw	r12, r24
        mikrofon_detect = readANALOG(mic_pin) >= (povprecna_glasnost + 80) && povprecna_glasnost != 0 ? true : false;
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	c9 d7       	rcall	.+3986   	; 0x3780 <_Z10readANALOGh>
    27ee:	96 01       	movw	r18, r12
    27f0:	20 5b       	subi	r18, 0xB0	; 176
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	82 17       	cp	r24, r18
    27f6:	93 07       	cpc	r25, r19
    27f8:	28 f0       	brcs	.+10     	; 0x2804 <_Z12audio_visualPv+0x26>
    27fa:	c1 14       	cp	r12, r1
    27fc:	d1 04       	cpc	r13, r1
    27fe:	21 f4       	brne	.+8      	; 0x2808 <_Z12audio_visualPv+0x2a>
    2800:	c0 e0       	ldi	r28, 0x00	; 0
    2802:	03 c0       	rjmp	.+6      	; 0x280a <_Z12audio_visualPv+0x2c>
    2804:	c0 e0       	ldi	r28, 0x00	; 0
    2806:	01 c0       	rjmp	.+2      	; 0x280a <_Z12audio_visualPv+0x2c>
    2808:	c1 e0       	ldi	r28, 0x01	; 1
     

        if (Timers.lucke_filter_time.vrednost() > 100 && mikrofon_detect ) // AUDIO_M machine
    280a:	84 e7       	ldi	r24, 0x74	; 116
    280c:	93 e1       	ldi	r25, 0x13	; 19
    280e:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    2812:	65 36       	cpi	r22, 0x65	; 101
    2814:	71 05       	cpc	r23, r1
    2816:	81 05       	cpc	r24, r1
    2818:	91 05       	cpc	r25, r1
    281a:	18 f0       	brcs	.+6      	; 0x2822 <_Z12audio_visualPv+0x44>
    281c:	c1 11       	cpse	r28, r1
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <_Z12audio_visualPv+0x48>
    2820:	03 c0       	rjmp	.+6      	; 0x2828 <_Z12audio_visualPv+0x4a>
    2822:	c0 e0       	ldi	r28, 0x00	; 0
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <_Z12audio_visualPv+0x4a>
    2826:	c1 e0       	ldi	r28, 0x01	; 1
    2828:	cc 23       	and	r28, r28
    282a:	09 f4       	brne	.+2      	; 0x282e <_Z12audio_visualPv+0x50>
    282c:	a3 c0       	rjmp	.+326    	; 0x2974 <_Z12audio_visualPv+0x196>
        {
            Timers.lucke_filter_time.ponastavi();
    282e:	84 e7       	ldi	r24, 0x74	; 116
    2830:	93 e1       	ldi	r25, 0x13	; 19
    2832:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
            static uint8_t barva_selekt = 0;
			barva_selekt += 1 % LENGHT; 
    2836:	80 91 03 13 	lds	r24, 0x1303	; 0x801303 <_ZZ12audio_visualPvE12barva_selekt>
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 03 13 	sts	0x1303, r24	; 0x801303 <_ZZ12audio_visualPvE12barva_selekt>
            switch (trenutni_audio_mode)
    2840:	80 91 65 13 	lds	r24, 0x1365	; 0x801365 <AUSYS_vars>
    2844:	90 91 66 13 	lds	r25, 0x1366	; 0x801366 <AUSYS_vars+0x1>
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	91 05       	cpc	r25, r1
    284c:	c9 f1       	breq	.+114    	; 0x28c0 <_Z12audio_visualPv+0xe2>
    284e:	40 f0       	brcs	.+16     	; 0x2860 <_Z12audio_visualPv+0x82>
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <_Z12audio_visualPv+0x7a>
    2856:	55 c0       	rjmp	.+170    	; 0x2902 <_Z12audio_visualPv+0x124>
    2858:	04 97       	sbiw	r24, 0x04	; 4
    285a:	09 f4       	brne	.+2      	; 0x285e <_Z12audio_visualPv+0x80>
    285c:	73 c0       	rjmp	.+230    	; 0x2944 <_Z12audio_visualPv+0x166>
    285e:	8a c0       	rjmp	.+276    	; 0x2974 <_Z12audio_visualPv+0x196>
            {

            case NORMAL_FADE: //Prizig in fade izklop
			    deleteTask(fade_control);                        
    2860:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <fade_control>
    2864:	90 91 09 13 	lds	r25, 0x1309	; 0x801309 <fade_control+0x1>
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	49 f0       	breq	.+18     	; 0x287e <_Z12audio_visualPv+0xa0>
    286c:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    2870:	10 92 09 13 	sts	0x1309, r1	; 0x801309 <fade_control+0x1>
    2874:	10 92 08 13 	sts	0x1308, r1	; 0x801308 <fade_control>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	90 d8       	rcall	.-3808   	; 0x199e <vTaskDelay>
                cr_fade_tsk(fade_task, "Normal Fade", barva_selekt, fade_control);
    287e:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <fade_control>
    2882:	90 91 09 13 	lds	r25, 0x1309	; 0x801309 <fade_control+0x1>
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	49 f0       	breq	.+18     	; 0x289c <_Z12audio_visualPv+0xbe>
    288a:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    288e:	10 92 09 13 	sts	0x1309, r1	; 0x801309 <fade_control+0x1>
    2892:	10 92 08 13 	sts	0x1308, r1	; 0x801308 <fade_control>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	81 d8       	rcall	.-3838   	; 0x199e <vTaskDelay>
    289c:	0f 2e       	mov	r0, r31
    289e:	f8 e0       	ldi	r31, 0x08	; 8
    28a0:	ef 2e       	mov	r14, r31
    28a2:	f3 e1       	ldi	r31, 0x13	; 19
    28a4:	ff 2e       	mov	r15, r31
    28a6:	f0 2d       	mov	r31, r0
    28a8:	03 e0       	ldi	r16, 0x03	; 3
    28aa:	23 e0       	ldi	r18, 0x03	; 3
    28ac:	33 e1       	ldi	r19, 0x13	; 19
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	69 e3       	ldi	r22, 0x39	; 57
    28b4:	72 e0       	ldi	r23, 0x02	; 2
    28b6:	8c ea       	ldi	r24, 0xAC	; 172
    28b8:	97 e1       	ldi	r25, 0x17	; 23
    28ba:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
                break;
    28be:	5a c0       	rjmp	.+180    	; 0x2974 <_Z12audio_visualPv+0x196>

            case COLOR_FADE: //Prehod iz trenutne barve v zeljeno
                cr_fade_tsk(Color_Fade_task, "Color shift", barva_selekt, color_fade_control);
    28c0:	80 91 06 13 	lds	r24, 0x1306	; 0x801306 <color_fade_control>
    28c4:	90 91 07 13 	lds	r25, 0x1307	; 0x801307 <color_fade_control+0x1>
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	49 f0       	breq	.+18     	; 0x28de <_Z12audio_visualPv+0x100>
    28cc:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    28d0:	10 92 07 13 	sts	0x1307, r1	; 0x801307 <color_fade_control+0x1>
    28d4:	10 92 06 13 	sts	0x1306, r1	; 0x801306 <color_fade_control>
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	60 d8       	rcall	.-3904   	; 0x199e <vTaskDelay>
    28de:	0f 2e       	mov	r0, r31
    28e0:	f6 e0       	ldi	r31, 0x06	; 6
    28e2:	ef 2e       	mov	r14, r31
    28e4:	f3 e1       	ldi	r31, 0x13	; 19
    28e6:	ff 2e       	mov	r15, r31
    28e8:	f0 2d       	mov	r31, r0
    28ea:	03 e0       	ldi	r16, 0x03	; 3
    28ec:	23 e0       	ldi	r18, 0x03	; 3
    28ee:	33 e1       	ldi	r19, 0x13	; 19
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	65 e4       	ldi	r22, 0x45	; 69
    28f6:	72 e0       	ldi	r23, 0x02	; 2
    28f8:	85 ef       	ldi	r24, 0xF5	; 245
    28fa:	97 e1       	ldi	r25, 0x17	; 23
    28fc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
                break;
    2900:	39 c0       	rjmp	.+114    	; 0x2974 <_Z12audio_visualPv+0x196>

            case Fade_Breathe: //Dihalni nacin
                cr_fade_tsk(Fade_Breathe_Task, "Breathe Fade", barva_selekt, Breathe_control);
    2902:	80 91 04 13 	lds	r24, 0x1304	; 0x801304 <Breathe_control>
    2906:	90 91 05 13 	lds	r25, 0x1305	; 0x801305 <Breathe_control+0x1>
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	49 f0       	breq	.+18     	; 0x2920 <_Z12audio_visualPv+0x142>
    290e:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    2912:	10 92 05 13 	sts	0x1305, r1	; 0x801305 <Breathe_control+0x1>
    2916:	10 92 04 13 	sts	0x1304, r1	; 0x801304 <Breathe_control>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	3f d8       	rcall	.-3970   	; 0x199e <vTaskDelay>
    2920:	0f 2e       	mov	r0, r31
    2922:	f4 e0       	ldi	r31, 0x04	; 4
    2924:	ef 2e       	mov	r14, r31
    2926:	f3 e1       	ldi	r31, 0x13	; 19
    2928:	ff 2e       	mov	r15, r31
    292a:	f0 2d       	mov	r31, r0
    292c:	03 e0       	ldi	r16, 0x03	; 3
    292e:	23 e0       	ldi	r18, 0x03	; 3
    2930:	33 e1       	ldi	r19, 0x13	; 19
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	61 e5       	ldi	r22, 0x51	; 81
    2938:	72 e0       	ldi	r23, 0x02	; 2
    293a:	8b e0       	ldi	r24, 0x0B	; 11
    293c:	98 e1       	ldi	r25, 0x18	; 24
    293e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xTaskCreate>
                break;
    2942:	18 c0       	rjmp	.+48     	; 0x2974 <_Z12audio_visualPv+0x196>

            case OFF_A:
                holdTASK(audio_system_control); //Ne rabi hoditi v task ce je izkljucen
    2944:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    2948:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    294c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <eTaskGetState>
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	41 f0       	breq	.+16     	; 0x2964 <_Z12audio_visualPv+0x186>
    2954:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    2958:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    295c:	89 2b       	or	r24, r25
    295e:	19 f4       	brne	.+6      	; 0x2966 <_Z12audio_visualPv+0x188>
    2960:	c0 e0       	ldi	r28, 0x00	; 0
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <_Z12audio_visualPv+0x188>
    2964:	c0 e0       	ldi	r28, 0x00	; 0
    2966:	cc 23       	and	r28, r28
    2968:	29 f0       	breq	.+10     	; 0x2974 <_Z12audio_visualPv+0x196>
    296a:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    296e:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
                break;
            }
        }

        vTaskDelay(1);
    2972:	96 d8       	rcall	.-3796   	; 0x1aa0 <vTaskSuspend>
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	12 d8       	rcall	.-4060   	; 0x199e <vTaskDelay>
void audio_visual(void *p) //Funkcija avdio-vizualnega sistema
{
    bool mikrofon_detect = false;
    uint16_t povprecna_glasnost = 0;

    while (true)
    297a:	33 cf       	rjmp	.-410    	; 0x27e2 <_Z12audio_visualPv+0x4>

0000297c <_Z15AVG_Volume_Meriv>:
    static unsigned long vsota_branj = 0;
    static unsigned short st_branj = 0;
    static unsigned short max_izmerjeno = 0;


    unsigned short tr_vrednost = readANALOG(mic_pin);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	00 d7       	rcall	.+3584   	; 0x3780 <_Z10readANALOGh>
    if (tr_vrednost > max_izmerjeno)
    2980:	20 91 10 13 	lds	r18, 0x1310	; 0x801310 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
    2984:	30 91 11 13 	lds	r19, 0x1311	; 0x801311 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    2988:	28 17       	cp	r18, r24
    298a:	39 07       	cpc	r19, r25
    298c:	20 f4       	brcc	.+8      	; 0x2996 <_Z15AVG_Volume_Meriv+0x1a>
        max_izmerjeno = tr_vrednost;
    298e:	90 93 11 13 	sts	0x1311, r25	; 0x801311 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    2992:	80 93 10 13 	sts	0x1310, r24	; 0x801310 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>

    if (Timers.average_v_timer.vrednost() >= 20)
    2996:	8d e8       	ldi	r24, 0x8D	; 141
    2998:	93 e1       	ldi	r25, 0x13	; 19
    299a:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    299e:	64 31       	cpi	r22, 0x14	; 20
    29a0:	71 05       	cpc	r23, r1
    29a2:	81 05       	cpc	r24, r1
    29a4:	91 05       	cpc	r25, r1
    29a6:	48 f1       	brcs	.+82     	; 0x29fa <_Z15AVG_Volume_Meriv+0x7e>
    {
        vsota_branj += max_izmerjeno;
    29a8:	20 91 10 13 	lds	r18, 0x1310	; 0x801310 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
    29ac:	30 91 11 13 	lds	r19, 0x1311	; 0x801311 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    29b0:	80 91 0c 13 	lds	r24, 0x130C	; 0x80130c <_ZZ15AVG_Volume_MerivE11vsota_branj>
    29b4:	90 91 0d 13 	lds	r25, 0x130D	; 0x80130d <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    29b8:	a0 91 0e 13 	lds	r26, 0x130E	; 0x80130e <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    29bc:	b0 91 0f 13 	lds	r27, 0x130F	; 0x80130f <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
    29c0:	82 0f       	add	r24, r18
    29c2:	93 1f       	adc	r25, r19
    29c4:	a1 1d       	adc	r26, r1
    29c6:	b1 1d       	adc	r27, r1
    29c8:	80 93 0c 13 	sts	0x130C, r24	; 0x80130c <_ZZ15AVG_Volume_MerivE11vsota_branj>
    29cc:	90 93 0d 13 	sts	0x130D, r25	; 0x80130d <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    29d0:	a0 93 0e 13 	sts	0x130E, r26	; 0x80130e <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    29d4:	b0 93 0f 13 	sts	0x130F, r27	; 0x80130f <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
        st_branj++;
    29d8:	80 91 0a 13 	lds	r24, 0x130A	; 0x80130a <_ZZ15AVG_Volume_MerivE8st_branj>
    29dc:	90 91 0b 13 	lds	r25, 0x130B	; 0x80130b <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	90 93 0b 13 	sts	0x130B, r25	; 0x80130b <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    29e6:	80 93 0a 13 	sts	0x130A, r24	; 0x80130a <_ZZ15AVG_Volume_MerivE8st_branj>
        max_izmerjeno = 0;
    29ea:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    29ee:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
        Timers.average_v_timer.ponastavi();
    29f2:	8d e8       	ldi	r24, 0x8D	; 141
    29f4:	93 e1       	ldi	r25, 0x13	; 19
    29f6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    }

    if (st_branj >= 50)
    29fa:	20 91 0a 13 	lds	r18, 0x130A	; 0x80130a <_ZZ15AVG_Volume_MerivE8st_branj>
    29fe:	30 91 0b 13 	lds	r19, 0x130B	; 0x80130b <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    2a02:	22 33       	cpi	r18, 0x32	; 50
    2a04:	31 05       	cpc	r19, r1
    2a06:	f0 f0       	brcs	.+60     	; 0x2a44 <_Z15AVG_Volume_Meriv+0xc8>
    {
        uint16_t tmp = vsota_branj / st_branj;
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	60 91 0c 13 	lds	r22, 0x130C	; 0x80130c <_ZZ15AVG_Volume_MerivE11vsota_branj>
    2a10:	70 91 0d 13 	lds	r23, 0x130D	; 0x80130d <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    2a14:	80 91 0e 13 	lds	r24, 0x130E	; 0x80130e <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    2a18:	90 91 0f 13 	lds	r25, 0x130F	; 0x80130f <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
    2a1c:	0e 94 00 20 	call	0x4000	; 0x4000 <__udivmodsi4>
        vsota_branj = 0;
    2a20:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <_ZZ15AVG_Volume_MerivE11vsota_branj>
    2a24:	10 92 0d 13 	sts	0x130D, r1	; 0x80130d <_ZZ15AVG_Volume_MerivE11vsota_branj+0x1>
    2a28:	10 92 0e 13 	sts	0x130E, r1	; 0x80130e <_ZZ15AVG_Volume_MerivE11vsota_branj+0x2>
    2a2c:	10 92 0f 13 	sts	0x130F, r1	; 0x80130f <_ZZ15AVG_Volume_MerivE11vsota_branj+0x3>
        st_branj = 0;
    2a30:	10 92 0b 13 	sts	0x130B, r1	; 0x80130b <_ZZ15AVG_Volume_MerivE8st_branj+0x1>
    2a34:	10 92 0a 13 	sts	0x130A, r1	; 0x80130a <_ZZ15AVG_Volume_MerivE8st_branj>
        max_izmerjeno = 0;
    2a38:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <_ZZ15AVG_Volume_MerivE13max_izmerjeno+0x1>
    2a3c:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <_ZZ15AVG_Volume_MerivE13max_izmerjeno>
        return tmp;
    2a40:	c9 01       	movw	r24, r18
    2a42:	08 95       	ret
    }
    return 0;
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
}
    2a48:	08 95       	ret

00002a4a <_Z24deleteALL_subAUDIO_tasksv>:
    holdTASK(Breathe_control);
}

void deleteALL_subAUDIO_tasks()
{
    deleteTask(fade_control);
    2a4a:	80 91 08 13 	lds	r24, 0x1308	; 0x801308 <fade_control>
    2a4e:	90 91 09 13 	lds	r25, 0x1309	; 0x801309 <fade_control+0x1>
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	51 f0       	breq	.+20     	; 0x2a6a <_Z24deleteALL_subAUDIO_tasksv+0x20>
    2a56:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    2a5a:	10 92 09 13 	sts	0x1309, r1	; 0x801309 <fade_control+0x1>
    2a5e:	10 92 08 13 	sts	0x1308, r1	; 0x801308 <fade_control>
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    deleteTask(color_fade_control);
    2a6a:	80 91 06 13 	lds	r24, 0x1306	; 0x801306 <color_fade_control>
    2a6e:	90 91 07 13 	lds	r25, 0x1307	; 0x801307 <color_fade_control+0x1>
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	51 f0       	breq	.+20     	; 0x2a8a <_Z24deleteALL_subAUDIO_tasksv+0x40>
    2a76:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    2a7a:	10 92 07 13 	sts	0x1307, r1	; 0x801307 <color_fade_control+0x1>
    2a7e:	10 92 06 13 	sts	0x1306, r1	; 0x801306 <color_fade_control>
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    deleteTask(Breathe_control);
    2a8a:	80 91 04 13 	lds	r24, 0x1304	; 0x801304 <Breathe_control>
    2a8e:	90 91 05 13 	lds	r25, 0x1305	; 0x801305 <Breathe_control+0x1>
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	51 f0       	breq	.+20     	; 0x2aaa <_Z24deleteALL_subAUDIO_tasksv+0x60>
    2a96:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
    2a9a:	10 92 05 13 	sts	0x1305, r1	; 0x801305 <Breathe_control+0x1>
    2a9e:	10 92 04 13 	sts	0x1304, r1	; 0x801304 <Breathe_control>
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    delay_FRTOS(15);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <vTaskDelay>
    2ab2:	08 95       	ret

00002ab4 <_Z9writeTRAKv>:
}

void writeTRAK()
{
    2ab4:	cf 92       	push	r12
    2ab6:	df 92       	push	r13
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    writePWM(r_trak, 'B', (float)tr_r * (float)tr_bright / 255.00);
    2ac0:	c5 e6       	ldi	r28, 0x65	; 101
    2ac2:	d3 e1       	ldi	r29, 0x13	; 19
    2ac4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ac6:	7b 81       	ldd	r23, Y+3	; 0x03
    2ac8:	07 2e       	mov	r0, r23
    2aca:	00 0c       	add	r0, r0
    2acc:	88 0b       	sbc	r24, r24
    2ace:	99 0b       	sbc	r25, r25
    2ad0:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2ad4:	6b 01       	movw	r12, r22
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	68 85       	ldd	r22, Y+8	; 0x08
    2ada:	79 85       	ldd	r23, Y+9	; 0x09
    2adc:	07 2e       	mov	r0, r23
    2ade:	00 0c       	add	r0, r0
    2ae0:	88 0b       	sbc	r24, r24
    2ae2:	99 0b       	sbc	r25, r25
    2ae4:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
    2aec:	c7 01       	movw	r24, r14
    2aee:	b6 01       	movw	r22, r12
    2af0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	53 e4       	ldi	r21, 0x43	; 67
    2afc:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__divsf3>
    2b00:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__fixunssfsi>
    2b04:	46 2f       	mov	r20, r22
    2b06:	62 e4       	ldi	r22, 0x42	; 66
    2b08:	84 e0       	ldi	r24, 0x04	; 4
    2b0a:	4c d6       	rcall	.+3224   	; 0x37a4 <_Z8writePWMhch>
    writePWM(z_trak, 'B', (float)tr_z * (float)tr_bright / 255.00);
    2b0c:	6c 81       	ldd	r22, Y+4	; 0x04
    2b0e:	7d 81       	ldd	r23, Y+5	; 0x05
    2b10:	07 2e       	mov	r0, r23
    2b12:	00 0c       	add	r0, r0
    2b14:	88 0b       	sbc	r24, r24
    2b16:	99 0b       	sbc	r25, r25
    2b18:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2b1c:	6b 01       	movw	r12, r22
    2b1e:	7c 01       	movw	r14, r24
    2b20:	68 85       	ldd	r22, Y+8	; 0x08
    2b22:	79 85       	ldd	r23, Y+9	; 0x09
    2b24:	07 2e       	mov	r0, r23
    2b26:	00 0c       	add	r0, r0
    2b28:	88 0b       	sbc	r24, r24
    2b2a:	99 0b       	sbc	r25, r25
    2b2c:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2b30:	9b 01       	movw	r18, r22
    2b32:	ac 01       	movw	r20, r24
    2b34:	c7 01       	movw	r24, r14
    2b36:	b6 01       	movw	r22, r12
    2b38:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	53 e4       	ldi	r21, 0x43	; 67
    2b44:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__divsf3>
    2b48:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__fixunssfsi>
    2b4c:	46 2f       	mov	r20, r22
    2b4e:	62 e4       	ldi	r22, 0x42	; 66
    2b50:	85 e0       	ldi	r24, 0x05	; 5
    2b52:	28 d6       	rcall	.+3152   	; 0x37a4 <_Z8writePWMhch>
    writePWM(m_trak, 'B', (float)tr_m * (float)tr_bright / 255.00);
    2b54:	6e 81       	ldd	r22, Y+6	; 0x06
    2b56:	7f 81       	ldd	r23, Y+7	; 0x07
    2b58:	07 2e       	mov	r0, r23
    2b5a:	00 0c       	add	r0, r0
    2b5c:	88 0b       	sbc	r24, r24
    2b5e:	99 0b       	sbc	r25, r25
    2b60:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2b64:	6b 01       	movw	r12, r22
    2b66:	7c 01       	movw	r14, r24
    2b68:	68 85       	ldd	r22, Y+8	; 0x08
    2b6a:	79 85       	ldd	r23, Y+9	; 0x09
    2b6c:	07 2e       	mov	r0, r23
    2b6e:	00 0c       	add	r0, r0
    2b70:	88 0b       	sbc	r24, r24
    2b72:	99 0b       	sbc	r25, r25
    2b74:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatsisf>
    2b78:	9b 01       	movw	r18, r22
    2b7a:	ac 01       	movw	r20, r24
    2b7c:	c7 01       	movw	r24, r14
    2b7e:	b6 01       	movw	r22, r12
    2b80:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	53 e4       	ldi	r21, 0x43	; 67
    2b8c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__divsf3>
    2b90:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__fixunssfsi>
    2b94:	46 2f       	mov	r20, r22
    2b96:	62 e4       	ldi	r22, 0x42	; 66
    2b98:	86 e0       	ldi	r24, 0x06	; 6
    2b9a:	04 d6       	rcall	.+3080   	; 0x37a4 <_Z8writePWMhch>
}
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	08 95       	ret

00002baa <_Z11flash_stripv>:

void flash_strip() //Utripanje (Izhod iz scroll stata / menjava mikrofona)
{
    2baa:	cf 93       	push	r28
	free(AUSYS_vars.TR_BARVA);
    2bac:	87 e6       	ldi	r24, 0x67	; 103
    2bae:	93 e1       	ldi	r25, 0x13	; 19
    2bb0:	0e 94 e5 20 	call	0x41ca	; 0x41ca <free>
	memcpy(AUSYS_vars.TR_BARVA, mozne_barve.barvni_ptr[BELA], 3);
    2bb4:	a0 91 55 13 	lds	r26, 0x1355	; 0x801355 <mozne_barve+0x18>
    2bb8:	b0 91 56 13 	lds	r27, 0x1356	; 0x801356 <mozne_barve+0x19>
    2bbc:	e7 e6       	ldi	r30, 0x67	; 103
    2bbe:	f3 e1       	ldi	r31, 0x13	; 19
    2bc0:	8d 91       	ld	r24, X+
    2bc2:	9c 91       	ld	r25, X
    2bc4:	11 97       	sbiw	r26, 0x01	; 1
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	12 96       	adiw	r26, 0x02	; 2
    2bcc:	8c 91       	ld	r24, X
    2bce:	82 83       	std	Z+2, r24	; 0x02
    for (uint8_t i = 0; i < 5; i++)
    2bd0:	c0 e0       	ldi	r28, 0x00	; 0
    2bd2:	c5 30       	cpi	r28, 0x05	; 5
    2bd4:	10 f5       	brcc	.+68     	; 0x2c1a <_Z11flash_stripv+0x70>
    {
        writeOUTPUT(r_trak,'B', 0);
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	62 e4       	ldi	r22, 0x42	; 66
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	71 d5       	rcall	.+2786   	; 0x36c0 <_Z11writeOUTPUThcb>
        writeOUTPUT(z_trak,'B', 0);
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	62 e4       	ldi	r22, 0x42	; 66
    2be2:	85 e0       	ldi	r24, 0x05	; 5
    2be4:	6d d5       	rcall	.+2778   	; 0x36c0 <_Z11writeOUTPUThcb>
        writeOUTPUT(m_trak,'B', 0);
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	62 e4       	ldi	r22, 0x42	; 66
    2bea:	86 e0       	ldi	r24, 0x06	; 6
    2bec:	69 d5       	rcall	.+2770   	; 0x36c0 <_Z11writeOUTPUThcb>
        delay_FRTOS(125);
    2bee:	87 e0       	ldi	r24, 0x07	; 7
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
        writeOUTPUT(r_trak,'B', 1);
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	62 e4       	ldi	r22, 0x42	; 66
    2bfa:	84 e0       	ldi	r24, 0x04	; 4
    2bfc:	61 d5       	rcall	.+2754   	; 0x36c0 <_Z11writeOUTPUThcb>
        writeOUTPUT(z_trak,'B', 1);
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	62 e4       	ldi	r22, 0x42	; 66
    2c02:	85 e0       	ldi	r24, 0x05	; 5
    2c04:	5d d5       	rcall	.+2746   	; 0x36c0 <_Z11writeOUTPUThcb>
        writeOUTPUT(m_trak,'B', 1);
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	62 e4       	ldi	r22, 0x42	; 66
    2c0a:	86 e0       	ldi	r24, 0x06	; 6
    2c0c:	59 d5       	rcall	.+2738   	; 0x36c0 <_Z11writeOUTPUThcb>
    2c0e:	87 e0       	ldi	r24, 0x07	; 7
        delay_FRTOS(125);
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    2c16:	cf 5f       	subi	r28, 0xFF	; 255

void flash_strip() //Utripanje (Izhod iz scroll stata / menjava mikrofona)
{
	free(AUSYS_vars.TR_BARVA);
	memcpy(AUSYS_vars.TR_BARVA, mozne_barve.barvni_ptr[BELA], 3);
    for (uint8_t i = 0; i < 5; i++)
    2c18:	dc cf       	rjmp	.-72     	; 0x2bd2 <_Z11flash_stripv+0x28>
    2c1a:	cf 91       	pop	r28
        writeOUTPUT(r_trak,'B', 1);
        writeOUTPUT(z_trak,'B', 1);
        writeOUTPUT(m_trak,'B', 1);
        delay_FRTOS(125);
    }
}
    2c1c:	08 95       	ret

00002c1e <_Z16color_fade_functPh>:
    2c1e:	cf 92       	push	r12

void color_fade_funct(uint8_t *BARVA)
{
    2c20:	df 92       	push	r13
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	ec 01       	movw	r28, r24
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    2c2e:	00 91 67 13 	lds	r16, 0x1367	; 0x801367 <AUSYS_vars+0x2>
    2c32:	10 91 68 13 	lds	r17, 0x1368	; 0x801368 <AUSYS_vars+0x3>
    2c36:	e8 81       	ld	r30, Y
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	3c 96       	adiw	r30, 0x0c	; 12
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	e3 5c       	subi	r30, 0xC3	; 195
    2c42:	fc 4e       	sbci	r31, 0xEC	; 236
    2c44:	01 90       	ld	r0, Z+
    2c46:	f0 81       	ld	r31, Z
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	08 17       	cp	r16, r24
    2c50:	19 07       	cpc	r17, r25
    2c52:	99 f4       	brne	.+38     	; 0x2c7a <_Z16color_fade_functPh+0x5c>
    2c54:	40 91 69 13 	lds	r20, 0x1369	; 0x801369 <AUSYS_vars+0x4>
    2c58:	50 91 6a 13 	lds	r21, 0x136A	; 0x80136a <AUSYS_vars+0x5>
    2c5c:	21 81       	ldd	r18, Z+1	; 0x01
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	42 17       	cp	r20, r18
    2c62:	53 07       	cpc	r21, r19
    2c64:	51 f4       	brne	.+20     	; 0x2c7a <_Z16color_fade_functPh+0x5c>
    2c66:	40 91 6b 13 	lds	r20, 0x136B	; 0x80136b <AUSYS_vars+0x6>
    2c6a:	50 91 6c 13 	lds	r21, 0x136C	; 0x80136c <AUSYS_vars+0x7>
    2c6e:	22 81       	ldd	r18, Z+2	; 0x02
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	42 17       	cp	r20, r18
    2c74:	53 07       	cpc	r21, r19
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <_Z16color_fade_functPh+0x5c>
    2c78:	ee c0       	rjmp	.+476    	; 0x2e56 <_Z16color_fade_functPh+0x238>
    {
        char smer[3] = {0, 0, 0};
        mozne_barve.barvni_ptr[*BARVA][0] >= tr_r ? smer[0] = 1 : smer[0] = -1;
    2c7a:	80 17       	cp	r24, r16
    2c7c:	91 07       	cpc	r25, r17
    2c7e:	14 f0       	brlt	.+4      	; 0x2c84 <_Z16color_fade_functPh+0x66>
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <_Z16color_fade_functPh+0x68>
    2c84:	4f ef       	ldi	r20, 0xFF	; 255
        mozne_barve.barvni_ptr[*BARVA][1] >= tr_z ? smer[1] = 1 : smer[1] = -1;
    2c86:	81 81       	ldd	r24, Z+1	; 0x01
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	c0 90 69 13 	lds	r12, 0x1369	; 0x801369 <AUSYS_vars+0x4>
    2c8e:	d0 90 6a 13 	lds	r13, 0x136A	; 0x80136a <AUSYS_vars+0x5>
    2c92:	8c 15       	cp	r24, r12
    2c94:	9d 05       	cpc	r25, r13
    2c96:	14 f0       	brlt	.+4      	; 0x2c9c <_Z16color_fade_functPh+0x7e>
    2c98:	21 e0       	ldi	r18, 0x01	; 1
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <_Z16color_fade_functPh+0x80>
    2c9c:	2f ef       	ldi	r18, 0xFF	; 255
        mozne_barve.barvni_ptr[*BARVA][2] >= tr_m ? smer[2] = 1 : smer[2] = -1;
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a0 91 6b 13 	lds	r26, 0x136B	; 0x80136b <AUSYS_vars+0x6>
    2ca6:	b0 91 6c 13 	lds	r27, 0x136C	; 0x80136c <AUSYS_vars+0x7>
    2caa:	8a 17       	cp	r24, r26
    2cac:	9b 07       	cpc	r25, r27
    2cae:	14 f0       	brlt	.+4      	; 0x2cb4 <_Z16color_fade_functPh+0x96>
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <_Z16color_fade_functPh+0x98>
    2cb4:	9f ef       	ldi	r25, 0xFF	; 255

        tr_r = tr_r + (10 * smer[0]);
    2cb6:	f4 2e       	mov	r15, r20
    2cb8:	04 2e       	mov	r0, r20
    2cba:	00 0c       	add	r0, r0
    2cbc:	55 0b       	sbc	r21, r21
    2cbe:	ba 01       	movw	r22, r20
    2cc0:	66 0f       	add	r22, r22
    2cc2:	77 1f       	adc	r23, r23
    2cc4:	44 0f       	add	r20, r20
    2cc6:	55 1f       	adc	r21, r21
    2cc8:	44 0f       	add	r20, r20
    2cca:	55 1f       	adc	r21, r21
    2ccc:	44 0f       	add	r20, r20
    2cce:	55 1f       	adc	r21, r21
    2cd0:	64 0f       	add	r22, r20
    2cd2:	75 1f       	adc	r23, r21
    2cd4:	60 0f       	add	r22, r16
    2cd6:	71 1f       	adc	r23, r17
    2cd8:	e5 e6       	ldi	r30, 0x65	; 101
    2cda:	f3 e1       	ldi	r31, 0x13	; 19
    2cdc:	73 83       	std	Z+3, r23	; 0x03
    2cde:	62 83       	std	Z+2, r22	; 0x02
        tr_z = tr_z + (10 * smer[1]);
    2ce0:	12 2f       	mov	r17, r18
    2ce2:	02 2e       	mov	r0, r18
    2ce4:	00 0c       	add	r0, r0
    2ce6:	33 0b       	sbc	r19, r19
    2ce8:	a9 01       	movw	r20, r18
    2cea:	44 0f       	add	r20, r20
    2cec:	55 1f       	adc	r21, r21
    2cee:	22 0f       	add	r18, r18
    2cf0:	33 1f       	adc	r19, r19
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	22 0f       	add	r18, r18
    2cf8:	33 1f       	adc	r19, r19
    2cfa:	24 0f       	add	r18, r20
    2cfc:	35 1f       	adc	r19, r21
    2cfe:	a6 01       	movw	r20, r12
    2d00:	42 0f       	add	r20, r18
    2d02:	53 1f       	adc	r21, r19
    2d04:	55 83       	std	Z+5, r21	; 0x05
    2d06:	44 83       	std	Z+4, r20	; 0x04
        tr_m = tr_m + (10 * smer[2]);
    2d08:	09 2f       	mov	r16, r25
    2d0a:	89 2f       	mov	r24, r25
    2d0c:	99 0f       	add	r25, r25
    2d0e:	99 0b       	sbc	r25, r25
    2d10:	6c 01       	movw	r12, r24
    2d12:	cc 0c       	add	r12, r12
    2d14:	dd 1c       	adc	r13, r13
    2d16:	9c 01       	movw	r18, r24
    2d18:	22 0f       	add	r18, r18
    2d1a:	33 1f       	adc	r19, r19
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	22 0f       	add	r18, r18
    2d22:	33 1f       	adc	r19, r19
    2d24:	c6 01       	movw	r24, r12
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	8a 0f       	add	r24, r26
    2d2c:	9b 1f       	adc	r25, r27
    2d2e:	97 83       	std	Z+7, r25	; 0x07
    2d30:	86 83       	std	Z+6, r24	; 0x06

        //Preveri prenihaj:

        smer[0] == 1 && tr_r > mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL; //Ce je bila trenutna barva pod zeljeno ali na zeljeni in je zdaj trenudna nad zeljeno, se nastavi na zeljeno (prenihaj)
    2d32:	21 e0       	ldi	r18, 0x01	; 1
    2d34:	f2 12       	cpse	r15, r18
    2d36:	13 c0       	rjmp	.+38     	; 0x2d5e <_Z16color_fade_functPh+0x140>
    2d38:	e8 81       	ld	r30, Y
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	3c 96       	adiw	r30, 0x0c	; 12
    2d3e:	ee 0f       	add	r30, r30
    2d40:	ff 1f       	adc	r31, r31
    2d42:	e3 5c       	subi	r30, 0xC3	; 195
    2d44:	fc 4e       	sbci	r31, 0xEC	; 236
    2d46:	01 90       	ld	r0, Z+
    2d48:	f0 81       	ld	r31, Z
    2d4a:	e0 2d       	mov	r30, r0
    2d4c:	20 81       	ld	r18, Z
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	26 17       	cp	r18, r22
    2d52:	37 07       	cpc	r19, r23
    2d54:	24 f4       	brge	.+8      	; 0x2d5e <_Z16color_fade_functPh+0x140>
    2d56:	30 93 68 13 	sts	0x1368, r19	; 0x801368 <AUSYS_vars+0x3>
    2d5a:	20 93 67 13 	sts	0x1367, r18	; 0x801367 <AUSYS_vars+0x2>
        smer[1] == 1 && tr_z > mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    2d5e:	11 30       	cpi	r17, 0x01	; 1
    2d60:	99 f4       	brne	.+38     	; 0x2d88 <_Z16color_fade_functPh+0x16a>
    2d62:	e8 81       	ld	r30, Y
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	3c 96       	adiw	r30, 0x0c	; 12
    2d68:	ee 0f       	add	r30, r30
    2d6a:	ff 1f       	adc	r31, r31
    2d6c:	e3 5c       	subi	r30, 0xC3	; 195
    2d6e:	fc 4e       	sbci	r31, 0xEC	; 236
    2d70:	01 90       	ld	r0, Z+
    2d72:	f0 81       	ld	r31, Z
    2d74:	e0 2d       	mov	r30, r0
    2d76:	21 81       	ldd	r18, Z+1	; 0x01
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	24 17       	cp	r18, r20
    2d7c:	35 07       	cpc	r19, r21
    2d7e:	24 f4       	brge	.+8      	; 0x2d88 <_Z16color_fade_functPh+0x16a>
    2d80:	30 93 6a 13 	sts	0x136A, r19	; 0x80136a <AUSYS_vars+0x5>
    2d84:	20 93 69 13 	sts	0x1369, r18	; 0x801369 <AUSYS_vars+0x4>
        smer[2] == 1 && tr_m > mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    2d88:	01 30       	cpi	r16, 0x01	; 1
    2d8a:	99 f4       	brne	.+38     	; 0x2db2 <_Z16color_fade_functPh+0x194>
    2d8c:	e8 81       	ld	r30, Y
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	3c 96       	adiw	r30, 0x0c	; 12
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	e3 5c       	subi	r30, 0xC3	; 195
    2d98:	fc 4e       	sbci	r31, 0xEC	; 236
    2d9a:	01 90       	ld	r0, Z+
    2d9c:	f0 81       	ld	r31, Z
    2d9e:	e0 2d       	mov	r30, r0
    2da0:	22 81       	ldd	r18, Z+2	; 0x02
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	28 17       	cp	r18, r24
    2da6:	39 07       	cpc	r19, r25
    2da8:	24 f4       	brge	.+8      	; 0x2db2 <_Z16color_fade_functPh+0x194>
    2daa:	30 93 6c 13 	sts	0x136C, r19	; 0x80136c <AUSYS_vars+0x7>
    2dae:	20 93 6b 13 	sts	0x136B, r18	; 0x80136b <AUSYS_vars+0x6>

        smer[0] == -1 && tr_r < mozne_barve.barvni_ptr[*BARVA][0] ? tr_r = mozne_barve.barvni_ptr[*BARVA][0] : NULL;
    2db2:	8f ef       	ldi	r24, 0xFF	; 255
    2db4:	f8 12       	cpse	r15, r24
    2db6:	17 c0       	rjmp	.+46     	; 0x2de6 <_Z16color_fade_functPh+0x1c8>
    2db8:	20 91 67 13 	lds	r18, 0x1367	; 0x801367 <AUSYS_vars+0x2>
    2dbc:	30 91 68 13 	lds	r19, 0x1368	; 0x801368 <AUSYS_vars+0x3>
    2dc0:	e8 81       	ld	r30, Y
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	3c 96       	adiw	r30, 0x0c	; 12
    2dc6:	ee 0f       	add	r30, r30
    2dc8:	ff 1f       	adc	r31, r31
    2dca:	e3 5c       	subi	r30, 0xC3	; 195
    2dcc:	fc 4e       	sbci	r31, 0xEC	; 236
    2dce:	01 90       	ld	r0, Z+
    2dd0:	f0 81       	ld	r31, Z
    2dd2:	e0 2d       	mov	r30, r0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	28 17       	cp	r18, r24
    2dda:	39 07       	cpc	r19, r25
    2ddc:	24 f4       	brge	.+8      	; 0x2de6 <_Z16color_fade_functPh+0x1c8>
    2dde:	90 93 68 13 	sts	0x1368, r25	; 0x801368 <AUSYS_vars+0x3>
    2de2:	80 93 67 13 	sts	0x1367, r24	; 0x801367 <AUSYS_vars+0x2>
        smer[1] == -1 && tr_z < mozne_barve.barvni_ptr[*BARVA][1] ? tr_z = mozne_barve.barvni_ptr[*BARVA][1] : NULL;
    2de6:	1f 3f       	cpi	r17, 0xFF	; 255
    2de8:	b9 f4       	brne	.+46     	; 0x2e18 <_Z16color_fade_functPh+0x1fa>
    2dea:	20 91 69 13 	lds	r18, 0x1369	; 0x801369 <AUSYS_vars+0x4>
    2dee:	30 91 6a 13 	lds	r19, 0x136A	; 0x80136a <AUSYS_vars+0x5>
    2df2:	e8 81       	ld	r30, Y
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	3c 96       	adiw	r30, 0x0c	; 12
    2df8:	ee 0f       	add	r30, r30
    2dfa:	ff 1f       	adc	r31, r31
    2dfc:	e3 5c       	subi	r30, 0xC3	; 195
    2dfe:	fc 4e       	sbci	r31, 0xEC	; 236
    2e00:	01 90       	ld	r0, Z+
    2e02:	f0 81       	ld	r31, Z
    2e04:	e0 2d       	mov	r30, r0
    2e06:	81 81       	ldd	r24, Z+1	; 0x01
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	28 17       	cp	r18, r24
    2e0c:	39 07       	cpc	r19, r25
    2e0e:	24 f4       	brge	.+8      	; 0x2e18 <_Z16color_fade_functPh+0x1fa>
    2e10:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <AUSYS_vars+0x5>
    2e14:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <AUSYS_vars+0x4>
        smer[2] == -1 && tr_m < mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;
    2e18:	0f 3f       	cpi	r16, 0xFF	; 255
    2e1a:	b9 f4       	brne	.+46     	; 0x2e4a <_Z16color_fade_functPh+0x22c>
    2e1c:	20 91 6b 13 	lds	r18, 0x136B	; 0x80136b <AUSYS_vars+0x6>
    2e20:	30 91 6c 13 	lds	r19, 0x136C	; 0x80136c <AUSYS_vars+0x7>
    2e24:	e8 81       	ld	r30, Y
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	3c 96       	adiw	r30, 0x0c	; 12
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	e3 5c       	subi	r30, 0xC3	; 195
    2e30:	fc 4e       	sbci	r31, 0xEC	; 236
    2e32:	01 90       	ld	r0, Z+
    2e34:	f0 81       	ld	r31, Z
    2e36:	e0 2d       	mov	r30, r0
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	28 17       	cp	r18, r24
    2e3e:	39 07       	cpc	r19, r25
    2e40:	24 f4       	brge	.+8      	; 0x2e4a <_Z16color_fade_functPh+0x22c>
    2e42:	90 93 6c 13 	sts	0x136C, r25	; 0x80136c <AUSYS_vars+0x7>
    2e46:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <AUSYS_vars+0x6>

        writeTRAK();
    2e4a:	34 de       	rcall	.-920    	; 0x2ab4 <_Z9writeTRAKv>
        delay_FRTOS(5);
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    }
}

void color_fade_funct(uint8_t *BARVA)
{
    while (tr_r != mozne_barve.barvni_ptr[*BARVA][0] || tr_z != mozne_barve.barvni_ptr[*BARVA][1] || tr_m != mozne_barve.barvni_ptr[*BARVA][2]) //Trenutna razlicna od zeljene
    2e54:	ec ce       	rjmp	.-552    	; 0x2c2e <_Z16color_fade_functPh+0x10>
        smer[2] == -1 && tr_m < mozne_barve.barvni_ptr[*BARVA][2] ? tr_m = mozne_barve.barvni_ptr[*BARVA][2] : NULL;

        writeTRAK();
        delay_FRTOS(5);
    }
}
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	df 90       	pop	r13
    2e62:	cf 90       	pop	r12
    2e64:	08 95       	ret

00002e66 <_Z18svetlost_mod_functch>:

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	c8 2f       	mov	r28, r24
    2e6c:	d6 2f       	mov	r29, r22
    2e6e:	8f e4       	ldi	r24, 0x4F	; 79
    2e70:	93 ec       	ldi	r25, 0xC3	; 195
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <_Z18svetlost_mod_functch+0xc>
    2e76:	00 c0       	rjmp	.+0      	; 0x2e78 <_Z18svetlost_mod_functch+0x12>
    2e78:	00 00       	nop
	_delay_ms(200);
    while (smer > 0 ? tr_bright < 255 : tr_bright > 0)
    2e7a:	1c 16       	cp	r1, r28
    2e7c:	54 f4       	brge	.+20     	; 0x2e92 <_Z18svetlost_mod_functch+0x2c>
    2e7e:	20 91 6d 13 	lds	r18, 0x136D	; 0x80136d <AUSYS_vars+0x8>
    2e82:	30 91 6e 13 	lds	r19, 0x136E	; 0x80136e <AUSYS_vars+0x9>
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	2f 3f       	cpi	r18, 0xFF	; 255
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	5c f0       	brlt	.+22     	; 0x2ea4 <_Z18svetlost_mod_functch+0x3e>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	09 c0       	rjmp	.+18     	; 0x2ea4 <_Z18svetlost_mod_functch+0x3e>
    2e92:	20 91 6d 13 	lds	r18, 0x136D	; 0x80136d <AUSYS_vars+0x8>
    2e96:	30 91 6e 13 	lds	r19, 0x136E	; 0x80136e <AUSYS_vars+0x9>
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	12 16       	cp	r1, r18
    2e9e:	13 06       	cpc	r1, r19
    2ea0:	0c f0       	brlt	.+2      	; 0x2ea4 <_Z18svetlost_mod_functch+0x3e>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	88 23       	and	r24, r24
    2ea6:	f9 f0       	breq	.+62     	; 0x2ee6 <_Z18svetlost_mod_functch+0x80>
    {
        tr_bright += 8 * smer;
    2ea8:	80 91 6d 13 	lds	r24, 0x136D	; 0x80136d <AUSYS_vars+0x8>
    2eac:	90 91 6e 13 	lds	r25, 0x136E	; 0x80136e <AUSYS_vars+0x9>
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
    2eb0:	28 e0       	ldi	r18, 0x08	; 8
    2eb2:	c2 02       	muls	r28, r18
    2eb4:	80 0d       	add	r24, r0
    2eb6:	91 1d       	adc	r25, r1
    2eb8:	11 24       	eor	r1, r1
    2eba:	99 23       	and	r25, r25
    2ebc:	14 f4       	brge	.+4      	; 0x2ec2 <_Z18svetlost_mod_functch+0x5c>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
    2ec2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	19 f0       	breq	.+6      	; 0x2ece <_Z18svetlost_mod_functch+0x68>
    2ec8:	14 f0       	brlt	.+4      	; 0x2ece <_Z18svetlost_mod_functch+0x68>
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	90 93 6e 13 	sts	0x136E, r25	; 0x80136e <AUSYS_vars+0x9>
    2ed2:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <AUSYS_vars+0x8>
        writeTRAK();
    2ed6:	ee dd       	rcall	.-1060   	; 0x2ab4 <_Z9writeTRAKv>
        delay_FRTOS(cas_krog);
    2ed8:	8d 2f       	mov	r24, r29
    2eda:	82 95       	swap	r24
    2edc:	8f 70       	andi	r24, 0x0F	; 15
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
}

void svetlost_mod_funct(char smer, uint8_t cas_krog)
{
	_delay_ms(200);
    while (smer > 0 ? tr_bright < 255 : tr_bright > 0)
    2ee4:	ca cf       	rjmp	.-108    	; 0x2e7a <_Z18svetlost_mod_functch+0x14>
        tr_bright = tr_bright < 0 ? 0 : tr_bright;
        tr_bright = tr_bright > 255 ? 255 : tr_bright;
        writeTRAK();
        delay_FRTOS(cas_krog);
    }
}
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <_Z14strip_mode_chgPc>:

void strip_mode_chg(char *ch)
{
    if (ch == "off")
    2eec:	8e 55       	subi	r24, 0x5E	; 94
    2eee:	92 40       	sbci	r25, 0x02	; 2
    2ef0:	39 f4       	brne	.+14     	; 0x2f00 <_Z14strip_mode_chgPc+0x14>
        trenutni_audio_mode = OFF_A;
    2ef2:	84 e0       	ldi	r24, 0x04	; 4
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	90 93 66 13 	sts	0x1366, r25	; 0x801366 <AUSYS_vars+0x1>
    2efa:	80 93 65 13 	sts	0x1365, r24	; 0x801365 <AUSYS_vars>
    2efe:	22 c0       	rjmp	.+68     	; 0x2f44 <_Z14strip_mode_chgPc+0x58>

    else if (trenutni_audio_mode == OFF_A)
    2f00:	20 91 65 13 	lds	r18, 0x1365	; 0x801365 <AUSYS_vars>
    2f04:	30 91 66 13 	lds	r19, 0x1366	; 0x801366 <AUSYS_vars+0x1>
    2f08:	24 30       	cpi	r18, 0x04	; 4
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	29 f4       	brne	.+10     	; 0x2f18 <_Z14strip_mode_chgPc+0x2c>
        trenutni_audio_mode = NORMAL_FADE;
    2f0e:	10 92 66 13 	sts	0x1366, r1	; 0x801366 <AUSYS_vars+0x1>
    2f12:	10 92 65 13 	sts	0x1365, r1	; 0x801365 <AUSYS_vars>
    2f16:	16 c0       	rjmp	.+44     	; 0x2f44 <_Z14strip_mode_chgPc+0x58>

    else
        trenutni_audio_mode = ++trenutni_audio_mode % LENGTH_2;
    2f18:	a9 01       	movw	r20, r18
    2f1a:	4f 5f       	subi	r20, 0xFF	; 255
    2f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1e:	9a 01       	movw	r18, r20
    2f20:	ab ea       	ldi	r26, 0xAB	; 171
    2f22:	ba ea       	ldi	r27, 0xAA	; 170
    2f24:	0e 94 2a 20 	call	0x4054	; 0x4054 <__umulhisi3>
    2f28:	96 95       	lsr	r25
    2f2a:	87 95       	ror	r24
    2f2c:	9c 01       	movw	r18, r24
    2f2e:	22 0f       	add	r18, r18
    2f30:	33 1f       	adc	r19, r19
    2f32:	82 0f       	add	r24, r18
    2f34:	93 1f       	adc	r25, r19
    2f36:	9a 01       	movw	r18, r20
    2f38:	28 1b       	sub	r18, r24
    2f3a:	39 0b       	sbc	r19, r25
    2f3c:	30 93 66 13 	sts	0x1366, r19	; 0x801366 <AUSYS_vars+0x1>
    2f40:	20 93 65 13 	sts	0x1365, r18	; 0x801365 <AUSYS_vars>
	EEPROM.pisi(audiomode_eeprom_addr, trenutni_audio_mode);
    2f44:	40 91 65 13 	lds	r20, 0x1365	; 0x801365 <AUSYS_vars>
    2f48:	50 91 66 13 	lds	r21, 0x1366	; 0x801366 <AUSYS_vars+0x1>
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	8c e3       	ldi	r24, 0x3C	; 60
    2f50:	93 e1       	ldi	r25, 0x13	; 19
    2f52:	58 d3       	rcall	.+1712   	; 0x3604 <_ZN8EEPROM_t4pisiEhj>
    deleteALL_subAUDIO_tasks();
    2f54:	7a cd       	rjmp	.-1292   	; 0x2a4a <_Z24deleteALL_subAUDIO_tasksv>
    2f56:	08 95       	ret

00002f58 <_Z9fade_taskPv>:
    2f58:	cf 93       	push	r28
*                                                                                                                         *
*                                                         FADE TASKI                                                      *
*                                                                                                                         *
**************************************************************************************************************************/
void fade_task(void *BARVA) //Prizig na barbi in pocasen izklop
{
    2f5a:	df 93       	push	r29
    2f5c:	ec 01       	movw	r28, r24
    tr_bright = 255;
    2f5e:	a5 e6       	ldi	r26, 0x65	; 101
    2f60:	b3 e1       	ldi	r27, 0x13	; 19
    2f62:	8f ef       	ldi	r24, 0xFF	; 255
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	19 96       	adiw	r26, 0x09	; 9
    2f68:	9c 93       	st	X, r25
    2f6a:	8e 93       	st	-X, r24
    2f6c:	18 97       	sbiw	r26, 0x08	; 8
    nastavi_barve(BARVA);
    2f6e:	e8 81       	ld	r30, Y
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	3c 96       	adiw	r30, 0x0c	; 12
    2f74:	ee 0f       	add	r30, r30
    2f76:	ff 1f       	adc	r31, r31
    2f78:	e3 5c       	subi	r30, 0xC3	; 195
    2f7a:	fc 4e       	sbci	r31, 0xEC	; 236
    2f7c:	01 90       	ld	r0, Z+
    2f7e:	f0 81       	ld	r31, Z
    2f80:	e0 2d       	mov	r30, r0
    2f82:	80 81       	ld	r24, Z
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	13 96       	adiw	r26, 0x03	; 3
    2f88:	9c 93       	st	X, r25
    2f8a:	8e 93       	st	-X, r24
    2f8c:	12 97       	sbiw	r26, 0x02	; 2
    2f8e:	e8 81       	ld	r30, Y
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	3c 96       	adiw	r30, 0x0c	; 12
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	e3 5c       	subi	r30, 0xC3	; 195
    2f9a:	fc 4e       	sbci	r31, 0xEC	; 236
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	f0 81       	ld	r31, Z
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	81 81       	ldd	r24, Z+1	; 0x01
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	15 96       	adiw	r26, 0x05	; 5
    2fa8:	9c 93       	st	X, r25
    2faa:	8e 93       	st	-X, r24
    2fac:	14 97       	sbiw	r26, 0x04	; 4
    2fae:	e8 81       	ld	r30, Y
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	3c 96       	adiw	r30, 0x0c	; 12
    2fb4:	ee 0f       	add	r30, r30
    2fb6:	ff 1f       	adc	r31, r31
    2fb8:	e3 5c       	subi	r30, 0xC3	; 195
    2fba:	fc 4e       	sbci	r31, 0xEC	; 236
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	f0 81       	ld	r31, Z
    2fc0:	e0 2d       	mov	r30, r0
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	17 96       	adiw	r26, 0x07	; 7
    2fc8:	9c 93       	st	X, r25
    2fca:	8e 93       	st	-X, r24
    2fcc:	16 97       	sbiw	r26, 0x06	; 6

    brightDOWN(15);
    2fce:	6f e0       	ldi	r22, 0x0F	; 15
    2fd0:	8f ef       	ldi	r24, 0xFF	; 255
    2fd2:	49 df       	rcall	.-366    	; 0x2e66 <_Z18svetlost_mod_functch>

    fade_control = NULL;
    2fd4:	10 92 09 13 	sts	0x1309, r1	; 0x801309 <fade_control+0x1>
    2fd8:	10 92 08 13 	sts	0x1308, r1	; 0x801308 <fade_control>
    vTaskDelete(NULL);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
}
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	08 95       	ret

00002fea <_Z15Color_Fade_taskPv>:

void Color_Fade_task(void *BARVA) //Fade iz ene barve v drugo
{

    if (Breathe_control == NULL) // Ce diha on ne sme nastaviti svetlosti,
    2fea:	20 91 04 13 	lds	r18, 0x1304	; 0x801304 <Breathe_control>
    2fee:	30 91 05 13 	lds	r19, 0x1305	; 0x801305 <Breathe_control+0x1>
    2ff2:	23 2b       	or	r18, r19
    2ff4:	31 f4       	brne	.+12     	; 0x3002 <_Z15Color_Fade_taskPv+0x18>
    {                            // saj jo nastavlja dihalni task
        tr_bright = 255;
    2ff6:	2f ef       	ldi	r18, 0xFF	; 255
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	30 93 6e 13 	sts	0x136E, r19	; 0x80136e <AUSYS_vars+0x9>
    2ffe:	20 93 6d 13 	sts	0x136D, r18	; 0x80136d <AUSYS_vars+0x8>
    }

    colorSHIFT(BARVA); //prehod iz ene barve v drugo
    3002:	0d de       	rcall	.-998    	; 0x2c1e <_Z16color_fade_functPh>
    color_fade_control = NULL;
    3004:	10 92 07 13 	sts	0x1307, r1	; 0x801307 <color_fade_control+0x1>
    3008:	10 92 06 13 	sts	0x1306, r1	; 0x801306 <color_fade_control>
    vTaskDelete(NULL);
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <vTaskDelete>
    3014:	08 95       	ret

00003016 <_Z17Fade_Breathe_TaskPv>:
}

void Fade_Breathe_Task(void *BARVA)
{
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    if (color_fade_control == NULL)
    301a:	20 91 06 13 	lds	r18, 0x1306	; 0x801306 <color_fade_control>
    301e:	30 91 07 13 	lds	r19, 0x1307	; 0x801307 <color_fade_control+0x1>
    3022:	23 2b       	or	r18, r19
    3024:	a1 f5       	brne	.+104    	; 0x308e <_Z17Fade_Breathe_TaskPv+0x78>
    {
        nastavi_barve(BARVA);
    3026:	dc 01       	movw	r26, r24
    3028:	ec 91       	ld	r30, X
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	3c 96       	adiw	r30, 0x0c	; 12
    302e:	ee 0f       	add	r30, r30
    3030:	ff 1f       	adc	r31, r31
    3032:	e3 5c       	subi	r30, 0xC3	; 195
    3034:	fc 4e       	sbci	r31, 0xEC	; 236
    3036:	01 90       	ld	r0, Z+
    3038:	f0 81       	ld	r31, Z
    303a:	e0 2d       	mov	r30, r0
    303c:	20 81       	ld	r18, Z
    303e:	a5 e6       	ldi	r26, 0x65	; 101
    3040:	b3 e1       	ldi	r27, 0x13	; 19
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	13 96       	adiw	r26, 0x03	; 3
    3046:	3c 93       	st	X, r19
    3048:	2e 93       	st	-X, r18
    304a:	12 97       	sbiw	r26, 0x02	; 2
    304c:	ec 01       	movw	r28, r24
    304e:	e8 81       	ld	r30, Y
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	3c 96       	adiw	r30, 0x0c	; 12
    3054:	ee 0f       	add	r30, r30
    3056:	ff 1f       	adc	r31, r31
    3058:	e3 5c       	subi	r30, 0xC3	; 195
    305a:	fc 4e       	sbci	r31, 0xEC	; 236
    305c:	01 90       	ld	r0, Z+
    305e:	f0 81       	ld	r31, Z
    3060:	e0 2d       	mov	r30, r0
    3062:	21 81       	ldd	r18, Z+1	; 0x01
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	15 96       	adiw	r26, 0x05	; 5
    3068:	3c 93       	st	X, r19
    306a:	2e 93       	st	-X, r18
    306c:	14 97       	sbiw	r26, 0x04	; 4
    306e:	e8 81       	ld	r30, Y
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	3c 96       	adiw	r30, 0x0c	; 12
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	e3 5c       	subi	r30, 0xC3	; 195
    307a:	fc 4e       	sbci	r31, 0xEC	; 236
    307c:	01 90       	ld	r0, Z+
    307e:	f0 81       	ld	r31, Z
    3080:	e0 2d       	mov	r30, r0
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	17 96       	adiw	r26, 0x07	; 7
    3088:	9c 93       	st	X, r25
    308a:	8e 93       	st	-X, r24
    308c:	16 97       	sbiw	r26, 0x06	; 6
    }
    brightUP(7);
    308e:	67 e0       	ldi	r22, 0x07	; 7
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	e9 de       	rcall	.-558    	; 0x2e66 <_Z18svetlost_mod_functch>
    brightDOWN(7);
    3094:	67 e0       	ldi	r22, 0x07	; 7
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	e6 de       	rcall	.-564    	; 0x2e66 <_Z18svetlost_mod_functch>
    Breathe_control = NULL;
    309a:	10 92 05 13 	sts	0x1305, r1	; 0x801305 <Breathe_control+0x1>
    309e:	10 92 04 13 	sts	0x1304, r1	; 0x801304 <Breathe_control>
    vTaskDelete(NULL);
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 ac 09 	call	0x1358	; 0x1358 <vTaskDelete>
}
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

000030b0 <_Z41__static_initialization_and_destruction_0ii>:
{
	trenutni_audio_mode = EEPROM.beri(audiomode_eeprom_addr);
	writeOUTPUT(_12V_line, 'B', 1); // izklopi izhod
	writeOUTPUT(main_mosfet_pin, 'H', 1);
	Hardware.is_Powered_UP = true;
}
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	b1 f4       	brne	.+44     	; 0x30e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
    30b4:	6f 3f       	cpi	r22, 0xFF	; 255
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	99 f4       	brne	.+38     	; 0x30e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    30ba:	eb e1       	ldi	r30, 0x1B	; 27
    30bc:	f3 e1       	ldi	r31, 0x13	; 19
    30be:	84 e4       	ldi	r24, 0x44	; 68
    30c0:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    30c2:	22 e0       	ldi	r18, 0x02	; 2
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	35 83       	std	Z+5, r19	; 0x05
    30c8:	24 83       	std	Z+4, r18	; 0x04
        this->default_state = default_state;
    30ca:	10 86       	std	Z+8, r1	; 0x08
    30cc:	17 82       	std	Z+7, r1	; 0x07
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    30ce:	e2 e1       	ldi	r30, 0x12	; 18
    30d0:	f3 e1       	ldi	r31, 0x13	; 19
    30d2:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    30d4:	84 e0       	ldi	r24, 0x04	; 4
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	95 83       	std	Z+5, r25	; 0x05
    30da:	84 83       	std	Z+4, r24	; 0x04
        this->default_state = default_state;
    30dc:	10 86       	std	Z+8, r1	; 0x08
    30de:	17 82       	std	Z+7, r1	; 0x07
    30e0:	08 95       	ret

000030e2 <_Z8Shutdownv>:
	}
}

void Shutdown()
{
	writeOUTPUT(_12V_line, 'B', 0); // izklopi izhod
    30e2:	40 e0       	ldi	r20, 0x00	; 0
    30e4:	62 e4       	ldi	r22, 0x42	; 66
    30e6:	87 e0       	ldi	r24, 0x07	; 7
    30e8:	eb d2       	rcall	.+1494   	; 0x36c0 <_Z11writeOUTPUThcb>
	writeOUTPUT(main_mosfet_pin, 'H', 0);
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	68 e4       	ldi	r22, 0x48	; 72
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	e7 d2       	rcall	.+1486   	; 0x36c0 <_Z11writeOUTPUThcb>
	Hardware.is_Powered_UP = false;
    30f2:	10 92 a4 13 	sts	0x13A4, r1	; 0x8013a4 <Hardware+0x8>
	trenutni_audio_mode = OFF_A;
    30f6:	84 e0       	ldi	r24, 0x04	; 4
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	90 93 66 13 	sts	0x1366, r25	; 0x801366 <AUSYS_vars+0x1>
    30fe:	80 93 65 13 	sts	0x1365, r24	; 0x801365 <AUSYS_vars>
    3102:	08 95       	ret

00003104 <_Z8Power_UPv>:
}

void Power_UP()
{
	trenutni_audio_mode = EEPROM.beri(audiomode_eeprom_addr);
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	8c e3       	ldi	r24, 0x3C	; 60
    310a:	93 e1       	ldi	r25, 0x13	; 19
    310c:	94 d2       	rcall	.+1320   	; 0x3636 <_ZN8EEPROM_t4beriEj>
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	90 93 66 13 	sts	0x1366, r25	; 0x801366 <AUSYS_vars+0x1>
    3114:	80 93 65 13 	sts	0x1365, r24	; 0x801365 <AUSYS_vars>
	writeOUTPUT(_12V_line, 'B', 1); // izklopi izhod
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	62 e4       	ldi	r22, 0x42	; 66
    311c:	87 e0       	ldi	r24, 0x07	; 7
    311e:	d0 d2       	rcall	.+1440   	; 0x36c0 <_Z11writeOUTPUThcb>
	writeOUTPUT(main_mosfet_pin, 'H', 1);
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	68 e4       	ldi	r22, 0x48	; 72
    3124:	83 e0       	ldi	r24, 0x03	; 3
    3126:	cc d2       	rcall	.+1432   	; 0x36c0 <_Z11writeOUTPUThcb>
	Hardware.is_Powered_UP = true;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	80 93 a4 13 	sts	0x13A4, r24	; 0x8013a4 <Hardware+0x8>
    312e:	08 95       	ret

00003130 <_Z4corePv>:

void core(void *paramOdTaska)
{
	while (true)
	{
		if (stikalo.vrednost() == 0 && Timers.stikaloOFFtime.vrednost() > 30)	{
    3130:	82 e1       	ldi	r24, 0x12	; 18
    3132:	93 e1       	ldi	r25, 0x13	; 19
    3134:	e9 d4       	rcall	.+2514   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    3136:	c8 2f       	mov	r28, r24
    3138:	81 11       	cpse	r24, r1
    313a:	0b c0       	rjmp	.+22     	; 0x3152 <_Z4corePv+0x22>
    313c:	8e e7       	ldi	r24, 0x7E	; 126
    313e:	93 e1       	ldi	r25, 0x13	; 19
    3140:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    3144:	6f 31       	cpi	r22, 0x1F	; 31
    3146:	71 05       	cpc	r23, r1
    3148:	81 05       	cpc	r24, r1
    314a:	91 05       	cpc	r25, r1
    314c:	18 f0       	brcs	.+6      	; 0x3154 <_Z4corePv+0x24>
    314e:	c1 e0       	ldi	r28, 0x01	; 1
    3150:	01 c0       	rjmp	.+2      	; 0x3154 <_Z4corePv+0x24>
    3152:	c0 e0       	ldi	r28, 0x00	; 0
    3154:	cc 23       	and	r28, r28
    3156:	81 f0       	breq	.+32     	; 0x3178 <_Z4corePv+0x48>
			if (Hardware.is_Powered_UP)
    3158:	80 91 a4 13 	lds	r24, 0x13A4	; 0x8013a4 <Hardware+0x8>
			{
				Shutdown();
    315c:	81 11       	cpse	r24, r1
    315e:	c1 df       	rcall	.-126    	; 0x30e2 <_Z8Shutdownv>
			}
			Timers.stikaloCAS.ponastavi();
    3160:	8f e6       	ldi	r24, 0x6F	; 111
    3162:	93 e1       	ldi	r25, 0x13	; 19
    3164:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
			if (stikalo.fallingEdge())
    3168:	82 e1       	ldi	r24, 0x12	; 18
    316a:	93 e1       	ldi	r25, 0x13	; 19
    316c:	14 d5       	rcall	.+2600   	; 0x3b96 <_ZN4VHOD11fallingEdgeEv>
    316e:	88 23       	and	r24, r24
    3170:	61 f0       	breq	.+24     	; 0x318a <_Z4corePv+0x5a>
			{
				Hardware.AMP_oheat = false;
    3172:	10 92 a8 13 	sts	0x13A8, r1	; 0x8013a8 <Hardware+0xc>
			}
		}
		else if (stikalo.vrednost() == 1)
    3176:	09 c0       	rjmp	.+18     	; 0x318a <_Z4corePv+0x5a>
    3178:	82 e1       	ldi	r24, 0x12	; 18
    317a:	93 e1       	ldi	r25, 0x13	; 19
    317c:	c5 d4       	rcall	.+2442   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    317e:	88 23       	and	r24, r24
    3180:	21 f0       	breq	.+8      	; 0x318a <_Z4corePv+0x5a>
		{
			Timers.stikaloOFFtime.ponastavi();
    3182:	8e e7       	ldi	r24, 0x7E	; 126
    3184:	93 e1       	ldi	r25, 0x13	; 19
    3186:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
		*                                      BRANJE VOLT                                            *
		*                                                                                             *
		*                                                                                             *
		***********************************************************************************************/

			xSemaphoreTake(voltage_SEM, portMAX_DELAY); 
    318a:	6f ef       	ldi	r22, 0xFF	; 255
    318c:	7f ef       	ldi	r23, 0xFF	; 255
    318e:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <voltage_SEM>
    3192:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <voltage_SEM+0x1>
    3196:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueSemaphoreTake>

			if (Timers.VOLT_timer.vrednost() > 500)
    319a:	83 e8       	ldi	r24, 0x83	; 131
    319c:	93 e1       	ldi	r25, 0x13	; 19
    319e:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    31a2:	65 3f       	cpi	r22, 0xF5	; 245
    31a4:	71 40       	sbci	r23, 0x01	; 1
    31a6:	81 05       	cpc	r24, r1
    31a8:	91 05       	cpc	r25, r1
    31aa:	d8 f0       	brcs	.+54     	; 0x31e2 <_Z4corePv+0xb2>
			{
				Timers.VOLT_timer.ponastavi();
    31ac:	83 e8       	ldi	r24, 0x83	; 131
    31ae:	93 e1       	ldi	r25, 0x13	; 19
    31b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
				Hardware.napetost = readANALOG(vDIV_pin) * (float)Hardware.REF_mVOLT / 1023.00f;
    31b4:	82 e0       	ldi	r24, 0x02	; 2
    31b6:	e4 d2       	rcall	.+1480   	; 0x3780 <_Z10readANALOGh>
    31b8:	cc e9       	ldi	r28, 0x9C	; 156
    31ba:	d3 e1       	ldi	r29, 0x13	; 19
    31bc:	c8 80       	ld	r12, Y
    31be:	d9 80       	ldd	r13, Y+1	; 0x01
    31c0:	ea 80       	ldd	r14, Y+2	; 0x02
    31c2:	fb 80       	ldd	r15, Y+3	; 0x03
    31c4:	bc 01       	movw	r22, r24
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	ee d5       	rcall	.+3036   	; 0x3da8 <__floatunsisf>
    31cc:	a7 01       	movw	r20, r14
    31ce:	96 01       	movw	r18, r12
    31d0:	7d d6       	rcall	.+3322   	; 0x3ecc <__mulsf3>
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 ec       	ldi	r19, 0xC0	; 192
    31d6:	4f e7       	ldi	r20, 0x7F	; 127
    31d8:	54 e4       	ldi	r21, 0x44	; 68
    31da:	52 d5       	rcall	.+2724   	; 0x3c80 <__divsf3>
    31dc:	b9 d5       	rcall	.+2930   	; 0x3d50 <__fixunssfsi>
    31de:	7b 8b       	std	Y+19, r23	; 0x13
    31e0:	6a 8b       	std	Y+18, r22	; 0x12
			}

			xSemaphoreGive(voltage_SEM); // Da zeleno luc ostalim taskom
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	50 e0       	ldi	r21, 0x00	; 0
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <voltage_SEM>
    31f0:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <voltage_SEM+0x1>
    31f4:	0e 94 48 05 	call	0xa90	; 0xa90 <xQueueGenericSend>
		

		//----------------------------------------------------------------------------------------------------------------------------------
		//                                               Power UP
		//----------------------------------------------------------------------------------------------------------------------------------
		if (Timers.stikaloCAS.vrednost() >= 2000 && !Hardware.AMP_oheat && (Hardware.napetost > sleep_voltage + 50 || Hardware.PSW) && !Hardware.is_Powered_UP)
    31f8:	8f e6       	ldi	r24, 0x6F	; 111
    31fa:	93 e1       	ldi	r25, 0x13	; 19
    31fc:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    3200:	60 3d       	cpi	r22, 0xD0	; 208
    3202:	77 40       	sbci	r23, 0x07	; 7
    3204:	81 05       	cpc	r24, r1
    3206:	91 05       	cpc	r25, r1
    3208:	a8 f0       	brcs	.+42     	; 0x3234 <_Z4corePv+0x104>
    320a:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <Hardware+0xc>
    320e:	81 11       	cpse	r24, r1
    3210:	13 c0       	rjmp	.+38     	; 0x3238 <_Z4corePv+0x108>
    3212:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <Hardware+0x12>
    3216:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <Hardware+0x13>
    321a:	87 31       	cpi	r24, 0x17	; 23
    321c:	9d 40       	sbci	r25, 0x0D	; 13
    321e:	20 f4       	brcc	.+8      	; 0x3228 <_Z4corePv+0xf8>
    3220:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <Hardware+0x9>
    3224:	88 23       	and	r24, r24
    3226:	51 f0       	breq	.+20     	; 0x323c <_Z4corePv+0x10c>
    3228:	80 91 a4 13 	lds	r24, 0x13A4	; 0x8013a4 <Hardware+0x8>
    322c:	88 23       	and	r24, r24
    322e:	41 f0       	breq	.+16     	; 0x3240 <_Z4corePv+0x110>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	07 c0       	rjmp	.+14     	; 0x3242 <_Z4corePv+0x112>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	05 c0       	rjmp	.+10     	; 0x3242 <_Z4corePv+0x112>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	03 c0       	rjmp	.+6      	; 0x3242 <_Z4corePv+0x112>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <_Z4corePv+0x112>
    3240:	81 e0       	ldi	r24, 0x01	; 1
		{ // Elapsed 2000 ms, not overheated, enough power or (already switched to)external power and not already powered up
			Power_UP();
    3242:	81 11       	cpse	r24, r1
		}
		if (Hardware.napetost <= sleep_voltage && napajalnik.vrednost() == 0 && Hardware.napetost != 0 && Hardware.is_Powered_UP) //Če je napetost 0V, to pomeni da baterij še ni prebral ; V spanje gre pri 8% napolnjenosti
    3244:	5f df       	rcall	.-322    	; 0x3104 <_Z8Power_UPv>
    3246:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <Hardware+0x12>
    324a:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <Hardware+0x13>
    324e:	85 3e       	cpi	r24, 0xE5	; 229
    3250:	9c 40       	sbci	r25, 0x0C	; 12
    3252:	70 f4       	brcc	.+28     	; 0x3270 <_Z4corePv+0x140>
    3254:	8b e1       	ldi	r24, 0x1B	; 27
    3256:	93 e1       	ldi	r25, 0x13	; 19
    3258:	57 d4       	rcall	.+2222   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    325a:	81 11       	cpse	r24, r1
    325c:	0b c0       	rjmp	.+22     	; 0x3274 <_Z4corePv+0x144>
    325e:	20 91 ae 13 	lds	r18, 0x13AE	; 0x8013ae <Hardware+0x12>
    3262:	30 91 af 13 	lds	r19, 0x13AF	; 0x8013af <Hardware+0x13>
    3266:	23 2b       	or	r18, r19
    3268:	31 f0       	breq	.+12     	; 0x3276 <_Z4corePv+0x146>
    326a:	80 91 a4 13 	lds	r24, 0x13A4	; 0x8013a4 <Hardware+0x8>
    326e:	03 c0       	rjmp	.+6      	; 0x3276 <_Z4corePv+0x146>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <_Z4corePv+0x146>
    3274:	80 e0       	ldi	r24, 0x00	; 0
		{
			Shutdown();
    3276:	81 11       	cpse	r24, r1
    3278:	34 df       	rcall	.-408    	; 0x30e2 <_Z8Shutdownv>
		}
		delay_FRTOS(100);
    327a:	86 e0       	ldi	r24, 0x06	; 6
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
void audio_visual();
/* *********************************************************************** */

void core(void *paramOdTaska)
{
	while (true)
    3282:	56 cf       	rjmp	.-340    	; 0x3130 <_Z4corePv>

00003284 <_GLOBAL__sub_I_napajalnik>:
{
	trenutni_audio_mode = EEPROM.beri(audiomode_eeprom_addr);
	writeOUTPUT(_12V_line, 'B', 1); // izklopi izhod
	writeOUTPUT(main_mosfet_pin, 'H', 1);
	Hardware.is_Powered_UP = true;
}
    3284:	6f ef       	ldi	r22, 0xFF	; 255
    3286:	7f ef       	ldi	r23, 0xFF	; 255
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	11 cf       	rjmp	.-478    	; 0x30b0 <_Z41__static_initialization_and_destruction_0ii>
    328e:	08 95       	ret

00003290 <_Z41__static_initialization_and_destruction_0ii>:
    PORTD &= ~(1 << 7);
    Timers.stikaloCAS.ponastavi();
    _delay_ms(20);
    Hardware.PSW = false;
    taskEXIT_CRITICAL();
}
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	a1 f4       	brne	.+40     	; 0x32bc <_Z41__static_initialization_and_destruction_0ii+0x2c>
    3294:	6f 3f       	cpi	r22, 0xFF	; 255
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	89 f4       	brne	.+34     	; 0x32bc <_Z41__static_initialization_and_destruction_0ii+0x2c>
};

/******************************************************************************************/
/*                                  SPREMENLJIVKE EVENTOV                                 */
/******************************************************************************************/
struct sw2_state_machine_strct
    329a:	ed e2       	ldi	r30, 0x2D	; 45
    329c:	f3 e1       	ldi	r31, 0x13	; 19
    329e:	10 82       	st	Z, r1
    32a0:	11 82       	std	Z+1, r1	; 0x01
    32a2:	15 86       	std	Z+13, r1	; 0x0d
    32a4:	14 86       	std	Z+12, r1	; 0x0c
    32a6:	16 86       	std	Z+14, r1	; 0x0e
    bool risingEdge();
    bool fallingEdge();

    VHOD(int pin, char port, int default_state)
    {
        this->port = port;
    32a8:	e4 e2       	ldi	r30, 0x24	; 36
    32aa:	f3 e1       	ldi	r31, 0x13	; 19
    32ac:	82 e4       	ldi	r24, 0x42	; 66
    32ae:	86 83       	std	Z+6, r24	; 0x06
        this->pin = pin;
    32b0:	84 e0       	ldi	r24, 0x04	; 4
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	95 83       	std	Z+5, r25	; 0x05
    32b6:	84 83       	std	Z+4, r24	; 0x04
        this->default_state = default_state;
    32b8:	10 86       	std	Z+8, r1	; 0x08
    32ba:	17 82       	std	Z+7, r1	; 0x07
    32bc:	08 95       	ret

000032be <_Z4exitv>:
    colorSHIFT(&evnt_st.menu_seek);
// Prikaze element v seeku ce je scroll aktiven

void exit()
{
    evnt_st.state = unset;
    32be:	ed e2       	ldi	r30, 0x2D	; 45
    32c0:	f3 e1       	ldi	r31, 0x13	; 19
    32c2:	10 82       	st	Z, r1
    evnt_st.menu_seek = TOGGLE_LCD;
    32c4:	11 82       	std	Z+1, r1	; 0x01
    evnt_st.longPRESS = true;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	86 87       	std	Z+14, r24	; 0x0e
    flash_strip();
    32ca:	6f dc       	rcall	.-1826   	; 0x2baa <_Z11flash_stripv>
    evnt_st.state_exit_timer.ponastavi();
    32cc:	8f e2       	ldi	r24, 0x2F	; 47
    32ce:	93 e1       	ldi	r25, 0x13	; 19
    32d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    tr_bright = 255;
    32d4:	8f ef       	ldi	r24, 0xFF	; 255
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	90 93 6e 13 	sts	0x136E, r25	; 0x80136e <AUSYS_vars+0x9>
    32dc:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <AUSYS_vars+0x8>
    brightDOWN(15);
    32e0:	6f e0       	ldi	r22, 0x0F	; 15
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
    32e4:	c0 dd       	rcall	.-1152   	; 0x2e66 <_Z18svetlost_mod_functch>
    delay_FRTOS(500);
    32e6:	8f e1       	ldi	r24, 0x1F	; 31
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
    resumeTASK(audio_system_control);
    32ee:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    32f2:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    32f6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <eTaskGetState>
    32fa:	83 30       	cpi	r24, 0x03	; 3
    32fc:	41 f4       	brne	.+16     	; 0x330e <_Z4exitv+0x50>
    32fe:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    3302:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    3306:	89 2b       	or	r24, r25
    3308:	21 f4       	brne	.+8      	; 0x3312 <_Z4exitv+0x54>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <_Z4exitv+0x56>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <_Z4exitv+0x56>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	88 23       	and	r24, r24
    3316:	31 f0       	breq	.+12     	; 0x3324 <_Z4exitv+0x66>
    3318:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    331c:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    3320:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <vTaskResume>
    3324:	08 95       	ret

00003326 <_Z24external_power_switch_evv>:
    }
}

void external_power_switch_ev()
{
    taskENTER_CRITICAL();
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	0f 92       	push	r0
    Shutdown();
    332c:	da de       	rcall	.-588    	; 0x30e2 <_Z8Shutdownv>
    332e:	87 e8       	ldi	r24, 0x87	; 135
    3330:	93 e1       	ldi	r25, 0x13	; 19
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <_Z24external_power_switch_evv+0xc>
    3336:	00 c0       	rjmp	.+0      	; 0x3338 <_Z24external_power_switch_evv+0x12>
    3338:	00 00       	nop
    _delay_ms(20);
    PORTD |= (1 << 7);
    333a:	8b b1       	in	r24, 0x0b	; 11
    333c:	80 68       	ori	r24, 0x80	; 128
    333e:	8b b9       	out	0x0b, r24	; 11
    Timers.stikaloCAS.ponastavi();
    3340:	8f e6       	ldi	r24, 0x6F	; 111
    3342:	93 e1       	ldi	r25, 0x13	; 19
    3344:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    3348:	87 e8       	ldi	r24, 0x87	; 135
    334a:	93 e1       	ldi	r25, 0x13	; 19
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <_Z24external_power_switch_evv+0x26>
    3350:	00 c0       	rjmp	.+0      	; 0x3352 <_Z24external_power_switch_evv+0x2c>
    3352:	00 00       	nop
    _delay_ms(20);
    Hardware.PSW = true;
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 93 a5 13 	sts	0x13A5, r24	; 0x8013a5 <Hardware+0x9>
    taskEXIT_CRITICAL();
    335a:	0f 90       	pop	r0
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	08 95       	ret

00003360 <_Z24internal_power_switch_evv>:
}

void internal_power_switch_ev()
{
    taskENTER_CRITICAL();
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	0f 92       	push	r0
    Shutdown();
    3366:	bd de       	rcall	.-646    	; 0x30e2 <_Z8Shutdownv>
    3368:	87 e8       	ldi	r24, 0x87	; 135
    336a:	93 e1       	ldi	r25, 0x13	; 19
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <_Z24internal_power_switch_evv+0xc>
    3370:	00 c0       	rjmp	.+0      	; 0x3372 <_Z24internal_power_switch_evv+0x12>
    3372:	00 00       	nop
    _delay_ms(20);
    PORTD &= ~(1 << 7);
    3374:	8b b1       	in	r24, 0x0b	; 11
    3376:	8f 77       	andi	r24, 0x7F	; 127
    3378:	8b b9       	out	0x0b, r24	; 11
    Timers.stikaloCAS.ponastavi();
    337a:	8f e6       	ldi	r24, 0x6F	; 111
    337c:	93 e1       	ldi	r25, 0x13	; 19
    337e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    3382:	87 e8       	ldi	r24, 0x87	; 135
    3384:	93 e1       	ldi	r25, 0x13	; 19
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <_Z24internal_power_switch_evv+0x26>
    338a:	00 c0       	rjmp	.+0      	; 0x338c <_Z24internal_power_switch_evv+0x2c>
    338c:	00 00       	nop
    _delay_ms(20);
    Hardware.PSW = false;
    338e:	10 92 a5 13 	sts	0x13A5, r1	; 0x8013a5 <Hardware+0x9>
    taskEXIT_CRITICAL();
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	08 95       	ret

00003398 <_Z6eventsPv>:
{
    while (true)
    {
        /******************************************** SWITCH 2 EVENTS ****************************************/

        if (eventSW.vrednost())
    3398:	84 e2       	ldi	r24, 0x24	; 36
    339a:	93 e1       	ldi	r25, 0x13	; 19
    339c:	b5 d3       	rcall	.+1898   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    339e:	88 23       	and	r24, r24
    33a0:	29 f0       	breq	.+10     	; 0x33ac <_Z6eventsPv+0x14>
        {
            Timers.SW2_off_timer.ponastavi(); // Filtrira lazne nepritiske
    33a2:	88 e8       	ldi	r24, 0x88	; 136
    33a4:	93 e1       	ldi	r25, 0x13	; 19
    33a6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    33aa:	0b c0       	rjmp	.+22     	; 0x33c2 <_Z6eventsPv+0x2a>
        }
        else if (Timers.SW2_off_timer.vrednost() > 50)
    33ac:	88 e8       	ldi	r24, 0x88	; 136
    33ae:	93 e1       	ldi	r25, 0x13	; 19
    33b0:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    33b4:	63 33       	cpi	r22, 0x33	; 51
    33b6:	71 05       	cpc	r23, r1
    33b8:	81 05       	cpc	r24, r1
    33ba:	91 05       	cpc	r25, r1
    33bc:	10 f0       	brcs	.+4      	; 0x33c2 <_Z6eventsPv+0x2a>
        {
            evnt_st.longPRESS = false;
    33be:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <evnt_st+0xe>
        }
        //
        //State machine
        if (Hardware.is_Powered_UP && !evnt_st.longPRESS)
    33c2:	c0 91 a4 13 	lds	r28, 0x13A4	; 0x8013a4 <Hardware+0x8>
    33c6:	cc 23       	and	r28, r28
    33c8:	09 f4       	brne	.+2      	; 0x33cc <_Z6eventsPv+0x34>
    33ca:	dc c0       	rjmp	.+440    	; 0x3584 <_Z6eventsPv+0x1ec>
    33cc:	d0 91 3b 13 	lds	r29, 0x133B	; 0x80133b <evnt_st+0xe>
    33d0:	d1 11       	cpse	r29, r1
    33d2:	d8 c0       	rjmp	.+432    	; 0x3584 <_Z6eventsPv+0x1ec>
        {
            switch (evnt_st.state)
    33d4:	80 91 2d 13 	lds	r24, 0x132D	; 0x80132d <evnt_st>
    33d8:	88 23       	and	r24, r24
    33da:	21 f0       	breq	.+8      	; 0x33e4 <_Z6eventsPv+0x4c>
    33dc:	81 30       	cpi	r24, 0x01	; 1
    33de:	09 f4       	brne	.+2      	; 0x33e2 <_Z6eventsPv+0x4a>
    33e0:	51 c0       	rjmp	.+162    	; 0x3484 <_Z6eventsPv+0xec>
    33e2:	d0 c0       	rjmp	.+416    	; 0x3584 <_Z6eventsPv+0x1ec>
            {

            case unset:
                if (evnt_st.hold_timer.vrednost() > 1000)
    33e4:	84 e3       	ldi	r24, 0x34	; 52
    33e6:	93 e1       	ldi	r25, 0x13	; 19
    33e8:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    33ec:	69 3e       	cpi	r22, 0xE9	; 233
    33ee:	73 40       	sbci	r23, 0x03	; 3
    33f0:	81 05       	cpc	r24, r1
    33f2:	91 05       	cpc	r25, r1
    33f4:	08 f4       	brcc	.+2      	; 0x33f8 <_Z6eventsPv+0x60>
    33f6:	3c c0       	rjmp	.+120    	; 0x3470 <_Z6eventsPv+0xd8>
                {
                    evnt_st.state = SCROLL;
    33f8:	ed e2       	ldi	r30, 0x2D	; 45
    33fa:	f3 e1       	ldi	r31, 0x13	; 19
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	80 83       	st	Z, r24
                    evnt_st.menu_seek = TOGGLE_LCD;
    3400:	11 82       	std	Z+1, r1	; 0x01
                    evnt_st.state_exit_timer.ponastavi();
    3402:	8f e2       	ldi	r24, 0x2F	; 47
    3404:	93 e1       	ldi	r25, 0x13	; 19
    3406:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
                    evnt_st.hold_timer.ponastavi();
    340a:	84 e3       	ldi	r24, 0x34	; 52
    340c:	93 e1       	ldi	r25, 0x13	; 19
    340e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
                    turnOFFstrip();
    3412:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    3416:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    341a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <eTaskGetState>
    341e:	83 30       	cpi	r24, 0x03	; 3
    3420:	41 f0       	breq	.+16     	; 0x3432 <_Z6eventsPv+0x9a>
    3422:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    3426:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    342a:	89 2b       	or	r24, r25
    342c:	19 f4       	brne	.+6      	; 0x3434 <_Z6eventsPv+0x9c>
    342e:	cd 2f       	mov	r28, r29
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <_Z6eventsPv+0x9c>
    3432:	cd 2f       	mov	r28, r29
    3434:	cc 23       	and	r28, r28
    3436:	31 f0       	breq	.+12     	; 0x3444 <_Z6eventsPv+0xac>
    3438:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <audio_system_control>
    343c:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <audio_system_control+0x1>
    3440:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspend>
    3444:	02 db       	rcall	.-2556   	; 0x2a4a <_Z24deleteALL_subAUDIO_tasksv>
    3446:	6f e0       	ldi	r22, 0x0F	; 15
    3448:	8f ef       	ldi	r24, 0xFF	; 255
                    flash_strip();
    344a:	0d dd       	rcall	.-1510   	; 0x2e66 <_Z18svetlost_mod_functch>
    344c:	ae db       	rcall	.-2212   	; 0x2baa <_Z11flash_stripv>
                    show_scroll_Seek();
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	90 93 6e 13 	sts	0x136E, r25	; 0x80136e <AUSYS_vars+0x9>
    3456:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <AUSYS_vars+0x8>
    345a:	8e e2       	ldi	r24, 0x2E	; 46
    345c:	93 e1       	ldi	r25, 0x13	; 19
    345e:	df db       	rcall	.-2114   	; 0x2c1e <_Z16color_fade_functPh>
                    delay_FRTOS(200);
    3460:	8c e0       	ldi	r24, 0x0C	; 12
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
                    evnt_st.longPRESS = true;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <evnt_st+0xe>
                }

                else if (!eventSW.vrednost())
    346e:	8a c0       	rjmp	.+276    	; 0x3584 <_Z6eventsPv+0x1ec>
    3470:	84 e2       	ldi	r24, 0x24	; 36
    3472:	93 e1       	ldi	r25, 0x13	; 19
    3474:	49 d3       	rcall	.+1682   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    3476:	81 11       	cpse	r24, r1
    3478:	85 c0       	rjmp	.+266    	; 0x3584 <_Z6eventsPv+0x1ec>
                {
                    evnt_st.hold_timer.ponastavi();
    347a:	84 e3       	ldi	r24, 0x34	; 52
    347c:	93 e1       	ldi	r25, 0x13	; 19
    347e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    3482:	80 c0       	rjmp	.+256    	; 0x3584 <_Z6eventsPv+0x1ec>
                }
                break;

            case SCROLL:
                check_auto_exit(); //Macro to auto exit timer
    3484:	8f e2       	ldi	r24, 0x2F	; 47
    3486:	93 e1       	ldi	r25, 0x13	; 19
    3488:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    348c:	61 37       	cpi	r22, 0x71	; 113
    348e:	77 41       	sbci	r23, 0x17	; 23
    3490:	81 05       	cpc	r24, r1
    3492:	91 05       	cpc	r25, r1
    3494:	08 f0       	brcs	.+2      	; 0x3498 <_Z6eventsPv+0x100>
                if (eventSW.vrednost())
    3496:	13 df       	rcall	.-474    	; 0x32be <_Z4exitv>
    3498:	84 e2       	ldi	r24, 0x24	; 36
    349a:	93 e1       	ldi	r25, 0x13	; 19
    349c:	35 d3       	rcall	.+1642   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    349e:	88 23       	and	r24, r24
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <_Z6eventsPv+0x10c>
    34a2:	4d c0       	rjmp	.+154    	; 0x353e <_Z6eventsPv+0x1a6>
                {
                    evnt_st.hold_time = evnt_st.hold_timer.vrednost(); //stopa cas pritiska
    34a4:	84 e3       	ldi	r24, 0x34	; 52
    34a6:	93 e1       	ldi	r25, 0x13	; 19
    34a8:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    34ac:	0d e2       	ldi	r16, 0x2D	; 45
    34ae:	13 e1       	ldi	r17, 0x13	; 19
    34b0:	f8 01       	movw	r30, r16
    34b2:	75 87       	std	Z+13, r23	; 0x0d
    34b4:	64 87       	std	Z+12, r22	; 0x0c
                    evnt_st.state_exit_timer.ponastavi();
    34b6:	8f e2       	ldi	r24, 0x2F	; 47
    34b8:	93 e1       	ldi	r25, 0x13	; 19
    34ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>

                    if (evnt_st.hold_time > 1000)
    34be:	f8 01       	movw	r30, r16
    34c0:	84 85       	ldd	r24, Z+12	; 0x0c
    34c2:	95 85       	ldd	r25, Z+13	; 0x0d
    34c4:	89 3e       	cpi	r24, 0xE9	; 233
    34c6:	93 40       	sbci	r25, 0x03	; 3
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <_Z6eventsPv+0x134>
    34ca:	5c c0       	rjmp	.+184    	; 0x3584 <_Z6eventsPv+0x1ec>
                    {
                        evnt_st.longPRESS = true;
    34cc:	f8 01       	movw	r30, r16
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	86 87       	std	Z+14, r24	; 0x0e
                        switch (evnt_st.menu_seek) //Glede na trenutni menu seek nekaj izvede
    34d2:	81 81       	ldd	r24, Z+1	; 0x01
    34d4:	81 30       	cpi	r24, 0x01	; 1
    34d6:	29 f1       	breq	.+74     	; 0x3522 <_Z6eventsPv+0x18a>
    34d8:	18 f0       	brcs	.+6      	; 0x34e0 <_Z6eventsPv+0x148>
    34da:	82 30       	cpi	r24, 0x02	; 2
    34dc:	39 f1       	breq	.+78     	; 0x352c <_Z6eventsPv+0x194>
    34de:	2a c0       	rjmp	.+84     	; 0x3534 <_Z6eventsPv+0x19c>
                        {
                        case TOGGLE_LCD:
                            toggleLCD(); //Task Zaslon se blocka v zaslon tasku
    34e0:	ec e9       	ldi	r30, 0x9C	; 156
    34e2:	f3 e1       	ldi	r31, 0x13	; 19
    34e4:	c5 85       	ldd	r28, Z+13	; 0x0d
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	c8 27       	eor	r28, r24
    34ea:	c5 87       	std	Z+13, r28	; 0x0d
    34ec:	cc 23       	and	r28, r28
    34ee:	b9 f0       	breq	.+46     	; 0x351e <_Z6eventsPv+0x186>
    34f0:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    34f4:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
    34f8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <eTaskGetState>
    34fc:	83 30       	cpi	r24, 0x03	; 3
    34fe:	39 f4       	brne	.+14     	; 0x350e <_Z6eventsPv+0x176>
    3500:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    3504:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
    3508:	89 2b       	or	r24, r25
    350a:	09 f0       	breq	.+2      	; 0x350e <_Z6eventsPv+0x176>
    350c:	dc 2f       	mov	r29, r28
    350e:	dd 23       	and	r29, r29
    3510:	31 f0       	breq	.+12     	; 0x351e <_Z6eventsPv+0x186>
    3512:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    3516:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
                            exit();
                            break;
                        case STRIP_MD_CHG:
                            strip_mode_chg("");
    351a:	0e 94 43 0a 	call	0x1486	; 0x1486 <vTaskResume>
    351e:	cf de       	rcall	.-610    	; 0x32be <_Z4exitv>
    3520:	09 c0       	rjmp	.+18     	; 0x3534 <_Z6eventsPv+0x19c>
                            exit();
    3522:	8b e0       	ldi	r24, 0x0B	; 11
    3524:	92 e0       	ldi	r25, 0x02	; 2
                            break;
    3526:	e2 dc       	rcall	.-1596   	; 0x2eec <_Z14strip_mode_chgPc>
                        case STRIP_OFF:
                            strip_mode_chg("off");
    3528:	ca de       	rcall	.-620    	; 0x32be <_Z4exitv>
    352a:	04 c0       	rjmp	.+8      	; 0x3534 <_Z6eventsPv+0x19c>
    352c:	8e e5       	ldi	r24, 0x5E	; 94
    352e:	92 e0       	ldi	r25, 0x02	; 2
                            exit();
    3530:	dd dc       	rcall	.-1606   	; 0x2eec <_Z14strip_mode_chgPc>
    3532:	c5 de       	rcall	.-630    	; 0x32be <_Z4exitv>
                            break;
                        }
                        evnt_st.hold_timer.ponastavi();
    3534:	84 e3       	ldi	r24, 0x34	; 52
    3536:	93 e1       	ldi	r25, 0x13	; 19
    3538:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    353c:	23 c0       	rjmp	.+70     	; 0x3584 <_Z6eventsPv+0x1ec>
                    }
                }

                else if (evnt_st.hold_time > 0)
    353e:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <evnt_st+0xc>
    3542:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <evnt_st+0xd>
    3546:	00 97       	sbiw	r24, 0x00	; 0
                {

                    if (evnt_st.hold_time < 500) //Kratek pritisk
    3548:	e9 f0       	breq	.+58     	; 0x3584 <_Z6eventsPv+0x1ec>
    354a:	84 3f       	cpi	r24, 0xF4	; 244
    354c:	91 40       	sbci	r25, 0x01	; 1
                    {
                        evnt_st.menu_seek = (evnt_st.menu_seek + 1) % menu_seek_LEN;
    354e:	48 f4       	brcc	.+18     	; 0x3562 <_Z6eventsPv+0x1ca>
    3550:	ed e2       	ldi	r30, 0x2D	; 45
    3552:	f3 e1       	ldi	r31, 0x13	; 19
    3554:	81 81       	ldd	r24, Z+1	; 0x01
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	63 e0       	ldi	r22, 0x03	; 3
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	3d d5       	rcall	.+2682   	; 0x3fda <__divmodhi4>
                    }
                    show_scroll_Seek();
    3560:	81 83       	std	Z+1, r24	; 0x01
    3562:	8f ef       	ldi	r24, 0xFF	; 255
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	90 93 6e 13 	sts	0x136E, r25	; 0x80136e <AUSYS_vars+0x9>
    356a:	80 93 6d 13 	sts	0x136D, r24	; 0x80136d <AUSYS_vars+0x8>
    356e:	8e e2       	ldi	r24, 0x2E	; 46
    3570:	93 e1       	ldi	r25, 0x13	; 19
                    evnt_st.hold_timer.ponastavi();
    3572:	55 db       	rcall	.-2390   	; 0x2c1e <_Z16color_fade_functPh>
    3574:	84 e3       	ldi	r24, 0x34	; 52
    3576:	93 e1       	ldi	r25, 0x13	; 19
    3578:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
                    evnt_st.hold_time = 0;
    357c:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <evnt_st+0xd>
    3580:	10 92 39 13 	sts	0x1339, r1	; 0x801339 <evnt_st+0xc>
                break;
            }
        }

        /******************************** POWER SWITCH EVENTS ********************************/
        if (napajalnik.vrednost() && Hardware.PSW == false)
    3584:	8b e1       	ldi	r24, 0x1B	; 27
    3586:	93 e1       	ldi	r25, 0x13	; 19
    3588:	bf d2       	rcall	.+1406   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    358a:	c8 2f       	mov	r28, r24
    358c:	88 23       	and	r24, r24
    358e:	31 f0       	breq	.+12     	; 0x359c <_Z6eventsPv+0x204>
    3590:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <Hardware+0x9>
    3594:	88 23       	and	r24, r24
    3596:	19 f0       	breq	.+6      	; 0x359e <_Z6eventsPv+0x206>
    3598:	c0 e0       	ldi	r28, 0x00	; 0
    359a:	01 c0       	rjmp	.+2      	; 0x359e <_Z6eventsPv+0x206>
    359c:	c0 e0       	ldi	r28, 0x00	; 0
    359e:	cc 23       	and	r28, r28
    35a0:	71 f0       	breq	.+28     	; 0x35be <_Z6eventsPv+0x226>
    35a2:	87 e8       	ldi	r24, 0x87	; 135
    35a4:	93 e1       	ldi	r25, 0x13	; 19
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <_Z6eventsPv+0x20e>
        {
            _delay_ms(20);
            external_power_switch_ev();
    35aa:	00 c0       	rjmp	.+0      	; 0x35ac <_Z6eventsPv+0x214>
    35ac:	00 00       	nop
    35ae:	bb de       	rcall	.-650    	; 0x3326 <_Z24external_power_switch_evv>
    35b0:	e7 e8       	ldi	r30, 0x87	; 135
    35b2:	f3 e1       	ldi	r31, 0x13	; 19
    35b4:	31 97       	sbiw	r30, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <_Z6eventsPv+0x21c>
    35b8:	00 c0       	rjmp	.+0      	; 0x35ba <_Z6eventsPv+0x222>
    35ba:	00 00       	nop
            _delay_ms(20);
        }

        else if (napajalnik.vrednost() == 0 && Hardware.PSW)
    35bc:	18 c0       	rjmp	.+48     	; 0x35ee <_Z6eventsPv+0x256>
    35be:	8b e1       	ldi	r24, 0x1B	; 27
    35c0:	93 e1       	ldi	r25, 0x13	; 19
    35c2:	a2 d2       	rcall	.+1348   	; 0x3b08 <_ZN4VHOD8vrednostEv>
    35c4:	81 11       	cpse	r24, r1
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <_Z6eventsPv+0x238>
    35c8:	80 91 a5 13 	lds	r24, 0x13A5	; 0x8013a5 <Hardware+0x9>
    35cc:	81 11       	cpse	r24, r1
    35ce:	c8 2f       	mov	r28, r24
    35d0:	cc 23       	and	r28, r28
    35d2:	69 f0       	breq	.+26     	; 0x35ee <_Z6eventsPv+0x256>
    35d4:	87 e8       	ldi	r24, 0x87	; 135
    35d6:	93 e1       	ldi	r25, 0x13	; 19
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <_Z6eventsPv+0x240>
    35dc:	00 c0       	rjmp	.+0      	; 0x35de <_Z6eventsPv+0x246>
        {
            _delay_ms(20);
            internal_power_switch_ev();
    35de:	00 00       	nop
    35e0:	bf de       	rcall	.-642    	; 0x3360 <_Z24internal_power_switch_evv>
    35e2:	e7 e8       	ldi	r30, 0x87	; 135
    35e4:	f3 e1       	ldi	r31, 0x13	; 19
    35e6:	31 97       	sbiw	r30, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <_Z6eventsPv+0x24e>
    35ea:	00 c0       	rjmp	.+0      	; 0x35ec <_Z6eventsPv+0x254>
    35ec:	00 00       	nop
            _delay_ms(20);
        }
        delay_FRTOS(30);
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
// auto izhod iz scrolla
/*******************************************************************************************/

void events(void *paramOdTaska)
{
    while (true)
    35f6:	d0 ce       	rjmp	.-608    	; 0x3398 <_Z6eventsPv>

000035f8 <_GLOBAL__sub_I_evnt_st>:
    PORTD &= ~(1 << 7);
    Timers.stikaloCAS.ponastavi();
    _delay_ms(20);
    Hardware.PSW = false;
    taskEXIT_CRITICAL();
}
    35f8:	6f ef       	ldi	r22, 0xFF	; 255
    35fa:	7f ef       	ldi	r23, 0xFF	; 255
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	47 ce       	rjmp	.-882    	; 0x3290 <_Z41__static_initialization_and_destruction_0ii>
    3602:	08 95       	ret

00003604 <_ZN8EEPROM_t4pisiEhj>:
#include "avr/io.h"
#include "FreeRTOS.h"

#include "EEPROM.h"

void EEPROM_t::pisi(uint8_t podatek, uint16_t naslov){
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	c6 2f       	mov	r28, r22
    360c:	8a 01       	movw	r16, r20
	while(EECR & (1<<EEPE))
    360e:	f9 9b       	sbis	0x1f, 1	; 31
    3610:	05 c0       	rjmp	.+10     	; 0x361c <_ZN8EEPROM_t4pisiEhj+0x18>
		vTaskDelay(1);				// Cakaj da se prejsnje branje/pisanje zakljuci
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
#include "FreeRTOS.h"

#include "EEPROM.h"

void EEPROM_t::pisi(uint8_t podatek, uint16_t naslov){
	while(EECR & (1<<EEPE))
    361a:	f9 cf       	rjmp	.-14     	; 0x360e <_ZN8EEPROM_t4pisiEhj+0xa>
		vTaskDelay(1);				// Cakaj da se prejsnje branje/pisanje zakljuci
	EEAR = naslov;					//Izberi index bajta na eepromu
    361c:	12 bd       	out	0x22, r17	; 34
    361e:	01 bd       	out	0x21, r16	; 33
	EEDR = podatek;					//Podatek na zacasen bajt
    3620:	c0 bd       	out	0x20, r28	; 32
	EECR |= (1<<EEMPE);				//Vklopi interrupt
    3622:	8f b3       	in	r24, 0x1f	; 31
    3624:	84 60       	ori	r24, 0x04	; 4
    3626:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);				//Pisi
    3628:	8f b3       	in	r24, 0x1f	; 31
    362a:	82 60       	ori	r24, 0x02	; 2
    362c:	8f bb       	out	0x1f, r24	; 31
}
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <_ZN8EEPROM_t4beriEj>:

uint8_t EEPROM_t::beri (uint16_t naslov){
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	eb 01       	movw	r28, r22
	while(EECR & (1<<EEPE))					
    363c:	f9 9b       	sbis	0x1f, 1	; 31
    363e:	05 c0       	rjmp	.+10     	; 0x364a <_ZN8EEPROM_t4beriEj+0x14>
		vTaskDelay(1);				// Cakaj da se prejsnje branje/pisanje zakljuci
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
	EECR |= (1<<EEMPE);				//Vklopi interrupt
	EECR |= (1<<EEPE);				//Pisi
}

uint8_t EEPROM_t::beri (uint16_t naslov){
	while(EECR & (1<<EEPE))					
    3648:	f9 cf       	rjmp	.-14     	; 0x363c <_ZN8EEPROM_t4beriEj+0x6>
		vTaskDelay(1);				// Cakaj da se prejsnje branje/pisanje zakljuci
	EEAR = naslov;					//Izberi index bajta na eepromu
    364a:	d2 bd       	out	0x22, r29	; 34
    364c:	c1 bd       	out	0x21, r28	; 33
	EECR |= (1<<EERE);				//Shrani vrednost na zacasen register
    364e:	8f b3       	in	r24, 0x1f	; 31
    3650:	81 60       	ori	r24, 0x01	; 1
    3652:	8f bb       	out	0x1f, r24	; 31
	return EEDR;					//Vrni vrednost
    3654:	80 b5       	in	r24, 0x20	; 32
}
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	08 95       	ret

0000365c <_Z6pwmOFFhc>:
	}
}

void pwmOFF(uint8_t pin, char port)
{
	switch (port)
    365c:	62 34       	cpi	r22, 0x42	; 66
    365e:	79 f5       	brne	.+94     	; 0x36be <_Z6pwmOFFhc+0x62>
	{
		case 'B':
		switch (pin)
    3660:	85 30       	cpi	r24, 0x05	; 5
    3662:	89 f0       	breq	.+34     	; 0x3686 <_Z6pwmOFFhc+0x2a>
    3664:	86 30       	cpi	r24, 0x06	; 6
    3666:	e9 f0       	breq	.+58     	; 0x36a2 <_Z6pwmOFFhc+0x46>
    3668:	84 30       	cpi	r24, 0x04	; 4
    366a:	49 f5       	brne	.+82     	; 0x36be <_Z6pwmOFFhc+0x62>
		{	
			case 4:
				TCCR2A &= ~(1 << COM2A1); //izklopi komparator
    366c:	e0 eb       	ldi	r30, 0xB0	; 176
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	8f 77       	andi	r24, 0x7F	; 127
    3674:	80 83       	st	Z, r24
				if ( (TCCR2A & (1 << COM2B1)) == 0  ){ //Ce je tudi primerjalnik B izklopljen se izklopi
    3676:	80 81       	ld	r24, Z
    3678:	85 fd       	sbrc	r24, 5
    367a:	21 c0       	rjmp	.+66     	; 0x36be <_Z6pwmOFFhc+0x62>
					TCCR2B = 0;
    367c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
					TCNT2 = 0;
    3680:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    3684:	08 95       	ret
				}
			break;
			
			case 5:
				TCCR1A &= ~(1 << COM1A1); //izklopi komparator
    3686:	e0 e8       	ldi	r30, 0x80	; 128
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	8f 77       	andi	r24, 0x7F	; 127
    368e:	80 83       	st	Z, r24
				if ( (TCCR1A & (1 << COM1B1)) == 0  ){ //Ce je tudi primerjalnik B izklopljen se izklopi
    3690:	80 81       	ld	r24, Z
    3692:	85 fd       	sbrc	r24, 5
    3694:	06 c0       	rjmp	.+12     	; 0x36a2 <_Z6pwmOFFhc+0x46>
					TCCR1B = 0;
    3696:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
					TCNT1 = 0;
    369a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    369e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
				}
			case 6:
				TCCR1A &= ~(1 << COM1B1); //izklopi komparator
    36a2:	e0 e8       	ldi	r30, 0x80	; 128
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	8f 7d       	andi	r24, 0xDF	; 223
    36aa:	80 83       	st	Z, r24
				if ( (TCCR1A & (1 << COM1A1)) == 0  ){ //Ce je tudi primerjalnik B izklopljen se izklopi
    36ac:	80 81       	ld	r24, Z
    36ae:	88 23       	and	r24, r24
    36b0:	34 f0       	brlt	.+12     	; 0x36be <_Z6pwmOFFhc+0x62>
					TCCR1B = 0;
    36b2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
					TCNT1 = 0;
    36b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
    36ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    36be:	08 95       	ret

000036c0 <_Z11writeOUTPUThcb>:
#include "avr/io.h"
#include "src/includes/includes.h"
#define ADSCSRA _SFR_MEM8(0xE0)

void writeOUTPUT(unsigned char pin, char port, bool vrednost)
{
    36c0:	1f 93       	push	r17
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	d8 2f       	mov	r29, r24
    36c8:	c6 2f       	mov	r28, r22
    36ca:	14 2f       	mov	r17, r20

	pwmOFF(pin, port); // izklopi pwm
    36cc:	c7 df       	rcall	.-114    	; 0x365c <_Z6pwmOFFhc>
	switch (port)
    36ce:	c4 34       	cpi	r28, 0x44	; 68
    36d0:	f1 f0       	breq	.+60     	; 0x370e <_Z11writeOUTPUThcb+0x4e>
    36d2:	c8 34       	cpi	r28, 0x48	; 72
    36d4:	a9 f1       	breq	.+106    	; 0x3740 <_Z11writeOUTPUThcb+0x80>
    36d6:	c2 34       	cpi	r28, 0x42	; 66
    36d8:	09 f0       	breq	.+2      	; 0x36dc <_Z11writeOUTPUThcb+0x1c>
    36da:	4e c0       	rjmp	.+156    	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
	{

		case 'B':
		vrednost == 1 ? PORTB |= (1 << pin) : PORTB &= ~(1 << pin);
    36dc:	11 23       	and	r17, r17
    36de:	59 f0       	breq	.+22     	; 0x36f6 <_Z11writeOUTPUThcb+0x36>
    36e0:	25 b1       	in	r18, 0x05	; 5
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <_Z11writeOUTPUThcb+0x2c>
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	da 95       	dec	r29
    36ee:	e2 f7       	brpl	.-8      	; 0x36e8 <_Z11writeOUTPUThcb+0x28>
    36f0:	82 2b       	or	r24, r18
    36f2:	85 b9       	out	0x05, r24	; 5
    36f4:	41 c0       	rjmp	.+130    	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
    36f6:	25 b1       	in	r18, 0x05	; 5
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <_Z11writeOUTPUThcb+0x42>
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	da 95       	dec	r29
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <_Z11writeOUTPUThcb+0x3e>
    3706:	80 95       	com	r24
    3708:	82 23       	and	r24, r18
    370a:	85 b9       	out	0x05, r24	; 5
    370c:	35 c0       	rjmp	.+106    	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
		break;
		case 'D':
		vrednost == 1 ? PORTD |= (1 << pin) : PORTD &= ~(1 << pin);
    370e:	11 23       	and	r17, r17
    3710:	59 f0       	breq	.+22     	; 0x3728 <_Z11writeOUTPUThcb+0x68>
    3712:	2b b1       	in	r18, 0x0b	; 11
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	02 c0       	rjmp	.+4      	; 0x371e <_Z11writeOUTPUThcb+0x5e>
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	da 95       	dec	r29
    3720:	e2 f7       	brpl	.-8      	; 0x371a <_Z11writeOUTPUThcb+0x5a>
    3722:	82 2b       	or	r24, r18
    3724:	8b b9       	out	0x0b, r24	; 11
    3726:	28 c0       	rjmp	.+80     	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
    3728:	2b b1       	in	r18, 0x0b	; 11
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	02 c0       	rjmp	.+4      	; 0x3734 <_Z11writeOUTPUThcb+0x74>
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	da 95       	dec	r29
    3736:	e2 f7       	brpl	.-8      	; 0x3730 <_Z11writeOUTPUThcb+0x70>
    3738:	80 95       	com	r24
    373a:	82 23       	and	r24, r18
    373c:	8b b9       	out	0x0b, r24	; 11
    373e:	1c c0       	rjmp	.+56     	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
		break;
		case 'H':
		vrednost == 1 ? PORTH |= (1 << pin) : PORTH &= ~(1 << pin);
    3740:	11 23       	and	r17, r17
    3742:	69 f0       	breq	.+26     	; 0x375e <_Z11writeOUTPUThcb+0x9e>
    3744:	e2 e0       	ldi	r30, 0x02	; 2
    3746:	f1 e0       	ldi	r31, 0x01	; 1
    3748:	20 81       	ld	r18, Z
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <_Z11writeOUTPUThcb+0x94>
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	da 95       	dec	r29
    3756:	e2 f7       	brpl	.-8      	; 0x3750 <_Z11writeOUTPUThcb+0x90>
    3758:	82 2b       	or	r24, r18
    375a:	80 83       	st	Z, r24
    375c:	0d c0       	rjmp	.+26     	; 0x3778 <_Z11writeOUTPUThcb+0xb8>
    375e:	e2 e0       	ldi	r30, 0x02	; 2
    3760:	f1 e0       	ldi	r31, 0x01	; 1
    3762:	20 81       	ld	r18, Z
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	02 c0       	rjmp	.+4      	; 0x376e <_Z11writeOUTPUThcb+0xae>
    376a:	88 0f       	add	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	da 95       	dec	r29
    3770:	e2 f7       	brpl	.-8      	; 0x376a <_Z11writeOUTPUThcb+0xaa>
    3772:	80 95       	com	r24
    3774:	82 23       	and	r24, r18
    3776:	80 83       	st	Z, r24
		break;
	}
}
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	08 95       	ret

00003780 <_Z10readANALOGh>:



uint16_t readANALOG(uint8_t pin)
{
	ADSCSRA |= (1 << ADSC); //Start konverzija
    3780:	e0 ee       	ldi	r30, 0xE0	; 224
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	80 64       	ori	r24, 0x40	; 64
    3788:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)){
    378a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    378e:	86 ff       	sbrs	r24, 6
    3790:	05 c0       	rjmp	.+10     	; 0x379c <_Z10readANALOGh+0x1c>
		
		vTaskDelay(1);
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>


uint16_t readANALOG(uint8_t pin)
{
	ADSCSRA |= (1 << ADSC); //Start konverzija
	while (ADCSRA & (1 << ADSC)){
    379a:	f7 cf       	rjmp	.-18     	; 0x378a <_Z10readANALOGh+0xa>
		vTaskDelay(1);
		
	} //Dokler se bit ne resetira
	
	/* DODAJ */
	return ADCH;
    379c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	08 95       	ret

000037a4 <_Z8writePWMhch>:

void writePWM(uint8_t pin, char port, uint8_t vrednost)
{

	switch (port)
    37a4:	62 34       	cpi	r22, 0x42	; 66
    37a6:	89 f5       	brne	.+98     	; 0x380a <_Z8writePWMhch+0x66>
	{
		case 'B':
		DDRB = DDRB | (0b00000001 << pin); //Nastavi na output
    37a8:	94 b1       	in	r25, 0x04	; 4
    37aa:	21 e0       	ldi	r18, 0x01	; 1
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	08 2e       	mov	r0, r24
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <_Z8writePWMhch+0x12>
    37b2:	22 0f       	add	r18, r18
    37b4:	33 1f       	adc	r19, r19
    37b6:	0a 94       	dec	r0
    37b8:	e2 f7       	brpl	.-8      	; 0x37b2 <_Z8writePWMhch+0xe>
    37ba:	29 2b       	or	r18, r25
    37bc:	24 b9       	out	0x04, r18	; 4
		switch (pin){
    37be:	85 30       	cpi	r24, 0x05	; 5
    37c0:	69 f0       	breq	.+26     	; 0x37dc <_Z8writePWMhch+0x38>
    37c2:	86 30       	cpi	r24, 0x06	; 6
    37c4:	b9 f0       	breq	.+46     	; 0x37f4 <_Z8writePWMhch+0x50>
    37c6:	84 30       	cpi	r24, 0x04	; 4
    37c8:	01 f5       	brne	.+64     	; 0x380a <_Z8writePWMhch+0x66>
			case 4:
				TCCR2A = (1 << WGM21) | (1 << WGM20) | (1 << COM2A1); //fast pwm non inverted
    37ca:	83 e8       	ldi	r24, 0x83	; 131
    37cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				TCCR2B = (1 << CS20); //brez prescalrja
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
				OCR2A = vrednost;		//vrednost kjer se izhod ugasne
    37d6:	40 93 b3 00 	sts	0x00B3, r20	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
			break;
    37da:	08 95       	ret
			
			case 5:
				TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM12);
    37dc:	89 e8       	ldi	r24, 0x89	; 137
    37de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				TCCR1B = (1 << CS10);
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
				OCR1A = vrednost;
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    37ee:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
			break;
    37f2:	08 95       	ret
			
			case 6:
				TCCR1A = (1 << COM1B1) | (1 << WGM10) | (1 << WGM12);
    37f4:	89 e2       	ldi	r24, 0x29	; 41
    37f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				TCCR1B = (1 << CS10);
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
				OCR1B = vrednost;
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    3806:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    380a:	08 95       	ret

0000380c <_Z41__static_initialization_and_destruction_0ii>:

Hardware_t Hardware;
Timers_t Timers;
adsys_t AUSYS_vars;
mozne_barve_t mozne_barve;
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	09 f0       	breq	.+2      	; 0x3812 <_Z41__static_initialization_and_destruction_0ii+0x6>
    3810:	6e c0       	rjmp	.+220    	; 0x38ee <_Z41__static_initialization_and_destruction_0ii+0xe2>
    3812:	6f 3f       	cpi	r22, 0xFF	; 255
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	09 f0       	breq	.+2      	; 0x381a <_Z41__static_initialization_and_destruction_0ii+0xe>
    3818:	6a c0       	rjmp	.+212    	; 0x38ee <_Z41__static_initialization_and_destruction_0ii+0xe2>
extern TaskHandle_t chrg_control;
extern TaskHandle_t thermal_control;
extern TaskHandle_t meas_control;
extern SemaphoreHandle_t voltage_SEM;

struct Hardware_t
    381a:	ec e9       	ldi	r30, 0x9C	; 156
    381c:	f3 e1       	ldi	r31, 0x13	; 19
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e4       	ldi	r25, 0x40	; 64
    3822:	ac e9       	ldi	r26, 0x9C	; 156
    3824:	b5 e4       	ldi	r27, 0x45	; 69
    3826:	80 83       	st	Z, r24
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	a2 83       	std	Z+2, r26	; 0x02
    382c:	b3 83       	std	Z+3, r27	; 0x03
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	a0 ea       	ldi	r26, 0xA0	; 160
    3834:	b0 e4       	ldi	r27, 0x40	; 64
    3836:	84 83       	std	Z+4, r24	; 0x04
    3838:	95 83       	std	Z+5, r25	; 0x05
    383a:	a6 83       	std	Z+6, r26	; 0x06
    383c:	b7 83       	std	Z+7, r27	; 0x07
    383e:	10 86       	std	Z+8, r1	; 0x08
    3840:	11 86       	std	Z+9, r1	; 0x09
    3842:	14 86       	std	Z+12, r1	; 0x0c
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	85 87       	std	Z+13, r24	; 0x0d
    3848:	16 86       	std	Z+14, r1	; 0x0e
    384a:	17 86       	std	Z+15, r1	; 0x0f
    384c:	10 8a       	std	Z+16, r1	; 0x10
    384e:	11 8a       	std	Z+17, r1	; 0x11
    3850:	13 8a       	std	Z+19, r1	; 0x13
    3852:	12 8a       	std	Z+18, r1	; 0x12
    3854:	14 8a       	std	Z+20, r1	; 0x14
    3856:	15 8a       	std	Z+21, r1	; 0x15
    3858:	16 8a       	std	Z+22, r1	; 0x16
    385a:	17 8a       	std	Z+23, r1	; 0x17
    Fade_Breathe,
    LENGTH_2,
    OFF_A
};

struct adsys_t
    385c:	e5 e6       	ldi	r30, 0x65	; 101
    385e:	f3 e1       	ldi	r31, 0x13	; 19
    3860:	84 e0       	ldi	r24, 0x04	; 4
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	91 83       	std	Z+1, r25	; 0x01
    3866:	80 83       	st	Z, r24
    3868:	13 82       	std	Z+3, r1	; 0x03
    386a:	12 82       	std	Z+2, r1	; 0x02
    386c:	15 82       	std	Z+5, r1	; 0x05
    386e:	14 82       	std	Z+4, r1	; 0x04
    3870:	17 82       	std	Z+7, r1	; 0x07
    3872:	16 82       	std	Z+6, r1	; 0x06
    3874:	11 86       	std	Z+9, r1	; 0x09
    3876:	10 86       	std	Z+8, r1	; 0x08
	VIJOLICNA,
	ROZA,
	LENGHT
};

struct mozne_barve_t
    3878:	ed e3       	ldi	r30, 0x3D	; 61
    387a:	f3 e1       	ldi	r31, 0x13	; 19
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	80 83       	st	Z, r24
    3880:	81 83       	std	Z+1, r24	; 0x01
    3882:	82 83       	std	Z+2, r24	; 0x02
    3884:	13 82       	std	Z+3, r1	; 0x03
    3886:	84 83       	std	Z+4, r24	; 0x04
    3888:	15 82       	std	Z+5, r1	; 0x05
    388a:	86 83       	std	Z+6, r24	; 0x06
    388c:	17 82       	std	Z+7, r1	; 0x07
    388e:	10 86       	std	Z+8, r1	; 0x08
    3890:	11 86       	std	Z+9, r1	; 0x09
    3892:	12 86       	std	Z+10, r1	; 0x0a
    3894:	83 87       	std	Z+11, r24	; 0x0b
    3896:	84 87       	std	Z+12, r24	; 0x0c
    3898:	85 87       	std	Z+13, r24	; 0x0d
    389a:	16 86       	std	Z+14, r1	; 0x0e
    389c:	17 86       	std	Z+15, r1	; 0x0f
    389e:	80 8b       	std	Z+16, r24	; 0x10
    38a0:	81 8b       	std	Z+17, r24	; 0x11
    38a2:	82 8b       	std	Z+18, r24	; 0x12
    38a4:	13 8a       	std	Z+19, r1	; 0x13
    38a6:	84 8b       	std	Z+20, r24	; 0x14
    38a8:	85 8b       	std	Z+21, r24	; 0x15
    38aa:	84 e1       	ldi	r24, 0x14	; 20
    38ac:	86 8b       	std	Z+22, r24	; 0x16
    38ae:	83 e9       	ldi	r24, 0x93	; 147
    38b0:	87 8b       	std	Z+23, r24	; 0x17
    38b2:	f1 8f       	std	Z+25, r31	; 0x19
    38b4:	e0 8f       	std	Z+24, r30	; 0x18
    38b6:	80 e4       	ldi	r24, 0x40	; 64
    38b8:	93 e1       	ldi	r25, 0x13	; 19
    38ba:	93 8f       	std	Z+27, r25	; 0x1b
    38bc:	82 8f       	std	Z+26, r24	; 0x1a
    38be:	83 e4       	ldi	r24, 0x43	; 67
    38c0:	93 e1       	ldi	r25, 0x13	; 19
    38c2:	95 8f       	std	Z+29, r25	; 0x1d
    38c4:	84 8f       	std	Z+28, r24	; 0x1c
    38c6:	86 e4       	ldi	r24, 0x46	; 70
    38c8:	93 e1       	ldi	r25, 0x13	; 19
    38ca:	97 8f       	std	Z+31, r25	; 0x1f
    38cc:	86 8f       	std	Z+30, r24	; 0x1e
    38ce:	89 e4       	ldi	r24, 0x49	; 73
    38d0:	93 e1       	ldi	r25, 0x13	; 19
    38d2:	91 a3       	std	Z+33, r25	; 0x21
    38d4:	80 a3       	std	Z+32, r24	; 0x20
    38d6:	8c e4       	ldi	r24, 0x4C	; 76
    38d8:	93 e1       	ldi	r25, 0x13	; 19
    38da:	93 a3       	std	Z+35, r25	; 0x23
    38dc:	82 a3       	std	Z+34, r24	; 0x22
    38de:	8f e4       	ldi	r24, 0x4F	; 79
    38e0:	93 e1       	ldi	r25, 0x13	; 19
    38e2:	95 a3       	std	Z+37, r25	; 0x25
    38e4:	84 a3       	std	Z+36, r24	; 0x24
    38e6:	82 e5       	ldi	r24, 0x52	; 82
    38e8:	93 e1       	ldi	r25, 0x13	; 19
    38ea:	97 a3       	std	Z+39, r25	; 0x27
    38ec:	86 a3       	std	Z+38, r24	; 0x26
    38ee:	08 95       	ret

000038f0 <_GLOBAL__sub_I_Hardware>:
    38f0:	6f ef       	ldi	r22, 0xFF	; 255
    38f2:	7f ef       	ldi	r23, 0xFF	; 255
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	89 cf       	rjmp	.-238    	; 0x380c <_Z41__static_initialization_and_destruction_0ii>
    38fa:	08 95       	ret

000038fc <_Z9polnjenjePv>:
void polnjenje(void *paramOdTaska)
{

	while (true)
	{
		xSemaphoreTake(voltage_SEM, portMAX_DELAY);
    38fc:	6f ef       	ldi	r22, 0xFF	; 255
    38fe:	7f ef       	ldi	r23, 0xFF	; 255
    3900:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <voltage_SEM>
    3904:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <voltage_SEM+0x1>
    3908:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueSemaphoreTake>

		if (Hardware.napetost >= 4150 && Hardware.POLKONC == 0)
    390c:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <Hardware+0x12>
    3910:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <Hardware+0x13>
    3914:	86 33       	cpi	r24, 0x36	; 54
    3916:	20 e1       	ldi	r18, 0x10	; 16
    3918:	92 07       	cpc	r25, r18
    391a:	40 f0       	brcs	.+16     	; 0x392c <_Z9polnjenjePv+0x30>
    391c:	20 91 a6 13 	lds	r18, 0x13A6	; 0x8013a6 <Hardware+0xa>
    3920:	21 11       	cpse	r18, r1
    3922:	04 c0       	rjmp	.+8      	; 0x392c <_Z9polnjenjePv+0x30>
		{
			Hardware.POLKONC = 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 a6 13 	sts	0x13A6, r24	; 0x8013a6 <Hardware+0xa>
    392a:	08 c0       	rjmp	.+16     	; 0x393c <_Z9polnjenjePv+0x40>

			//EEPROM.update(battery_eeprom_addr, Hardware.POLKONC); //Posodobitev EEPROM-a na bajtu 1 z spremenljivko Hardware.POLKONC; Na vsake 5000 pisanj zamenja bajt na katerega piše
		}

		else if (Hardware.napetost <= 4000 && Hardware.POLKONC)
    392c:	81 3a       	cpi	r24, 0xA1	; 161
    392e:	9f 40       	sbci	r25, 0x0F	; 15
    3930:	28 f4       	brcc	.+10     	; 0x393c <_Z9polnjenjePv+0x40>
    3932:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <Hardware+0xa>
    3936:	81 11       	cpse	r24, r1
		{ //Če se dokonca napolne, se bo polnjenje lahko nadaljevalo šele, ko se baterija izprazne za približno 10% (3V = 0%, 4.2V = 100%, 4.1V = 90% . 3.95V = 80% oz. 10% manj ;  napetost = 0.012 * procent + 3);
			Hardware.POLKONC = 0;
    3938:	10 92 a6 13 	sts	0x13A6, r1	; 0x8013a6 <Hardware+0xa>

			//EEPROM.update(battery_eeprom_addr, Hardware.POLKONC);
		}

		xSemaphoreGive(voltage_SEM);
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	70 e0       	ldi	r23, 0x00	; 0
    3946:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <voltage_SEM>
    394a:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <voltage_SEM+0x1>
    394e:	0e 94 48 05 	call	0xa90	; 0xa90 <xQueueGenericSend>
		

		if ((Hardware.POLKONC == 1 || Hardware.AMP_oheat || napajalnik.vrednost() == 0) && Hardware.polnjenjeON)
    3952:	80 91 a6 13 	lds	r24, 0x13A6	; 0x8013a6 <Hardware+0xa>
    3956:	81 11       	cpse	r24, r1
    3958:	09 c0       	rjmp	.+18     	; 0x396c <_Z9polnjenjePv+0x70>
    395a:	c0 91 a8 13 	lds	r28, 0x13A8	; 0x8013a8 <Hardware+0xc>
    395e:	c1 11       	cpse	r28, r1
    3960:	05 c0       	rjmp	.+10     	; 0x396c <_Z9polnjenjePv+0x70>
    3962:	8b e1       	ldi	r24, 0x1B	; 27
    3964:	93 e1       	ldi	r25, 0x13	; 19
    3966:	d0 d0       	rcall	.+416    	; 0x3b08 <_ZN4VHOD8vrednostEv>
    3968:	81 11       	cpse	r24, r1
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <_Z9polnjenjePv+0x74>
    396c:	c0 91 a7 13 	lds	r28, 0x13A7	; 0x8013a7 <Hardware+0xb>
    3970:	cc 23       	and	r28, r28
    3972:	39 f0       	breq	.+14     	; 0x3982 <_Z9polnjenjePv+0x86>
		{
			writeOUTPUT(PIN6,'D',0);
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	64 e4       	ldi	r22, 0x44	; 68
    3978:	86 e0       	ldi	r24, 0x06	; 6
    397a:	a2 de       	rcall	.-700    	; 0x36c0 <_Z11writeOUTPUThcb>
			Hardware.polnjenjeON = false;
    397c:	10 92 a7 13 	sts	0x13A7, r1	; 0x8013a7 <Hardware+0xb>
    3980:	23 c0       	rjmp	.+70     	; 0x39c8 <_Z9polnjenjePv+0xcc>
		}

		else if (Hardware.POLKONC == 0 && napajalnik.vrednost() && Hardware.AMP_oheat == false && !Hardware.polnjenjeON)
    3982:	d0 91 a6 13 	lds	r29, 0x13A6	; 0x8013a6 <Hardware+0xa>
    3986:	d1 11       	cpse	r29, r1
    3988:	12 c0       	rjmp	.+36     	; 0x39ae <_Z9polnjenjePv+0xb2>
    398a:	8b e1       	ldi	r24, 0x1B	; 27
    398c:	93 e1       	ldi	r25, 0x13	; 19
    398e:	bc d0       	rcall	.+376    	; 0x3b08 <_ZN4VHOD8vrednostEv>
    3990:	c8 2f       	mov	r28, r24
    3992:	88 23       	and	r24, r24
    3994:	61 f0       	breq	.+24     	; 0x39ae <_Z9polnjenjePv+0xb2>
    3996:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <Hardware+0xc>
    399a:	81 11       	cpse	r24, r1
    399c:	05 c0       	rjmp	.+10     	; 0x39a8 <_Z9polnjenjePv+0xac>
    399e:	90 91 a7 13 	lds	r25, 0x13A7	; 0x8013a7 <Hardware+0xb>
    39a2:	91 11       	cpse	r25, r1
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <_Z9polnjenjePv+0xb0>
    39a6:	03 c0       	rjmp	.+6      	; 0x39ae <_Z9polnjenjePv+0xb2>
    39a8:	cd 2f       	mov	r28, r29
    39aa:	01 c0       	rjmp	.+2      	; 0x39ae <_Z9polnjenjePv+0xb2>
    39ac:	c8 2f       	mov	r28, r24
    39ae:	cc 23       	and	r28, r28
    39b0:	59 f0       	breq	.+22     	; 0x39c8 <_Z9polnjenjePv+0xcc>
		{
			delay_FRTOS(1000);
    39b2:	8e e3       	ldi	r24, 0x3E	; 62
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
			writeOUTPUT(PIN6,'D',1);
    39ba:	41 e0       	ldi	r20, 0x01	; 1
    39bc:	64 e4       	ldi	r22, 0x44	; 68
    39be:	86 e0       	ldi	r24, 0x06	; 6
    39c0:	7f de       	rcall	.-770    	; 0x36c0 <_Z11writeOUTPUThcb>
			Hardware.polnjenjeON = true;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <Hardware+0xb>
		}
		delay_FRTOS(100);
    39c8:	86 e0       	ldi	r24, 0x06	; 6
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
extern VHOD napajalnik;

void polnjenje(void *paramOdTaska)
{

	while (true)
    39d0:	95 cf       	rjmp	.-214    	; 0x38fc <_Z9polnjenjePv>

000039d2 <_Z6zaslonPv>:
void zaslon(void *paramOdTaska)
{

    while (1)
    {
        if (Hardware.display_enabled)
    39d2:	c0 91 a9 13 	lds	r28, 0x13A9	; 0x8013a9 <Hardware+0xd>
    39d6:	cc 23       	and	r28, r28
    39d8:	09 f4       	brne	.+2      	; 0x39dc <_Z6zaslonPv+0xa>
    39da:	45 c0       	rjmp	.+138    	; 0x3a66 <_Z6zaslonPv+0x94>
        {
            if (napajalnik.vrednost() == 0)
    39dc:	8b e1       	ldi	r24, 0x1B	; 27
    39de:	93 e1       	ldi	r25, 0x13	; 19
    39e0:	93 d0       	rcall	.+294    	; 0x3b08 <_ZN4VHOD8vrednostEv>
    39e2:	d8 2f       	mov	r29, r24
    39e4:	81 11       	cpse	r24, r1
    39e6:	24 c0       	rjmp	.+72     	; 0x3a30 <_Z6zaslonPv+0x5e>
            {
                if (Timers.LCD_timer.vrednost() >= 9000 || !Hardware.is_Powered_UP)
    39e8:	89 e7       	ldi	r24, 0x79	; 121
    39ea:	93 e1       	ldi	r25, 0x13	; 19
    39ec:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    39f0:	68 32       	cpi	r22, 0x28	; 40
    39f2:	73 42       	sbci	r23, 0x23	; 35
    39f4:	81 05       	cpc	r24, r1
    39f6:	91 05       	cpc	r25, r1
    39f8:	20 f4       	brcc	.+8      	; 0x3a02 <_Z6zaslonPv+0x30>
    39fa:	80 91 a4 13 	lds	r24, 0x13A4	; 0x8013a4 <Hardware+0x8>
    39fe:	81 11       	cpse	r24, r1
    3a00:	cd 2f       	mov	r28, r29
    3a02:	cc 23       	and	r28, r28
    3a04:	41 f0       	breq	.+16     	; 0x3a16 <_Z6zaslonPv+0x44>
                {
                    Timers.LCD_timer.ponastavi();
    3a06:	89 e7       	ldi	r24, 0x79	; 121
    3a08:	93 e1       	ldi	r25, 0x13	; 19
    3a0a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
                    PORTB &= ~(1 << lcd_pb_pin);
    3a0e:	85 b1       	in	r24, 0x05	; 5
    3a10:	8b 7f       	andi	r24, 0xFB	; 251
    3a12:	85 b9       	out	0x05, r24	; 5
    3a14:	42 c0       	rjmp	.+132    	; 0x3a9a <_Z6zaslonPv+0xc8>
                }
                else if (Timers.LCD_timer.vrednost() > 6000)
    3a16:	89 e7       	ldi	r24, 0x79	; 121
    3a18:	93 e1       	ldi	r25, 0x13	; 19
    3a1a:	0e 94 c8 00 	call	0x190	; 0x190 <_ZN8castimer8vrednostEv>
    3a1e:	61 37       	cpi	r22, 0x71	; 113
    3a20:	77 41       	sbci	r23, 0x17	; 23
    3a22:	81 05       	cpc	r24, r1
    3a24:	91 05       	cpc	r25, r1
    3a26:	c8 f1       	brcs	.+114    	; 0x3a9a <_Z6zaslonPv+0xc8>
                { //Prižig vsakih 6s za 3s, če zunanje napajanje ni priključeno
                    PORTB |= (1 << lcd_pb_pin);
    3a28:	85 b1       	in	r24, 0x05	; 5
    3a2a:	84 60       	ori	r24, 0x04	; 4
    3a2c:	85 b9       	out	0x05, r24	; 5
    3a2e:	35 c0       	rjmp	.+106    	; 0x3a9a <_Z6zaslonPv+0xc8>
                }
            }

            else if (Hardware.polnjenjeON)
    3a30:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <Hardware+0xb>
    3a34:	88 23       	and	r24, r24
    3a36:	69 f0       	breq	.+26     	; 0x3a52 <_Z6zaslonPv+0x80>
            {                     //Če je zunanje napajanje priključeno in baterije niso napolnjene, zaslon utripa
                delay_FRTOS(500); //1Hz utripanje
    3a38:	8f e1       	ldi	r24, 0x1F	; 31
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
                PORTB = PORTB ^ 0b00000100;
    3a40:	95 b1       	in	r25, 0x05	; 5
    3a42:	84 e0       	ldi	r24, 0x04	; 4
    3a44:	89 27       	eor	r24, r25
    3a46:	85 b9       	out	0x05, r24	; 5
                Timers.LCD_timer.ponastavi();
    3a48:	89 e7       	ldi	r24, 0x79	; 121
    3a4a:	93 e1       	ldi	r25, 0x13	; 19
    3a4c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN8castimer9ponastaviEv>
    3a50:	24 c0       	rjmp	.+72     	; 0x3a9a <_Z6zaslonPv+0xc8>
            }
            else // Ce je napajalnik izkljucen in se ne polni, potem 3s gori
            {
                PORTB |= (1 << lcd_pb_pin);
    3a52:	85 b1       	in	r24, 0x05	; 5
    3a54:	84 60       	ori	r24, 0x04	; 4
    3a56:	85 b9       	out	0x05, r24	; 5
                delay_FRTOS(3000);
    3a58:	8b eb       	ldi	r24, 0xBB	; 187
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
                Hardware.display_enabled = false;
    3a60:	10 92 a9 13 	sts	0x13A9, r1	; 0x8013a9 <Hardware+0xd>
    3a64:	1a c0       	rjmp	.+52     	; 0x3a9a <_Z6zaslonPv+0xc8>
            }
        }
        else
        {
            PORTB &= ~(1 << lcd_pb_pin);
    3a66:	85 b1       	in	r24, 0x05	; 5
    3a68:	8b 7f       	andi	r24, 0xFB	; 251
    3a6a:	85 b9       	out	0x05, r24	; 5
            holdTASK(zaslon_control); //Resuma se v eventih
    3a6c:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    3a70:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
    3a74:	0e 94 f7 09 	call	0x13ee	; 0x13ee <eTaskGetState>
    3a78:	83 30       	cpi	r24, 0x03	; 3
    3a7a:	39 f0       	breq	.+14     	; 0x3a8a <_Z6zaslonPv+0xb8>
    3a7c:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    3a80:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
    3a84:	89 2b       	or	r24, r25
    3a86:	09 f0       	breq	.+2      	; 0x3a8a <_Z6zaslonPv+0xb8>
    3a88:	c1 e0       	ldi	r28, 0x01	; 1
    3a8a:	cc 23       	and	r28, r28
    3a8c:	31 f0       	breq	.+12     	; 0x3a9a <_Z6zaslonPv+0xc8>
    3a8e:	80 91 fb 12 	lds	r24, 0x12FB	; 0x8012fb <zaslon_control>
    3a92:	90 91 fc 12 	lds	r25, 0x12FC	; 0x8012fc <zaslon_control+0x1>
    3a96:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspend>
        }
        delay_FRTOS(200);
    3a9a:	8c e0       	ldi	r24, 0x0C	; 12
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>
extern VHOD napajalnik;

void zaslon(void *paramOdTaska)
{

    while (1)
    3aa2:	97 cf       	rjmp	.-210    	; 0x39d2 <_Z6zaslonPv>

00003aa4 <_Z7thermalPv>:

void thermal(void *paramOdTaska)
{
  while (true)
  {
    delay_FRTOS(6000);
    3aa4:	87 e7       	ldi	r24, 0x77	; 119
    3aa6:	91 e0       	ldi	r25, 0x01	; 1
    3aa8:	0e 94 cf 0c 	call	0x199e	; 0x199e <vTaskDelay>

    float AMP_Temp_S_Voltage = (float)readANALOG(1) * Hardware.REF_mVOLT / 1023.00f;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	68 de       	rcall	.-816    	; 0x3780 <_Z10readANALOGh>
    3ab0:	cc e9       	ldi	r28, 0x9C	; 156
    3ab2:	d3 e1       	ldi	r29, 0x13	; 19
    3ab4:	c8 80       	ld	r12, Y
    3ab6:	d9 80       	ldd	r13, Y+1	; 0x01
    3ab8:	ea 80       	ldd	r14, Y+2	; 0x02
    3aba:	fb 80       	ldd	r15, Y+3	; 0x03
    3abc:	bc 01       	movw	r22, r24
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	72 d1       	rcall	.+740    	; 0x3da8 <__floatunsisf>
    3ac4:	a7 01       	movw	r20, r14
    3ac6:	96 01       	movw	r18, r12
    3ac8:	01 d2       	rcall	.+1026   	; 0x3ecc <__mulsf3>
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 ec       	ldi	r19, 0xC0	; 192
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	54 e4       	ldi	r21, 0x44	; 68
    3ad2:	d6 d0       	rcall	.+428    	; 0x3c80 <__divsf3>
    Hardware.Amplifier_temp = (float)(-0.073f) * (float)AMP_Temp_S_Voltage + 192.754f;
    3ad4:	26 e0       	ldi	r18, 0x06	; 6
    3ad6:	31 e8       	ldi	r19, 0x81	; 129
    3ad8:	45 e9       	ldi	r20, 0x95	; 149
    3ada:	5d eb       	ldi	r21, 0xBD	; 189
    3adc:	f7 d1       	rcall	.+1006   	; 0x3ecc <__mulsf3>
    3ade:	26 e0       	ldi	r18, 0x06	; 6
    3ae0:	31 ec       	ldi	r19, 0xC1	; 193
    3ae2:	40 e4       	ldi	r20, 0x40	; 64
    3ae4:	53 e4       	ldi	r21, 0x43	; 67
    3ae6:	68 d0       	rcall	.+208    	; 0x3bb8 <__addsf3>
    3ae8:	6e 87       	std	Y+14, r22	; 0x0e
    3aea:	7f 87       	std	Y+15, r23	; 0x0f
    3aec:	88 8b       	std	Y+16, r24	; 0x10
    3aee:	99 8b       	std	Y+17, r25	; 0x11

    if (Hardware.Amplifier_temp > 60)
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e7       	ldi	r20, 0x70	; 112
    3af6:	52 e4       	ldi	r21, 0x42	; 66
    3af8:	e5 d1       	rcall	.+970    	; 0x3ec4 <__gesf2>
    3afa:	18 16       	cp	r1, r24
    3afc:	9c f6       	brge	.-90     	; 0x3aa4 <_Z7thermalPv>
    {
      Hardware.AMP_oheat = true;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	80 93 a8 13 	sts	0x13A8, r24	; 0x8013a8 <Hardware+0xc>
      Shutdown();
    3b04:	ee da       	rcall	.-2596   	; 0x30e2 <_Z8Shutdownv>
    3b06:	ce cf       	rjmp	.-100    	; 0x3aa4 <_Z7thermalPv>

00003b08 <_ZN4VHOD8vrednostEv>:
    3b08:	fc 01       	movw	r30, r24
	{
		rs_edge = false;
		return true;
	}
	return false;
}
    3b0a:	86 81       	ldd	r24, Z+6	; 0x06
    3b0c:	82 34       	cpi	r24, 0x42	; 66
    3b0e:	b9 f0       	breq	.+46     	; 0x3b3e <_ZN4VHOD8vrednostEv+0x36>
    3b10:	84 34       	cpi	r24, 0x44	; 68
    3b12:	49 f5       	brne	.+82     	; 0x3b66 <_ZN4VHOD8vrednostEv+0x5e>
    3b14:	49 b1       	in	r20, 0x09	; 9
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	9c 01       	movw	r18, r24
    3b1c:	04 80       	ldd	r0, Z+4	; 0x04
    3b1e:	02 c0       	rjmp	.+4      	; 0x3b24 <_ZN4VHOD8vrednostEv+0x1c>
    3b20:	22 0f       	add	r18, r18
    3b22:	33 1f       	adc	r19, r19
    3b24:	0a 94       	dec	r0
    3b26:	e2 f7       	brpl	.-8      	; 0x3b20 <_ZN4VHOD8vrednostEv+0x18>
    3b28:	84 2f       	mov	r24, r20
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	82 23       	and	r24, r18
    3b2e:	93 23       	and	r25, r19
    3b30:	21 e0       	ldi	r18, 0x01	; 1
    3b32:	18 16       	cp	r1, r24
    3b34:	19 06       	cpc	r1, r25
    3b36:	0c f0       	brlt	.+2      	; 0x3b3a <_ZN4VHOD8vrednostEv+0x32>
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	21 83       	std	Z+1, r18	; 0x01
    3b3c:	14 c0       	rjmp	.+40     	; 0x3b66 <_ZN4VHOD8vrednostEv+0x5e>
    3b3e:	43 b1       	in	r20, 0x03	; 3
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9c 01       	movw	r18, r24
    3b46:	04 80       	ldd	r0, Z+4	; 0x04
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <_ZN4VHOD8vrednostEv+0x46>
    3b4a:	22 0f       	add	r18, r18
    3b4c:	33 1f       	adc	r19, r19
    3b4e:	0a 94       	dec	r0
    3b50:	e2 f7       	brpl	.-8      	; 0x3b4a <_ZN4VHOD8vrednostEv+0x42>
    3b52:	84 2f       	mov	r24, r20
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	82 23       	and	r24, r18
    3b58:	93 23       	and	r25, r19
    3b5a:	21 e0       	ldi	r18, 0x01	; 1
    3b5c:	18 16       	cp	r1, r24
    3b5e:	19 06       	cpc	r1, r25
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <_ZN4VHOD8vrednostEv+0x5c>
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	21 83       	std	Z+1, r18	; 0x01
    3b66:	87 81       	ldd	r24, Z+7	; 0x07
    3b68:	90 85       	ldd	r25, Z+8	; 0x08
    3b6a:	89 2b       	or	r24, r25
    3b6c:	21 f0       	breq	.+8      	; 0x3b76 <_ZN4VHOD8vrednostEv+0x6e>
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	89 27       	eor	r24, r25
    3b74:	81 83       	std	Z+1, r24	; 0x01
    3b76:	90 81       	ld	r25, Z
    3b78:	81 81       	ldd	r24, Z+1	; 0x01
    3b7a:	98 17       	cp	r25, r24
    3b7c:	31 f0       	breq	.+12     	; 0x3b8a <_ZN4VHOD8vrednostEv+0x82>
    3b7e:	88 23       	and	r24, r24
    3b80:	21 f0       	breq	.+8      	; 0x3b8a <_ZN4VHOD8vrednostEv+0x82>
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	92 83       	std	Z+2, r25	; 0x02
    3b86:	80 83       	st	Z, r24
    3b88:	08 95       	ret
    3b8a:	98 17       	cp	r25, r24
    3b8c:	19 f0       	breq	.+6      	; 0x3b94 <_ZN4VHOD8vrednostEv+0x8c>
    3b8e:	91 e0       	ldi	r25, 0x01	; 1
    3b90:	93 83       	std	Z+3, r25	; 0x03
    3b92:	80 83       	st	Z, r24
    3b94:	08 95       	ret

00003b96 <_ZN4VHOD11fallingEdgeEv>:

bool VHOD::fallingEdge()
{
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	ec 01       	movw	r28, r24
	vrednost();
    3b9c:	b5 df       	rcall	.-150    	; 0x3b08 <_ZN4VHOD8vrednostEv>
	if (trenutno_stanje)
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	88 23       	and	r24, r24
    3ba2:	19 f0       	breq	.+6      	; 0x3baa <_ZN4VHOD11fallingEdgeEv+0x14>
	{
		fl_edge = false;
    3ba4:	1b 82       	std	Y+3, r1	; 0x03
	else if (fl_edge)
	{
		fl_edge = false;
		return true;
	}
	return false;
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	03 c0       	rjmp	.+6      	; 0x3bb0 <_ZN4VHOD11fallingEdgeEv+0x1a>
	vrednost();
	if (trenutno_stanje)
	{
		fl_edge = false;
	}
	else if (fl_edge)
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	81 11       	cpse	r24, r1
	{
		fl_edge = false;
    3bae:	1b 82       	std	Y+3, r1	; 0x03
		return true;
	}
	return false;
}
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <__subsf3>:
    3bb6:	50 58       	subi	r21, 0x80	; 128

00003bb8 <__addsf3>:
    3bb8:	bb 27       	eor	r27, r27
    3bba:	aa 27       	eor	r26, r26
    3bbc:	0e d0       	rcall	.+28     	; 0x3bda <__addsf3x>
    3bbe:	48 c1       	rjmp	.+656    	; 0x3e50 <__fp_round>
    3bc0:	39 d1       	rcall	.+626    	; 0x3e34 <__fp_pscA>
    3bc2:	30 f0       	brcs	.+12     	; 0x3bd0 <__addsf3+0x18>
    3bc4:	3e d1       	rcall	.+636    	; 0x3e42 <__fp_pscB>
    3bc6:	20 f0       	brcs	.+8      	; 0x3bd0 <__addsf3+0x18>
    3bc8:	31 f4       	brne	.+12     	; 0x3bd6 <__addsf3+0x1e>
    3bca:	9f 3f       	cpi	r25, 0xFF	; 255
    3bcc:	11 f4       	brne	.+4      	; 0x3bd2 <__addsf3+0x1a>
    3bce:	1e f4       	brtc	.+6      	; 0x3bd6 <__addsf3+0x1e>
    3bd0:	2e c1       	rjmp	.+604    	; 0x3e2e <__fp_nan>
    3bd2:	0e f4       	brtc	.+2      	; 0x3bd6 <__addsf3+0x1e>
    3bd4:	e0 95       	com	r30
    3bd6:	e7 fb       	bst	r30, 7
    3bd8:	24 c1       	rjmp	.+584    	; 0x3e22 <__fp_inf>

00003bda <__addsf3x>:
    3bda:	e9 2f       	mov	r30, r25
    3bdc:	4a d1       	rcall	.+660    	; 0x3e72 <__fp_split3>
    3bde:	80 f3       	brcs	.-32     	; 0x3bc0 <__addsf3+0x8>
    3be0:	ba 17       	cp	r27, r26
    3be2:	62 07       	cpc	r22, r18
    3be4:	73 07       	cpc	r23, r19
    3be6:	84 07       	cpc	r24, r20
    3be8:	95 07       	cpc	r25, r21
    3bea:	18 f0       	brcs	.+6      	; 0x3bf2 <__addsf3x+0x18>
    3bec:	71 f4       	brne	.+28     	; 0x3c0a <__addsf3x+0x30>
    3bee:	9e f5       	brtc	.+102    	; 0x3c56 <__addsf3x+0x7c>
    3bf0:	62 c1       	rjmp	.+708    	; 0x3eb6 <__fp_zero>
    3bf2:	0e f4       	brtc	.+2      	; 0x3bf6 <__addsf3x+0x1c>
    3bf4:	e0 95       	com	r30
    3bf6:	0b 2e       	mov	r0, r27
    3bf8:	ba 2f       	mov	r27, r26
    3bfa:	a0 2d       	mov	r26, r0
    3bfc:	0b 01       	movw	r0, r22
    3bfe:	b9 01       	movw	r22, r18
    3c00:	90 01       	movw	r18, r0
    3c02:	0c 01       	movw	r0, r24
    3c04:	ca 01       	movw	r24, r20
    3c06:	a0 01       	movw	r20, r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	ff 27       	eor	r31, r31
    3c0c:	59 1b       	sub	r21, r25
    3c0e:	99 f0       	breq	.+38     	; 0x3c36 <__addsf3x+0x5c>
    3c10:	59 3f       	cpi	r21, 0xF9	; 249
    3c12:	50 f4       	brcc	.+20     	; 0x3c28 <__addsf3x+0x4e>
    3c14:	50 3e       	cpi	r21, 0xE0	; 224
    3c16:	68 f1       	brcs	.+90     	; 0x3c72 <__addsf3x+0x98>
    3c18:	1a 16       	cp	r1, r26
    3c1a:	f0 40       	sbci	r31, 0x00	; 0
    3c1c:	a2 2f       	mov	r26, r18
    3c1e:	23 2f       	mov	r18, r19
    3c20:	34 2f       	mov	r19, r20
    3c22:	44 27       	eor	r20, r20
    3c24:	58 5f       	subi	r21, 0xF8	; 248
    3c26:	f3 cf       	rjmp	.-26     	; 0x3c0e <__addsf3x+0x34>
    3c28:	46 95       	lsr	r20
    3c2a:	37 95       	ror	r19
    3c2c:	27 95       	ror	r18
    3c2e:	a7 95       	ror	r26
    3c30:	f0 40       	sbci	r31, 0x00	; 0
    3c32:	53 95       	inc	r21
    3c34:	c9 f7       	brne	.-14     	; 0x3c28 <__addsf3x+0x4e>
    3c36:	7e f4       	brtc	.+30     	; 0x3c56 <__addsf3x+0x7c>
    3c38:	1f 16       	cp	r1, r31
    3c3a:	ba 0b       	sbc	r27, r26
    3c3c:	62 0b       	sbc	r22, r18
    3c3e:	73 0b       	sbc	r23, r19
    3c40:	84 0b       	sbc	r24, r20
    3c42:	ba f0       	brmi	.+46     	; 0x3c72 <__addsf3x+0x98>
    3c44:	91 50       	subi	r25, 0x01	; 1
    3c46:	a1 f0       	breq	.+40     	; 0x3c70 <__addsf3x+0x96>
    3c48:	ff 0f       	add	r31, r31
    3c4a:	bb 1f       	adc	r27, r27
    3c4c:	66 1f       	adc	r22, r22
    3c4e:	77 1f       	adc	r23, r23
    3c50:	88 1f       	adc	r24, r24
    3c52:	c2 f7       	brpl	.-16     	; 0x3c44 <__addsf3x+0x6a>
    3c54:	0e c0       	rjmp	.+28     	; 0x3c72 <__addsf3x+0x98>
    3c56:	ba 0f       	add	r27, r26
    3c58:	62 1f       	adc	r22, r18
    3c5a:	73 1f       	adc	r23, r19
    3c5c:	84 1f       	adc	r24, r20
    3c5e:	48 f4       	brcc	.+18     	; 0x3c72 <__addsf3x+0x98>
    3c60:	87 95       	ror	r24
    3c62:	77 95       	ror	r23
    3c64:	67 95       	ror	r22
    3c66:	b7 95       	ror	r27
    3c68:	f7 95       	ror	r31
    3c6a:	9e 3f       	cpi	r25, 0xFE	; 254
    3c6c:	08 f0       	brcs	.+2      	; 0x3c70 <__addsf3x+0x96>
    3c6e:	b3 cf       	rjmp	.-154    	; 0x3bd6 <__addsf3+0x1e>
    3c70:	93 95       	inc	r25
    3c72:	88 0f       	add	r24, r24
    3c74:	08 f0       	brcs	.+2      	; 0x3c78 <__addsf3x+0x9e>
    3c76:	99 27       	eor	r25, r25
    3c78:	ee 0f       	add	r30, r30
    3c7a:	97 95       	ror	r25
    3c7c:	87 95       	ror	r24
    3c7e:	08 95       	ret

00003c80 <__divsf3>:
    3c80:	0c d0       	rcall	.+24     	; 0x3c9a <__divsf3x>
    3c82:	e6 c0       	rjmp	.+460    	; 0x3e50 <__fp_round>
    3c84:	de d0       	rcall	.+444    	; 0x3e42 <__fp_pscB>
    3c86:	40 f0       	brcs	.+16     	; 0x3c98 <__divsf3+0x18>
    3c88:	d5 d0       	rcall	.+426    	; 0x3e34 <__fp_pscA>
    3c8a:	30 f0       	brcs	.+12     	; 0x3c98 <__divsf3+0x18>
    3c8c:	21 f4       	brne	.+8      	; 0x3c96 <__divsf3+0x16>
    3c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c90:	19 f0       	breq	.+6      	; 0x3c98 <__divsf3+0x18>
    3c92:	c7 c0       	rjmp	.+398    	; 0x3e22 <__fp_inf>
    3c94:	51 11       	cpse	r21, r1
    3c96:	10 c1       	rjmp	.+544    	; 0x3eb8 <__fp_szero>
    3c98:	ca c0       	rjmp	.+404    	; 0x3e2e <__fp_nan>

00003c9a <__divsf3x>:
    3c9a:	eb d0       	rcall	.+470    	; 0x3e72 <__fp_split3>
    3c9c:	98 f3       	brcs	.-26     	; 0x3c84 <__divsf3+0x4>

00003c9e <__divsf3_pse>:
    3c9e:	99 23       	and	r25, r25
    3ca0:	c9 f3       	breq	.-14     	; 0x3c94 <__divsf3+0x14>
    3ca2:	55 23       	and	r21, r21
    3ca4:	b1 f3       	breq	.-20     	; 0x3c92 <__divsf3+0x12>
    3ca6:	95 1b       	sub	r25, r21
    3ca8:	55 0b       	sbc	r21, r21
    3caa:	bb 27       	eor	r27, r27
    3cac:	aa 27       	eor	r26, r26
    3cae:	62 17       	cp	r22, r18
    3cb0:	73 07       	cpc	r23, r19
    3cb2:	84 07       	cpc	r24, r20
    3cb4:	38 f0       	brcs	.+14     	; 0x3cc4 <__divsf3_pse+0x26>
    3cb6:	9f 5f       	subi	r25, 0xFF	; 255
    3cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cba:	22 0f       	add	r18, r18
    3cbc:	33 1f       	adc	r19, r19
    3cbe:	44 1f       	adc	r20, r20
    3cc0:	aa 1f       	adc	r26, r26
    3cc2:	a9 f3       	breq	.-22     	; 0x3cae <__divsf3_pse+0x10>
    3cc4:	33 d0       	rcall	.+102    	; 0x3d2c <__divsf3_pse+0x8e>
    3cc6:	0e 2e       	mov	r0, r30
    3cc8:	3a f0       	brmi	.+14     	; 0x3cd8 <__divsf3_pse+0x3a>
    3cca:	e0 e8       	ldi	r30, 0x80	; 128
    3ccc:	30 d0       	rcall	.+96     	; 0x3d2e <__divsf3_pse+0x90>
    3cce:	91 50       	subi	r25, 0x01	; 1
    3cd0:	50 40       	sbci	r21, 0x00	; 0
    3cd2:	e6 95       	lsr	r30
    3cd4:	00 1c       	adc	r0, r0
    3cd6:	ca f7       	brpl	.-14     	; 0x3cca <__divsf3_pse+0x2c>
    3cd8:	29 d0       	rcall	.+82     	; 0x3d2c <__divsf3_pse+0x8e>
    3cda:	fe 2f       	mov	r31, r30
    3cdc:	27 d0       	rcall	.+78     	; 0x3d2c <__divsf3_pse+0x8e>
    3cde:	66 0f       	add	r22, r22
    3ce0:	77 1f       	adc	r23, r23
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	bb 1f       	adc	r27, r27
    3ce6:	26 17       	cp	r18, r22
    3ce8:	37 07       	cpc	r19, r23
    3cea:	48 07       	cpc	r20, r24
    3cec:	ab 07       	cpc	r26, r27
    3cee:	b0 e8       	ldi	r27, 0x80	; 128
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <__divsf3_pse+0x56>
    3cf2:	bb 0b       	sbc	r27, r27
    3cf4:	80 2d       	mov	r24, r0
    3cf6:	bf 01       	movw	r22, r30
    3cf8:	ff 27       	eor	r31, r31
    3cfa:	93 58       	subi	r25, 0x83	; 131
    3cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfe:	2a f0       	brmi	.+10     	; 0x3d0a <__divsf3_pse+0x6c>
    3d00:	9e 3f       	cpi	r25, 0xFE	; 254
    3d02:	51 05       	cpc	r21, r1
    3d04:	68 f0       	brcs	.+26     	; 0x3d20 <__divsf3_pse+0x82>
    3d06:	8d c0       	rjmp	.+282    	; 0x3e22 <__fp_inf>
    3d08:	d7 c0       	rjmp	.+430    	; 0x3eb8 <__fp_szero>
    3d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    3d0c:	ec f3       	brlt	.-6      	; 0x3d08 <__divsf3_pse+0x6a>
    3d0e:	98 3e       	cpi	r25, 0xE8	; 232
    3d10:	dc f3       	brlt	.-10     	; 0x3d08 <__divsf3_pse+0x6a>
    3d12:	86 95       	lsr	r24
    3d14:	77 95       	ror	r23
    3d16:	67 95       	ror	r22
    3d18:	b7 95       	ror	r27
    3d1a:	f7 95       	ror	r31
    3d1c:	9f 5f       	subi	r25, 0xFF	; 255
    3d1e:	c9 f7       	brne	.-14     	; 0x3d12 <__divsf3_pse+0x74>
    3d20:	88 0f       	add	r24, r24
    3d22:	91 1d       	adc	r25, r1
    3d24:	96 95       	lsr	r25
    3d26:	87 95       	ror	r24
    3d28:	97 f9       	bld	r25, 7
    3d2a:	08 95       	ret
    3d2c:	e1 e0       	ldi	r30, 0x01	; 1
    3d2e:	66 0f       	add	r22, r22
    3d30:	77 1f       	adc	r23, r23
    3d32:	88 1f       	adc	r24, r24
    3d34:	bb 1f       	adc	r27, r27
    3d36:	62 17       	cp	r22, r18
    3d38:	73 07       	cpc	r23, r19
    3d3a:	84 07       	cpc	r24, r20
    3d3c:	ba 07       	cpc	r27, r26
    3d3e:	20 f0       	brcs	.+8      	; 0x3d48 <__divsf3_pse+0xaa>
    3d40:	62 1b       	sub	r22, r18
    3d42:	73 0b       	sbc	r23, r19
    3d44:	84 0b       	sbc	r24, r20
    3d46:	ba 0b       	sbc	r27, r26
    3d48:	ee 1f       	adc	r30, r30
    3d4a:	88 f7       	brcc	.-30     	; 0x3d2e <__divsf3_pse+0x90>
    3d4c:	e0 95       	com	r30
    3d4e:	08 95       	ret

00003d50 <__fixunssfsi>:
    3d50:	98 d0       	rcall	.+304    	; 0x3e82 <__fp_splitA>
    3d52:	88 f0       	brcs	.+34     	; 0x3d76 <__fixunssfsi+0x26>
    3d54:	9f 57       	subi	r25, 0x7F	; 127
    3d56:	90 f0       	brcs	.+36     	; 0x3d7c <__fixunssfsi+0x2c>
    3d58:	b9 2f       	mov	r27, r25
    3d5a:	99 27       	eor	r25, r25
    3d5c:	b7 51       	subi	r27, 0x17	; 23
    3d5e:	a0 f0       	brcs	.+40     	; 0x3d88 <__fixunssfsi+0x38>
    3d60:	d1 f0       	breq	.+52     	; 0x3d96 <__fixunssfsi+0x46>
    3d62:	66 0f       	add	r22, r22
    3d64:	77 1f       	adc	r23, r23
    3d66:	88 1f       	adc	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	1a f0       	brmi	.+6      	; 0x3d72 <__fixunssfsi+0x22>
    3d6c:	ba 95       	dec	r27
    3d6e:	c9 f7       	brne	.-14     	; 0x3d62 <__fixunssfsi+0x12>
    3d70:	12 c0       	rjmp	.+36     	; 0x3d96 <__fixunssfsi+0x46>
    3d72:	b1 30       	cpi	r27, 0x01	; 1
    3d74:	81 f0       	breq	.+32     	; 0x3d96 <__fixunssfsi+0x46>
    3d76:	9f d0       	rcall	.+318    	; 0x3eb6 <__fp_zero>
    3d78:	b1 e0       	ldi	r27, 0x01	; 1
    3d7a:	08 95       	ret
    3d7c:	9c c0       	rjmp	.+312    	; 0x3eb6 <__fp_zero>
    3d7e:	67 2f       	mov	r22, r23
    3d80:	78 2f       	mov	r23, r24
    3d82:	88 27       	eor	r24, r24
    3d84:	b8 5f       	subi	r27, 0xF8	; 248
    3d86:	39 f0       	breq	.+14     	; 0x3d96 <__fixunssfsi+0x46>
    3d88:	b9 3f       	cpi	r27, 0xF9	; 249
    3d8a:	cc f3       	brlt	.-14     	; 0x3d7e <__fixunssfsi+0x2e>
    3d8c:	86 95       	lsr	r24
    3d8e:	77 95       	ror	r23
    3d90:	67 95       	ror	r22
    3d92:	b3 95       	inc	r27
    3d94:	d9 f7       	brne	.-10     	; 0x3d8c <__fixunssfsi+0x3c>
    3d96:	3e f4       	brtc	.+14     	; 0x3da6 <__fixunssfsi+0x56>
    3d98:	90 95       	com	r25
    3d9a:	80 95       	com	r24
    3d9c:	70 95       	com	r23
    3d9e:	61 95       	neg	r22
    3da0:	7f 4f       	sbci	r23, 0xFF	; 255
    3da2:	8f 4f       	sbci	r24, 0xFF	; 255
    3da4:	9f 4f       	sbci	r25, 0xFF	; 255
    3da6:	08 95       	ret

00003da8 <__floatunsisf>:
    3da8:	e8 94       	clt
    3daa:	09 c0       	rjmp	.+18     	; 0x3dbe <__floatsisf+0x12>

00003dac <__floatsisf>:
    3dac:	97 fb       	bst	r25, 7
    3dae:	3e f4       	brtc	.+14     	; 0x3dbe <__floatsisf+0x12>
    3db0:	90 95       	com	r25
    3db2:	80 95       	com	r24
    3db4:	70 95       	com	r23
    3db6:	61 95       	neg	r22
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	8f 4f       	sbci	r24, 0xFF	; 255
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	99 23       	and	r25, r25
    3dc0:	a9 f0       	breq	.+42     	; 0x3dec <__floatsisf+0x40>
    3dc2:	f9 2f       	mov	r31, r25
    3dc4:	96 e9       	ldi	r25, 0x96	; 150
    3dc6:	bb 27       	eor	r27, r27
    3dc8:	93 95       	inc	r25
    3dca:	f6 95       	lsr	r31
    3dcc:	87 95       	ror	r24
    3dce:	77 95       	ror	r23
    3dd0:	67 95       	ror	r22
    3dd2:	b7 95       	ror	r27
    3dd4:	f1 11       	cpse	r31, r1
    3dd6:	f8 cf       	rjmp	.-16     	; 0x3dc8 <__floatsisf+0x1c>
    3dd8:	fa f4       	brpl	.+62     	; 0x3e18 <__floatsisf+0x6c>
    3dda:	bb 0f       	add	r27, r27
    3ddc:	11 f4       	brne	.+4      	; 0x3de2 <__floatsisf+0x36>
    3dde:	60 ff       	sbrs	r22, 0
    3de0:	1b c0       	rjmp	.+54     	; 0x3e18 <__floatsisf+0x6c>
    3de2:	6f 5f       	subi	r22, 0xFF	; 255
    3de4:	7f 4f       	sbci	r23, 0xFF	; 255
    3de6:	8f 4f       	sbci	r24, 0xFF	; 255
    3de8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dea:	16 c0       	rjmp	.+44     	; 0x3e18 <__floatsisf+0x6c>
    3dec:	88 23       	and	r24, r24
    3dee:	11 f0       	breq	.+4      	; 0x3df4 <__floatsisf+0x48>
    3df0:	96 e9       	ldi	r25, 0x96	; 150
    3df2:	11 c0       	rjmp	.+34     	; 0x3e16 <__floatsisf+0x6a>
    3df4:	77 23       	and	r23, r23
    3df6:	21 f0       	breq	.+8      	; 0x3e00 <__floatsisf+0x54>
    3df8:	9e e8       	ldi	r25, 0x8E	; 142
    3dfa:	87 2f       	mov	r24, r23
    3dfc:	76 2f       	mov	r23, r22
    3dfe:	05 c0       	rjmp	.+10     	; 0x3e0a <__floatsisf+0x5e>
    3e00:	66 23       	and	r22, r22
    3e02:	71 f0       	breq	.+28     	; 0x3e20 <__floatsisf+0x74>
    3e04:	96 e8       	ldi	r25, 0x86	; 134
    3e06:	86 2f       	mov	r24, r22
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	2a f0       	brmi	.+10     	; 0x3e18 <__floatsisf+0x6c>
    3e0e:	9a 95       	dec	r25
    3e10:	66 0f       	add	r22, r22
    3e12:	77 1f       	adc	r23, r23
    3e14:	88 1f       	adc	r24, r24
    3e16:	da f7       	brpl	.-10     	; 0x3e0e <__floatsisf+0x62>
    3e18:	88 0f       	add	r24, r24
    3e1a:	96 95       	lsr	r25
    3e1c:	87 95       	ror	r24
    3e1e:	97 f9       	bld	r25, 7
    3e20:	08 95       	ret

00003e22 <__fp_inf>:
    3e22:	97 f9       	bld	r25, 7
    3e24:	9f 67       	ori	r25, 0x7F	; 127
    3e26:	80 e8       	ldi	r24, 0x80	; 128
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	08 95       	ret

00003e2e <__fp_nan>:
    3e2e:	9f ef       	ldi	r25, 0xFF	; 255
    3e30:	80 ec       	ldi	r24, 0xC0	; 192
    3e32:	08 95       	ret

00003e34 <__fp_pscA>:
    3e34:	00 24       	eor	r0, r0
    3e36:	0a 94       	dec	r0
    3e38:	16 16       	cp	r1, r22
    3e3a:	17 06       	cpc	r1, r23
    3e3c:	18 06       	cpc	r1, r24
    3e3e:	09 06       	cpc	r0, r25
    3e40:	08 95       	ret

00003e42 <__fp_pscB>:
    3e42:	00 24       	eor	r0, r0
    3e44:	0a 94       	dec	r0
    3e46:	12 16       	cp	r1, r18
    3e48:	13 06       	cpc	r1, r19
    3e4a:	14 06       	cpc	r1, r20
    3e4c:	05 06       	cpc	r0, r21
    3e4e:	08 95       	ret

00003e50 <__fp_round>:
    3e50:	09 2e       	mov	r0, r25
    3e52:	03 94       	inc	r0
    3e54:	00 0c       	add	r0, r0
    3e56:	11 f4       	brne	.+4      	; 0x3e5c <__fp_round+0xc>
    3e58:	88 23       	and	r24, r24
    3e5a:	52 f0       	brmi	.+20     	; 0x3e70 <__fp_round+0x20>
    3e5c:	bb 0f       	add	r27, r27
    3e5e:	40 f4       	brcc	.+16     	; 0x3e70 <__fp_round+0x20>
    3e60:	bf 2b       	or	r27, r31
    3e62:	11 f4       	brne	.+4      	; 0x3e68 <__fp_round+0x18>
    3e64:	60 ff       	sbrs	r22, 0
    3e66:	04 c0       	rjmp	.+8      	; 0x3e70 <__fp_round+0x20>
    3e68:	6f 5f       	subi	r22, 0xFF	; 255
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e70:	08 95       	ret

00003e72 <__fp_split3>:
    3e72:	57 fd       	sbrc	r21, 7
    3e74:	90 58       	subi	r25, 0x80	; 128
    3e76:	44 0f       	add	r20, r20
    3e78:	55 1f       	adc	r21, r21
    3e7a:	59 f0       	breq	.+22     	; 0x3e92 <__fp_splitA+0x10>
    3e7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e7e:	71 f0       	breq	.+28     	; 0x3e9c <__fp_splitA+0x1a>
    3e80:	47 95       	ror	r20

00003e82 <__fp_splitA>:
    3e82:	88 0f       	add	r24, r24
    3e84:	97 fb       	bst	r25, 7
    3e86:	99 1f       	adc	r25, r25
    3e88:	61 f0       	breq	.+24     	; 0x3ea2 <__fp_splitA+0x20>
    3e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    3e8c:	79 f0       	breq	.+30     	; 0x3eac <__fp_splitA+0x2a>
    3e8e:	87 95       	ror	r24
    3e90:	08 95       	ret
    3e92:	12 16       	cp	r1, r18
    3e94:	13 06       	cpc	r1, r19
    3e96:	14 06       	cpc	r1, r20
    3e98:	55 1f       	adc	r21, r21
    3e9a:	f2 cf       	rjmp	.-28     	; 0x3e80 <__fp_split3+0xe>
    3e9c:	46 95       	lsr	r20
    3e9e:	f1 df       	rcall	.-30     	; 0x3e82 <__fp_splitA>
    3ea0:	08 c0       	rjmp	.+16     	; 0x3eb2 <__fp_splitA+0x30>
    3ea2:	16 16       	cp	r1, r22
    3ea4:	17 06       	cpc	r1, r23
    3ea6:	18 06       	cpc	r1, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	f1 cf       	rjmp	.-30     	; 0x3e8e <__fp_splitA+0xc>
    3eac:	86 95       	lsr	r24
    3eae:	71 05       	cpc	r23, r1
    3eb0:	61 05       	cpc	r22, r1
    3eb2:	08 94       	sec
    3eb4:	08 95       	ret

00003eb6 <__fp_zero>:
    3eb6:	e8 94       	clt

00003eb8 <__fp_szero>:
    3eb8:	bb 27       	eor	r27, r27
    3eba:	66 27       	eor	r22, r22
    3ebc:	77 27       	eor	r23, r23
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	97 f9       	bld	r25, 7
    3ec2:	08 95       	ret

00003ec4 <__gesf2>:
    3ec4:	66 d0       	rcall	.+204    	; 0x3f92 <__fp_cmp>
    3ec6:	08 f4       	brcc	.+2      	; 0x3eca <__gesf2+0x6>
    3ec8:	8f ef       	ldi	r24, 0xFF	; 255
    3eca:	08 95       	ret

00003ecc <__mulsf3>:
    3ecc:	0b d0       	rcall	.+22     	; 0x3ee4 <__mulsf3x>
    3ece:	c0 cf       	rjmp	.-128    	; 0x3e50 <__fp_round>
    3ed0:	b1 df       	rcall	.-158    	; 0x3e34 <__fp_pscA>
    3ed2:	28 f0       	brcs	.+10     	; 0x3ede <__mulsf3+0x12>
    3ed4:	b6 df       	rcall	.-148    	; 0x3e42 <__fp_pscB>
    3ed6:	18 f0       	brcs	.+6      	; 0x3ede <__mulsf3+0x12>
    3ed8:	95 23       	and	r25, r21
    3eda:	09 f0       	breq	.+2      	; 0x3ede <__mulsf3+0x12>
    3edc:	a2 cf       	rjmp	.-188    	; 0x3e22 <__fp_inf>
    3ede:	a7 cf       	rjmp	.-178    	; 0x3e2e <__fp_nan>
    3ee0:	11 24       	eor	r1, r1
    3ee2:	ea cf       	rjmp	.-44     	; 0x3eb8 <__fp_szero>

00003ee4 <__mulsf3x>:
    3ee4:	c6 df       	rcall	.-116    	; 0x3e72 <__fp_split3>
    3ee6:	a0 f3       	brcs	.-24     	; 0x3ed0 <__mulsf3+0x4>

00003ee8 <__mulsf3_pse>:
    3ee8:	95 9f       	mul	r25, r21
    3eea:	d1 f3       	breq	.-12     	; 0x3ee0 <__mulsf3+0x14>
    3eec:	95 0f       	add	r25, r21
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	55 1f       	adc	r21, r21
    3ef2:	62 9f       	mul	r22, r18
    3ef4:	f0 01       	movw	r30, r0
    3ef6:	72 9f       	mul	r23, r18
    3ef8:	bb 27       	eor	r27, r27
    3efa:	f0 0d       	add	r31, r0
    3efc:	b1 1d       	adc	r27, r1
    3efe:	63 9f       	mul	r22, r19
    3f00:	aa 27       	eor	r26, r26
    3f02:	f0 0d       	add	r31, r0
    3f04:	b1 1d       	adc	r27, r1
    3f06:	aa 1f       	adc	r26, r26
    3f08:	64 9f       	mul	r22, r20
    3f0a:	66 27       	eor	r22, r22
    3f0c:	b0 0d       	add	r27, r0
    3f0e:	a1 1d       	adc	r26, r1
    3f10:	66 1f       	adc	r22, r22
    3f12:	82 9f       	mul	r24, r18
    3f14:	22 27       	eor	r18, r18
    3f16:	b0 0d       	add	r27, r0
    3f18:	a1 1d       	adc	r26, r1
    3f1a:	62 1f       	adc	r22, r18
    3f1c:	73 9f       	mul	r23, r19
    3f1e:	b0 0d       	add	r27, r0
    3f20:	a1 1d       	adc	r26, r1
    3f22:	62 1f       	adc	r22, r18
    3f24:	83 9f       	mul	r24, r19
    3f26:	a0 0d       	add	r26, r0
    3f28:	61 1d       	adc	r22, r1
    3f2a:	22 1f       	adc	r18, r18
    3f2c:	74 9f       	mul	r23, r20
    3f2e:	33 27       	eor	r19, r19
    3f30:	a0 0d       	add	r26, r0
    3f32:	61 1d       	adc	r22, r1
    3f34:	23 1f       	adc	r18, r19
    3f36:	84 9f       	mul	r24, r20
    3f38:	60 0d       	add	r22, r0
    3f3a:	21 1d       	adc	r18, r1
    3f3c:	82 2f       	mov	r24, r18
    3f3e:	76 2f       	mov	r23, r22
    3f40:	6a 2f       	mov	r22, r26
    3f42:	11 24       	eor	r1, r1
    3f44:	9f 57       	subi	r25, 0x7F	; 127
    3f46:	50 40       	sbci	r21, 0x00	; 0
    3f48:	8a f0       	brmi	.+34     	; 0x3f6c <__mulsf3_pse+0x84>
    3f4a:	e1 f0       	breq	.+56     	; 0x3f84 <__mulsf3_pse+0x9c>
    3f4c:	88 23       	and	r24, r24
    3f4e:	4a f0       	brmi	.+18     	; 0x3f62 <__mulsf3_pse+0x7a>
    3f50:	ee 0f       	add	r30, r30
    3f52:	ff 1f       	adc	r31, r31
    3f54:	bb 1f       	adc	r27, r27
    3f56:	66 1f       	adc	r22, r22
    3f58:	77 1f       	adc	r23, r23
    3f5a:	88 1f       	adc	r24, r24
    3f5c:	91 50       	subi	r25, 0x01	; 1
    3f5e:	50 40       	sbci	r21, 0x00	; 0
    3f60:	a9 f7       	brne	.-22     	; 0x3f4c <__mulsf3_pse+0x64>
    3f62:	9e 3f       	cpi	r25, 0xFE	; 254
    3f64:	51 05       	cpc	r21, r1
    3f66:	70 f0       	brcs	.+28     	; 0x3f84 <__mulsf3_pse+0x9c>
    3f68:	5c cf       	rjmp	.-328    	; 0x3e22 <__fp_inf>
    3f6a:	a6 cf       	rjmp	.-180    	; 0x3eb8 <__fp_szero>
    3f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f6e:	ec f3       	brlt	.-6      	; 0x3f6a <__mulsf3_pse+0x82>
    3f70:	98 3e       	cpi	r25, 0xE8	; 232
    3f72:	dc f3       	brlt	.-10     	; 0x3f6a <__mulsf3_pse+0x82>
    3f74:	86 95       	lsr	r24
    3f76:	77 95       	ror	r23
    3f78:	67 95       	ror	r22
    3f7a:	b7 95       	ror	r27
    3f7c:	f7 95       	ror	r31
    3f7e:	e7 95       	ror	r30
    3f80:	9f 5f       	subi	r25, 0xFF	; 255
    3f82:	c1 f7       	brne	.-16     	; 0x3f74 <__mulsf3_pse+0x8c>
    3f84:	fe 2b       	or	r31, r30
    3f86:	88 0f       	add	r24, r24
    3f88:	91 1d       	adc	r25, r1
    3f8a:	96 95       	lsr	r25
    3f8c:	87 95       	ror	r24
    3f8e:	97 f9       	bld	r25, 7
    3f90:	08 95       	ret

00003f92 <__fp_cmp>:
    3f92:	99 0f       	add	r25, r25
    3f94:	00 08       	sbc	r0, r0
    3f96:	55 0f       	add	r21, r21
    3f98:	aa 0b       	sbc	r26, r26
    3f9a:	e0 e8       	ldi	r30, 0x80	; 128
    3f9c:	fe ef       	ldi	r31, 0xFE	; 254
    3f9e:	16 16       	cp	r1, r22
    3fa0:	17 06       	cpc	r1, r23
    3fa2:	e8 07       	cpc	r30, r24
    3fa4:	f9 07       	cpc	r31, r25
    3fa6:	c0 f0       	brcs	.+48     	; 0x3fd8 <__fp_cmp+0x46>
    3fa8:	12 16       	cp	r1, r18
    3faa:	13 06       	cpc	r1, r19
    3fac:	e4 07       	cpc	r30, r20
    3fae:	f5 07       	cpc	r31, r21
    3fb0:	98 f0       	brcs	.+38     	; 0x3fd8 <__fp_cmp+0x46>
    3fb2:	62 1b       	sub	r22, r18
    3fb4:	73 0b       	sbc	r23, r19
    3fb6:	84 0b       	sbc	r24, r20
    3fb8:	95 0b       	sbc	r25, r21
    3fba:	39 f4       	brne	.+14     	; 0x3fca <__fp_cmp+0x38>
    3fbc:	0a 26       	eor	r0, r26
    3fbe:	61 f0       	breq	.+24     	; 0x3fd8 <__fp_cmp+0x46>
    3fc0:	23 2b       	or	r18, r19
    3fc2:	24 2b       	or	r18, r20
    3fc4:	25 2b       	or	r18, r21
    3fc6:	21 f4       	brne	.+8      	; 0x3fd0 <__fp_cmp+0x3e>
    3fc8:	08 95       	ret
    3fca:	0a 26       	eor	r0, r26
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <__fp_cmp+0x3e>
    3fce:	a1 40       	sbci	r26, 0x01	; 1
    3fd0:	a6 95       	lsr	r26
    3fd2:	8f ef       	ldi	r24, 0xFF	; 255
    3fd4:	81 1d       	adc	r24, r1
    3fd6:	81 1d       	adc	r24, r1
    3fd8:	08 95       	ret

00003fda <__divmodhi4>:
    3fda:	97 fb       	bst	r25, 7
    3fdc:	07 2e       	mov	r0, r23
    3fde:	16 f4       	brtc	.+4      	; 0x3fe4 <__divmodhi4+0xa>
    3fe0:	00 94       	com	r0
    3fe2:	06 d0       	rcall	.+12     	; 0x3ff0 <__divmodhi4_neg1>
    3fe4:	77 fd       	sbrc	r23, 7
    3fe6:	08 d0       	rcall	.+16     	; 0x3ff8 <__divmodhi4_neg2>
    3fe8:	44 d0       	rcall	.+136    	; 0x4072 <__udivmodhi4>
    3fea:	07 fc       	sbrc	r0, 7
    3fec:	05 d0       	rcall	.+10     	; 0x3ff8 <__divmodhi4_neg2>
    3fee:	3e f4       	brtc	.+14     	; 0x3ffe <__divmodhi4_exit>

00003ff0 <__divmodhi4_neg1>:
    3ff0:	90 95       	com	r25
    3ff2:	81 95       	neg	r24
    3ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff6:	08 95       	ret

00003ff8 <__divmodhi4_neg2>:
    3ff8:	70 95       	com	r23
    3ffa:	61 95       	neg	r22
    3ffc:	7f 4f       	sbci	r23, 0xFF	; 255

00003ffe <__divmodhi4_exit>:
    3ffe:	08 95       	ret

00004000 <__udivmodsi4>:
    4000:	a1 e2       	ldi	r26, 0x21	; 33
    4002:	1a 2e       	mov	r1, r26
    4004:	aa 1b       	sub	r26, r26
    4006:	bb 1b       	sub	r27, r27
    4008:	fd 01       	movw	r30, r26
    400a:	0d c0       	rjmp	.+26     	; 0x4026 <__udivmodsi4_ep>

0000400c <__udivmodsi4_loop>:
    400c:	aa 1f       	adc	r26, r26
    400e:	bb 1f       	adc	r27, r27
    4010:	ee 1f       	adc	r30, r30
    4012:	ff 1f       	adc	r31, r31
    4014:	a2 17       	cp	r26, r18
    4016:	b3 07       	cpc	r27, r19
    4018:	e4 07       	cpc	r30, r20
    401a:	f5 07       	cpc	r31, r21
    401c:	20 f0       	brcs	.+8      	; 0x4026 <__udivmodsi4_ep>
    401e:	a2 1b       	sub	r26, r18
    4020:	b3 0b       	sbc	r27, r19
    4022:	e4 0b       	sbc	r30, r20
    4024:	f5 0b       	sbc	r31, r21

00004026 <__udivmodsi4_ep>:
    4026:	66 1f       	adc	r22, r22
    4028:	77 1f       	adc	r23, r23
    402a:	88 1f       	adc	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	1a 94       	dec	r1
    4030:	69 f7       	brne	.-38     	; 0x400c <__udivmodsi4_loop>
    4032:	60 95       	com	r22
    4034:	70 95       	com	r23
    4036:	80 95       	com	r24
    4038:	90 95       	com	r25
    403a:	9b 01       	movw	r18, r22
    403c:	ac 01       	movw	r20, r24
    403e:	bd 01       	movw	r22, r26
    4040:	cf 01       	movw	r24, r30
    4042:	08 95       	ret

00004044 <__tablejump2__>:
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	88 1f       	adc	r24, r24
    404a:	8b bf       	out	0x3b, r24	; 59
    404c:	07 90       	elpm	r0, Z+
    404e:	f6 91       	elpm	r31, Z
    4050:	e0 2d       	mov	r30, r0
    4052:	19 94       	eijmp

00004054 <__umulhisi3>:
    4054:	a2 9f       	mul	r26, r18
    4056:	b0 01       	movw	r22, r0
    4058:	b3 9f       	mul	r27, r19
    405a:	c0 01       	movw	r24, r0
    405c:	a3 9f       	mul	r26, r19
    405e:	70 0d       	add	r23, r0
    4060:	81 1d       	adc	r24, r1
    4062:	11 24       	eor	r1, r1
    4064:	91 1d       	adc	r25, r1
    4066:	b2 9f       	mul	r27, r18
    4068:	70 0d       	add	r23, r0
    406a:	81 1d       	adc	r24, r1
    406c:	11 24       	eor	r1, r1
    406e:	91 1d       	adc	r25, r1
    4070:	08 95       	ret

00004072 <__udivmodhi4>:
    4072:	aa 1b       	sub	r26, r26
    4074:	bb 1b       	sub	r27, r27
    4076:	51 e1       	ldi	r21, 0x11	; 17
    4078:	07 c0       	rjmp	.+14     	; 0x4088 <__udivmodhi4_ep>

0000407a <__udivmodhi4_loop>:
    407a:	aa 1f       	adc	r26, r26
    407c:	bb 1f       	adc	r27, r27
    407e:	a6 17       	cp	r26, r22
    4080:	b7 07       	cpc	r27, r23
    4082:	10 f0       	brcs	.+4      	; 0x4088 <__udivmodhi4_ep>
    4084:	a6 1b       	sub	r26, r22
    4086:	b7 0b       	sbc	r27, r23

00004088 <__udivmodhi4_ep>:
    4088:	88 1f       	adc	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	5a 95       	dec	r21
    408e:	a9 f7       	brne	.-22     	; 0x407a <__udivmodhi4_loop>
    4090:	80 95       	com	r24
    4092:	90 95       	com	r25
    4094:	bc 01       	movw	r22, r24
    4096:	cd 01       	movw	r24, r26
    4098:	08 95       	ret

0000409a <malloc>:
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	82 30       	cpi	r24, 0x02	; 2
    40a4:	91 05       	cpc	r25, r1
    40a6:	10 f4       	brcc	.+4      	; 0x40ac <malloc+0x12>
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	e0 91 b6 13 	lds	r30, 0x13B6	; 0x8013b6 <__flp>
    40b0:	f0 91 b7 13 	lds	r31, 0x13B7	; 0x8013b7 <__flp+0x1>
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	a0 e0       	ldi	r26, 0x00	; 0
    40ba:	b0 e0       	ldi	r27, 0x00	; 0
    40bc:	30 97       	sbiw	r30, 0x00	; 0
    40be:	19 f1       	breq	.+70     	; 0x4106 <malloc+0x6c>
    40c0:	40 81       	ld	r20, Z
    40c2:	51 81       	ldd	r21, Z+1	; 0x01
    40c4:	02 81       	ldd	r16, Z+2	; 0x02
    40c6:	13 81       	ldd	r17, Z+3	; 0x03
    40c8:	48 17       	cp	r20, r24
    40ca:	59 07       	cpc	r21, r25
    40cc:	c8 f0       	brcs	.+50     	; 0x4100 <malloc+0x66>
    40ce:	84 17       	cp	r24, r20
    40d0:	95 07       	cpc	r25, r21
    40d2:	69 f4       	brne	.+26     	; 0x40ee <malloc+0x54>
    40d4:	10 97       	sbiw	r26, 0x00	; 0
    40d6:	31 f0       	breq	.+12     	; 0x40e4 <malloc+0x4a>
    40d8:	12 96       	adiw	r26, 0x02	; 2
    40da:	0c 93       	st	X, r16
    40dc:	12 97       	sbiw	r26, 0x02	; 2
    40de:	13 96       	adiw	r26, 0x03	; 3
    40e0:	1c 93       	st	X, r17
    40e2:	27 c0       	rjmp	.+78     	; 0x4132 <malloc+0x98>
    40e4:	00 93 b6 13 	sts	0x13B6, r16	; 0x8013b6 <__flp>
    40e8:	10 93 b7 13 	sts	0x13B7, r17	; 0x8013b7 <__flp+0x1>
    40ec:	22 c0       	rjmp	.+68     	; 0x4132 <malloc+0x98>
    40ee:	21 15       	cp	r18, r1
    40f0:	31 05       	cpc	r19, r1
    40f2:	19 f0       	breq	.+6      	; 0x40fa <malloc+0x60>
    40f4:	42 17       	cp	r20, r18
    40f6:	53 07       	cpc	r21, r19
    40f8:	18 f4       	brcc	.+6      	; 0x4100 <malloc+0x66>
    40fa:	9a 01       	movw	r18, r20
    40fc:	bd 01       	movw	r22, r26
    40fe:	ef 01       	movw	r28, r30
    4100:	df 01       	movw	r26, r30
    4102:	f8 01       	movw	r30, r16
    4104:	db cf       	rjmp	.-74     	; 0x40bc <malloc+0x22>
    4106:	21 15       	cp	r18, r1
    4108:	31 05       	cpc	r19, r1
    410a:	f9 f0       	breq	.+62     	; 0x414a <malloc+0xb0>
    410c:	28 1b       	sub	r18, r24
    410e:	39 0b       	sbc	r19, r25
    4110:	24 30       	cpi	r18, 0x04	; 4
    4112:	31 05       	cpc	r19, r1
    4114:	80 f4       	brcc	.+32     	; 0x4136 <malloc+0x9c>
    4116:	8a 81       	ldd	r24, Y+2	; 0x02
    4118:	9b 81       	ldd	r25, Y+3	; 0x03
    411a:	61 15       	cp	r22, r1
    411c:	71 05       	cpc	r23, r1
    411e:	21 f0       	breq	.+8      	; 0x4128 <malloc+0x8e>
    4120:	fb 01       	movw	r30, r22
    4122:	93 83       	std	Z+3, r25	; 0x03
    4124:	82 83       	std	Z+2, r24	; 0x02
    4126:	04 c0       	rjmp	.+8      	; 0x4130 <malloc+0x96>
    4128:	90 93 b7 13 	sts	0x13B7, r25	; 0x8013b7 <__flp+0x1>
    412c:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <__flp>
    4130:	fe 01       	movw	r30, r28
    4132:	32 96       	adiw	r30, 0x02	; 2
    4134:	44 c0       	rjmp	.+136    	; 0x41be <malloc+0x124>
    4136:	fe 01       	movw	r30, r28
    4138:	e2 0f       	add	r30, r18
    413a:	f3 1f       	adc	r31, r19
    413c:	81 93       	st	Z+, r24
    413e:	91 93       	st	Z+, r25
    4140:	22 50       	subi	r18, 0x02	; 2
    4142:	31 09       	sbc	r19, r1
    4144:	39 83       	std	Y+1, r19	; 0x01
    4146:	28 83       	st	Y, r18
    4148:	3a c0       	rjmp	.+116    	; 0x41be <malloc+0x124>
    414a:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <__brkval>
    414e:	30 91 b5 13 	lds	r19, 0x13B5	; 0x8013b5 <__brkval+0x1>
    4152:	23 2b       	or	r18, r19
    4154:	41 f4       	brne	.+16     	; 0x4166 <malloc+0xcc>
    4156:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    415a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    415e:	30 93 b5 13 	sts	0x13B5, r19	; 0x8013b5 <__brkval+0x1>
    4162:	20 93 b4 13 	sts	0x13B4, r18	; 0x8013b4 <__brkval>
    4166:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    416a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    416e:	21 15       	cp	r18, r1
    4170:	31 05       	cpc	r19, r1
    4172:	41 f4       	brne	.+16     	; 0x4184 <malloc+0xea>
    4174:	2d b7       	in	r18, 0x3d	; 61
    4176:	3e b7       	in	r19, 0x3e	; 62
    4178:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    417c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4180:	24 1b       	sub	r18, r20
    4182:	35 0b       	sbc	r19, r21
    4184:	e0 91 b4 13 	lds	r30, 0x13B4	; 0x8013b4 <__brkval>
    4188:	f0 91 b5 13 	lds	r31, 0x13B5	; 0x8013b5 <__brkval+0x1>
    418c:	e2 17       	cp	r30, r18
    418e:	f3 07       	cpc	r31, r19
    4190:	a0 f4       	brcc	.+40     	; 0x41ba <malloc+0x120>
    4192:	2e 1b       	sub	r18, r30
    4194:	3f 0b       	sbc	r19, r31
    4196:	28 17       	cp	r18, r24
    4198:	39 07       	cpc	r19, r25
    419a:	78 f0       	brcs	.+30     	; 0x41ba <malloc+0x120>
    419c:	ac 01       	movw	r20, r24
    419e:	4e 5f       	subi	r20, 0xFE	; 254
    41a0:	5f 4f       	sbci	r21, 0xFF	; 255
    41a2:	24 17       	cp	r18, r20
    41a4:	35 07       	cpc	r19, r21
    41a6:	48 f0       	brcs	.+18     	; 0x41ba <malloc+0x120>
    41a8:	4e 0f       	add	r20, r30
    41aa:	5f 1f       	adc	r21, r31
    41ac:	50 93 b5 13 	sts	0x13B5, r21	; 0x8013b5 <__brkval+0x1>
    41b0:	40 93 b4 13 	sts	0x13B4, r20	; 0x8013b4 <__brkval>
    41b4:	81 93       	st	Z+, r24
    41b6:	91 93       	st	Z+, r25
    41b8:	02 c0       	rjmp	.+4      	; 0x41be <malloc+0x124>
    41ba:	e0 e0       	ldi	r30, 0x00	; 0
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	cf 01       	movw	r24, r30
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
    41c4:	1f 91       	pop	r17
    41c6:	0f 91       	pop	r16
    41c8:	08 95       	ret

000041ca <free>:
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <free+0xa>
    41d2:	81 c0       	rjmp	.+258    	; 0x42d6 <free+0x10c>
    41d4:	fc 01       	movw	r30, r24
    41d6:	32 97       	sbiw	r30, 0x02	; 2
    41d8:	13 82       	std	Z+3, r1	; 0x03
    41da:	12 82       	std	Z+2, r1	; 0x02
    41dc:	a0 91 b6 13 	lds	r26, 0x13B6	; 0x8013b6 <__flp>
    41e0:	b0 91 b7 13 	lds	r27, 0x13B7	; 0x8013b7 <__flp+0x1>
    41e4:	10 97       	sbiw	r26, 0x00	; 0
    41e6:	81 f4       	brne	.+32     	; 0x4208 <free+0x3e>
    41e8:	20 81       	ld	r18, Z
    41ea:	31 81       	ldd	r19, Z+1	; 0x01
    41ec:	82 0f       	add	r24, r18
    41ee:	93 1f       	adc	r25, r19
    41f0:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <__brkval>
    41f4:	30 91 b5 13 	lds	r19, 0x13B5	; 0x8013b5 <__brkval+0x1>
    41f8:	28 17       	cp	r18, r24
    41fa:	39 07       	cpc	r19, r25
    41fc:	51 f5       	brne	.+84     	; 0x4252 <free+0x88>
    41fe:	f0 93 b5 13 	sts	0x13B5, r31	; 0x8013b5 <__brkval+0x1>
    4202:	e0 93 b4 13 	sts	0x13B4, r30	; 0x8013b4 <__brkval>
    4206:	67 c0       	rjmp	.+206    	; 0x42d6 <free+0x10c>
    4208:	ed 01       	movw	r28, r26
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	ce 17       	cp	r28, r30
    4210:	df 07       	cpc	r29, r31
    4212:	40 f4       	brcc	.+16     	; 0x4224 <free+0x5a>
    4214:	4a 81       	ldd	r20, Y+2	; 0x02
    4216:	5b 81       	ldd	r21, Y+3	; 0x03
    4218:	9e 01       	movw	r18, r28
    421a:	41 15       	cp	r20, r1
    421c:	51 05       	cpc	r21, r1
    421e:	f1 f0       	breq	.+60     	; 0x425c <free+0x92>
    4220:	ea 01       	movw	r28, r20
    4222:	f5 cf       	rjmp	.-22     	; 0x420e <free+0x44>
    4224:	d3 83       	std	Z+3, r29	; 0x03
    4226:	c2 83       	std	Z+2, r28	; 0x02
    4228:	40 81       	ld	r20, Z
    422a:	51 81       	ldd	r21, Z+1	; 0x01
    422c:	84 0f       	add	r24, r20
    422e:	95 1f       	adc	r25, r21
    4230:	c8 17       	cp	r28, r24
    4232:	d9 07       	cpc	r29, r25
    4234:	59 f4       	brne	.+22     	; 0x424c <free+0x82>
    4236:	88 81       	ld	r24, Y
    4238:	99 81       	ldd	r25, Y+1	; 0x01
    423a:	84 0f       	add	r24, r20
    423c:	95 1f       	adc	r25, r21
    423e:	02 96       	adiw	r24, 0x02	; 2
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	80 83       	st	Z, r24
    4244:	8a 81       	ldd	r24, Y+2	; 0x02
    4246:	9b 81       	ldd	r25, Y+3	; 0x03
    4248:	93 83       	std	Z+3, r25	; 0x03
    424a:	82 83       	std	Z+2, r24	; 0x02
    424c:	21 15       	cp	r18, r1
    424e:	31 05       	cpc	r19, r1
    4250:	29 f4       	brne	.+10     	; 0x425c <free+0x92>
    4252:	f0 93 b7 13 	sts	0x13B7, r31	; 0x8013b7 <__flp+0x1>
    4256:	e0 93 b6 13 	sts	0x13B6, r30	; 0x8013b6 <__flp>
    425a:	3d c0       	rjmp	.+122    	; 0x42d6 <free+0x10c>
    425c:	e9 01       	movw	r28, r18
    425e:	fb 83       	std	Y+3, r31	; 0x03
    4260:	ea 83       	std	Y+2, r30	; 0x02
    4262:	49 91       	ld	r20, Y+
    4264:	59 91       	ld	r21, Y+
    4266:	c4 0f       	add	r28, r20
    4268:	d5 1f       	adc	r29, r21
    426a:	ec 17       	cp	r30, r28
    426c:	fd 07       	cpc	r31, r29
    426e:	61 f4       	brne	.+24     	; 0x4288 <free+0xbe>
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	84 0f       	add	r24, r20
    4276:	95 1f       	adc	r25, r21
    4278:	02 96       	adiw	r24, 0x02	; 2
    427a:	e9 01       	movw	r28, r18
    427c:	99 83       	std	Y+1, r25	; 0x01
    427e:	88 83       	st	Y, r24
    4280:	82 81       	ldd	r24, Z+2	; 0x02
    4282:	93 81       	ldd	r25, Z+3	; 0x03
    4284:	9b 83       	std	Y+3, r25	; 0x03
    4286:	8a 83       	std	Y+2, r24	; 0x02
    4288:	e0 e0       	ldi	r30, 0x00	; 0
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	12 96       	adiw	r26, 0x02	; 2
    428e:	8d 91       	ld	r24, X+
    4290:	9c 91       	ld	r25, X
    4292:	13 97       	sbiw	r26, 0x03	; 3
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	19 f0       	breq	.+6      	; 0x429e <free+0xd4>
    4298:	fd 01       	movw	r30, r26
    429a:	dc 01       	movw	r26, r24
    429c:	f7 cf       	rjmp	.-18     	; 0x428c <free+0xc2>
    429e:	8d 91       	ld	r24, X+
    42a0:	9c 91       	ld	r25, X
    42a2:	11 97       	sbiw	r26, 0x01	; 1
    42a4:	9d 01       	movw	r18, r26
    42a6:	2e 5f       	subi	r18, 0xFE	; 254
    42a8:	3f 4f       	sbci	r19, 0xFF	; 255
    42aa:	82 0f       	add	r24, r18
    42ac:	93 1f       	adc	r25, r19
    42ae:	20 91 b4 13 	lds	r18, 0x13B4	; 0x8013b4 <__brkval>
    42b2:	30 91 b5 13 	lds	r19, 0x13B5	; 0x8013b5 <__brkval+0x1>
    42b6:	28 17       	cp	r18, r24
    42b8:	39 07       	cpc	r19, r25
    42ba:	69 f4       	brne	.+26     	; 0x42d6 <free+0x10c>
    42bc:	30 97       	sbiw	r30, 0x00	; 0
    42be:	29 f4       	brne	.+10     	; 0x42ca <free+0x100>
    42c0:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <__flp+0x1>
    42c4:	10 92 b6 13 	sts	0x13B6, r1	; 0x8013b6 <__flp>
    42c8:	02 c0       	rjmp	.+4      	; 0x42ce <free+0x104>
    42ca:	13 82       	std	Z+3, r1	; 0x03
    42cc:	12 82       	std	Z+2, r1	; 0x02
    42ce:	b0 93 b5 13 	sts	0x13B5, r27	; 0x8013b5 <__brkval+0x1>
    42d2:	a0 93 b4 13 	sts	0x13B4, r26	; 0x8013b4 <__brkval>
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	08 95       	ret

000042dc <memcpy>:
    42dc:	fb 01       	movw	r30, r22
    42de:	dc 01       	movw	r26, r24
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <memcpy+0xa>
    42e2:	01 90       	ld	r0, Z+
    42e4:	0d 92       	st	X+, r0
    42e6:	41 50       	subi	r20, 0x01	; 1
    42e8:	50 40       	sbci	r21, 0x00	; 0
    42ea:	d8 f7       	brcc	.-10     	; 0x42e2 <memcpy+0x6>
    42ec:	08 95       	ret

000042ee <memset>:
    42ee:	dc 01       	movw	r26, r24
    42f0:	01 c0       	rjmp	.+2      	; 0x42f4 <memset+0x6>
    42f2:	6d 93       	st	X+, r22
    42f4:	41 50       	subi	r20, 0x01	; 1
    42f6:	50 40       	sbci	r21, 0x00	; 0
    42f8:	e0 f7       	brcc	.-8      	; 0x42f2 <memset+0x4>
    42fa:	08 95       	ret

000042fc <_exit>:
    42fc:	f8 94       	cli

000042fe <__stop_program>:
    42fe:	ff cf       	rjmp	.-2      	; 0x42fe <__stop_program>
